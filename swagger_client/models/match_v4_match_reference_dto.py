# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MatchV4MatchReferenceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lane': 'str',
        'game_id': 'int',
        'champion': 'int',
        'platform_id': 'str',
        'season': 'int',
        'queue': 'int',
        'role': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'lane': 'lane',
        'game_id': 'gameId',
        'champion': 'champion',
        'platform_id': 'platformId',
        'season': 'season',
        'queue': 'queue',
        'role': 'role',
        'timestamp': 'timestamp'
    }

    def __init__(self, lane=None, game_id=None, champion=None, platform_id=None, season=None, queue=None, role=None, timestamp=None):  # noqa: E501
        """MatchV4MatchReferenceDto - a model defined in Swagger"""  # noqa: E501

        self._lane = None
        self._game_id = None
        self._champion = None
        self._platform_id = None
        self._season = None
        self._queue = None
        self._role = None
        self._timestamp = None
        self.discriminator = None

        if lane is not None:
            self.lane = lane
        if game_id is not None:
            self.game_id = game_id
        if champion is not None:
            self.champion = champion
        if platform_id is not None:
            self.platform_id = platform_id
        if season is not None:
            self.season = season
        if queue is not None:
            self.queue = queue
        if role is not None:
            self.role = role
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def lane(self):
        """Gets the lane of this MatchV4MatchReferenceDto.  # noqa: E501


        :return: The lane of this MatchV4MatchReferenceDto.  # noqa: E501
        :rtype: str
        """
        return self._lane

    @lane.setter
    def lane(self, lane):
        """Sets the lane of this MatchV4MatchReferenceDto.


        :param lane: The lane of this MatchV4MatchReferenceDto.  # noqa: E501
        :type: str
        """

        self._lane = lane

    @property
    def game_id(self):
        """Gets the game_id of this MatchV4MatchReferenceDto.  # noqa: E501


        :return: The game_id of this MatchV4MatchReferenceDto.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this MatchV4MatchReferenceDto.


        :param game_id: The game_id of this MatchV4MatchReferenceDto.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def champion(self):
        """Gets the champion of this MatchV4MatchReferenceDto.  # noqa: E501


        :return: The champion of this MatchV4MatchReferenceDto.  # noqa: E501
        :rtype: int
        """
        return self._champion

    @champion.setter
    def champion(self, champion):
        """Sets the champion of this MatchV4MatchReferenceDto.


        :param champion: The champion of this MatchV4MatchReferenceDto.  # noqa: E501
        :type: int
        """

        self._champion = champion

    @property
    def platform_id(self):
        """Gets the platform_id of this MatchV4MatchReferenceDto.  # noqa: E501


        :return: The platform_id of this MatchV4MatchReferenceDto.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this MatchV4MatchReferenceDto.


        :param platform_id: The platform_id of this MatchV4MatchReferenceDto.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    @property
    def season(self):
        """Gets the season of this MatchV4MatchReferenceDto.  # noqa: E501


        :return: The season of this MatchV4MatchReferenceDto.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this MatchV4MatchReferenceDto.


        :param season: The season of this MatchV4MatchReferenceDto.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def queue(self):
        """Gets the queue of this MatchV4MatchReferenceDto.  # noqa: E501


        :return: The queue of this MatchV4MatchReferenceDto.  # noqa: E501
        :rtype: int
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this MatchV4MatchReferenceDto.


        :param queue: The queue of this MatchV4MatchReferenceDto.  # noqa: E501
        :type: int
        """

        self._queue = queue

    @property
    def role(self):
        """Gets the role of this MatchV4MatchReferenceDto.  # noqa: E501


        :return: The role of this MatchV4MatchReferenceDto.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this MatchV4MatchReferenceDto.


        :param role: The role of this MatchV4MatchReferenceDto.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def timestamp(self):
        """Gets the timestamp of this MatchV4MatchReferenceDto.  # noqa: E501


        :return: The timestamp of this MatchV4MatchReferenceDto.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MatchV4MatchReferenceDto.


        :param timestamp: The timestamp of this MatchV4MatchReferenceDto.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchV4MatchReferenceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchV4MatchReferenceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
