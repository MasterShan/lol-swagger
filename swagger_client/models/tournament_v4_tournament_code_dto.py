# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TournamentV4TournamentCodeDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'map': 'str',
        'code': 'str',
        'spectators': 'str',
        'region': 'str',
        'provider_id': 'int',
        'team_size': 'int',
        'participants': 'list[str]',
        'pick_type': 'str',
        'tournament_id': 'int',
        'lobby_name': 'str',
        'password': 'str',
        'id': 'int',
        'meta_data': 'str'
    }

    attribute_map = {
        'map': 'map',
        'code': 'code',
        'spectators': 'spectators',
        'region': 'region',
        'provider_id': 'providerId',
        'team_size': 'teamSize',
        'participants': 'participants',
        'pick_type': 'pickType',
        'tournament_id': 'tournamentId',
        'lobby_name': 'lobbyName',
        'password': 'password',
        'id': 'id',
        'meta_data': 'metaData'
    }

    def __init__(self, map=None, code=None, spectators=None, region=None, provider_id=None, team_size=None, participants=None, pick_type=None, tournament_id=None, lobby_name=None, password=None, id=None, meta_data=None):  # noqa: E501
        """TournamentV4TournamentCodeDTO - a model defined in Swagger"""  # noqa: E501

        self._map = None
        self._code = None
        self._spectators = None
        self._region = None
        self._provider_id = None
        self._team_size = None
        self._participants = None
        self._pick_type = None
        self._tournament_id = None
        self._lobby_name = None
        self._password = None
        self._id = None
        self._meta_data = None
        self.discriminator = None

        if map is not None:
            self.map = map
        if code is not None:
            self.code = code
        if spectators is not None:
            self.spectators = spectators
        if region is not None:
            self.region = region
        if provider_id is not None:
            self.provider_id = provider_id
        if team_size is not None:
            self.team_size = team_size
        if participants is not None:
            self.participants = participants
        if pick_type is not None:
            self.pick_type = pick_type
        if tournament_id is not None:
            self.tournament_id = tournament_id
        if lobby_name is not None:
            self.lobby_name = lobby_name
        if password is not None:
            self.password = password
        if id is not None:
            self.id = id
        if meta_data is not None:
            self.meta_data = meta_data

    @property
    def map(self):
        """Gets the map of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The game map for the tournament code game  # noqa: E501

        :return: The map of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this TournamentV4TournamentCodeDTO.

        The game map for the tournament code game  # noqa: E501

        :param map: The map of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: str
        """

        self._map = map

    @property
    def code(self):
        """Gets the code of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The tournament code.  # noqa: E501

        :return: The code of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TournamentV4TournamentCodeDTO.

        The tournament code.  # noqa: E501

        :param code: The code of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def spectators(self):
        """Gets the spectators of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The spectator mode for the tournament code game.  # noqa: E501

        :return: The spectators of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: str
        """
        return self._spectators

    @spectators.setter
    def spectators(self, spectators):
        """Sets the spectators of this TournamentV4TournamentCodeDTO.

        The spectator mode for the tournament code game.  # noqa: E501

        :param spectators: The spectators of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: str
        """

        self._spectators = spectators

    @property
    def region(self):
        """Gets the region of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The tournament code's region.              (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)  # noqa: E501

        :return: The region of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TournamentV4TournamentCodeDTO.

        The tournament code's region.              (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)  # noqa: E501

        :param region: The region of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["BR", "EUNE", "EUW", "JP", "LAN", "LAS", "NA", "OCE", "PBE", "RU", "TR"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"  # noqa: E501
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def provider_id(self):
        """Gets the provider_id of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The provider's ID.  # noqa: E501

        :return: The provider_id of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this TournamentV4TournamentCodeDTO.

        The provider's ID.  # noqa: E501

        :param provider_id: The provider_id of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: int
        """

        self._provider_id = provider_id

    @property
    def team_size(self):
        """Gets the team_size of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The team size for the tournament code game.  # noqa: E501

        :return: The team_size of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: int
        """
        return self._team_size

    @team_size.setter
    def team_size(self, team_size):
        """Sets the team_size of this TournamentV4TournamentCodeDTO.

        The team size for the tournament code game.  # noqa: E501

        :param team_size: The team_size of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: int
        """

        self._team_size = team_size

    @property
    def participants(self):
        """Gets the participants of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The summonerIds of the participants (Encrypted)  # noqa: E501

        :return: The participants of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this TournamentV4TournamentCodeDTO.

        The summonerIds of the participants (Encrypted)  # noqa: E501

        :param participants: The participants of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: list[str]
        """

        self._participants = participants

    @property
    def pick_type(self):
        """Gets the pick_type of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The pick mode for tournament code game.  # noqa: E501

        :return: The pick_type of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: str
        """
        return self._pick_type

    @pick_type.setter
    def pick_type(self, pick_type):
        """Sets the pick_type of this TournamentV4TournamentCodeDTO.

        The pick mode for tournament code game.  # noqa: E501

        :param pick_type: The pick_type of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: str
        """

        self._pick_type = pick_type

    @property
    def tournament_id(self):
        """Gets the tournament_id of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The tournament's ID.  # noqa: E501

        :return: The tournament_id of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this TournamentV4TournamentCodeDTO.

        The tournament's ID.  # noqa: E501

        :param tournament_id: The tournament_id of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: int
        """

        self._tournament_id = tournament_id

    @property
    def lobby_name(self):
        """Gets the lobby_name of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The lobby name for the tournament code game.  # noqa: E501

        :return: The lobby_name of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: str
        """
        return self._lobby_name

    @lobby_name.setter
    def lobby_name(self, lobby_name):
        """Sets the lobby_name of this TournamentV4TournamentCodeDTO.

        The lobby name for the tournament code game.  # noqa: E501

        :param lobby_name: The lobby_name of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: str
        """

        self._lobby_name = lobby_name

    @property
    def password(self):
        """Gets the password of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The password for the tournament code game.  # noqa: E501

        :return: The password of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TournamentV4TournamentCodeDTO.

        The password for the tournament code game.  # noqa: E501

        :param password: The password of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def id(self):
        """Gets the id of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The tournament code's ID.  # noqa: E501

        :return: The id of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TournamentV4TournamentCodeDTO.

        The tournament code's ID.  # noqa: E501

        :param id: The id of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def meta_data(self):
        """Gets the meta_data of this TournamentV4TournamentCodeDTO.  # noqa: E501

        The metadata for tournament code.  # noqa: E501

        :return: The meta_data of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :rtype: str
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this TournamentV4TournamentCodeDTO.

        The metadata for tournament code.  # noqa: E501

        :param meta_data: The meta_data of this TournamentV4TournamentCodeDTO.  # noqa: E501
        :type: str
        """

        self._meta_data = meta_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TournamentV4TournamentCodeDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TournamentV4TournamentCodeDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
