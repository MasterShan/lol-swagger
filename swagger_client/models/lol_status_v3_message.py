# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.lol_status_v3_translation import LolStatusV3Translation  # noqa: F401,E501


class LolStatusV3Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'str',
        'author': 'str',
        'created_at': 'str',
        'translations': 'list[LolStatusV3Translation]',
        'updated_at': 'str',
        'content': 'str',
        'id': 'str'
    }

    attribute_map = {
        'severity': 'severity',
        'author': 'author',
        'created_at': 'created_at',
        'translations': 'translations',
        'updated_at': 'updated_at',
        'content': 'content',
        'id': 'id'
    }

    def __init__(self, severity=None, author=None, created_at=None, translations=None, updated_at=None, content=None, id=None):  # noqa: E501
        """LolStatusV3Message - a model defined in Swagger"""  # noqa: E501

        self._severity = None
        self._author = None
        self._created_at = None
        self._translations = None
        self._updated_at = None
        self._content = None
        self._id = None
        self.discriminator = None

        if severity is not None:
            self.severity = severity
        if author is not None:
            self.author = author
        if created_at is not None:
            self.created_at = created_at
        if translations is not None:
            self.translations = translations
        if updated_at is not None:
            self.updated_at = updated_at
        if content is not None:
            self.content = content
        if id is not None:
            self.id = id

    @property
    def severity(self):
        """Gets the severity of this LolStatusV3Message.  # noqa: E501


        :return: The severity of this LolStatusV3Message.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this LolStatusV3Message.


        :param severity: The severity of this LolStatusV3Message.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def author(self):
        """Gets the author of this LolStatusV3Message.  # noqa: E501


        :return: The author of this LolStatusV3Message.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this LolStatusV3Message.


        :param author: The author of this LolStatusV3Message.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def created_at(self):
        """Gets the created_at of this LolStatusV3Message.  # noqa: E501


        :return: The created_at of this LolStatusV3Message.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LolStatusV3Message.


        :param created_at: The created_at of this LolStatusV3Message.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def translations(self):
        """Gets the translations of this LolStatusV3Message.  # noqa: E501


        :return: The translations of this LolStatusV3Message.  # noqa: E501
        :rtype: list[LolStatusV3Translation]
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this LolStatusV3Message.


        :param translations: The translations of this LolStatusV3Message.  # noqa: E501
        :type: list[LolStatusV3Translation]
        """

        self._translations = translations

    @property
    def updated_at(self):
        """Gets the updated_at of this LolStatusV3Message.  # noqa: E501


        :return: The updated_at of this LolStatusV3Message.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LolStatusV3Message.


        :param updated_at: The updated_at of this LolStatusV3Message.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def content(self):
        """Gets the content of this LolStatusV3Message.  # noqa: E501


        :return: The content of this LolStatusV3Message.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this LolStatusV3Message.


        :param content: The content of this LolStatusV3Message.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def id(self):
        """Gets the id of this LolStatusV3Message.  # noqa: E501


        :return: The id of this LolStatusV3Message.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LolStatusV3Message.


        :param id: The id of this LolStatusV3Message.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LolStatusV3Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LolStatusV3Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
