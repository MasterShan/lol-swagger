# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.match_v4_match_position_dto import MatchV4MatchPositionDto  # noqa: F401,E501


class MatchV4MatchEventDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_type': 'str',
        'tower_type': 'str',
        'team_id': 'int',
        'ascended_type': 'str',
        'killer_id': 'int',
        'level_up_type': 'str',
        'point_captured': 'str',
        'assisting_participant_ids': 'list[int]',
        'ward_type': 'str',
        'monster_type': 'str',
        'type': 'str',
        'skill_slot': 'int',
        'victim_id': 'int',
        'timestamp': 'int',
        'after_id': 'int',
        'monster_sub_type': 'str',
        'lane_type': 'str',
        'item_id': 'int',
        'participant_id': 'int',
        'building_type': 'str',
        'creator_id': 'int',
        'position': 'MatchV4MatchPositionDto',
        'before_id': 'int'
    }

    attribute_map = {
        'event_type': 'eventType',
        'tower_type': 'towerType',
        'team_id': 'teamId',
        'ascended_type': 'ascendedType',
        'killer_id': 'killerId',
        'level_up_type': 'levelUpType',
        'point_captured': 'pointCaptured',
        'assisting_participant_ids': 'assistingParticipantIds',
        'ward_type': 'wardType',
        'monster_type': 'monsterType',
        'type': 'type',
        'skill_slot': 'skillSlot',
        'victim_id': 'victimId',
        'timestamp': 'timestamp',
        'after_id': 'afterId',
        'monster_sub_type': 'monsterSubType',
        'lane_type': 'laneType',
        'item_id': 'itemId',
        'participant_id': 'participantId',
        'building_type': 'buildingType',
        'creator_id': 'creatorId',
        'position': 'position',
        'before_id': 'beforeId'
    }

    def __init__(self, event_type=None, tower_type=None, team_id=None, ascended_type=None, killer_id=None, level_up_type=None, point_captured=None, assisting_participant_ids=None, ward_type=None, monster_type=None, type=None, skill_slot=None, victim_id=None, timestamp=None, after_id=None, monster_sub_type=None, lane_type=None, item_id=None, participant_id=None, building_type=None, creator_id=None, position=None, before_id=None):  # noqa: E501
        """MatchV4MatchEventDto - a model defined in Swagger"""  # noqa: E501

        self._event_type = None
        self._tower_type = None
        self._team_id = None
        self._ascended_type = None
        self._killer_id = None
        self._level_up_type = None
        self._point_captured = None
        self._assisting_participant_ids = None
        self._ward_type = None
        self._monster_type = None
        self._type = None
        self._skill_slot = None
        self._victim_id = None
        self._timestamp = None
        self._after_id = None
        self._monster_sub_type = None
        self._lane_type = None
        self._item_id = None
        self._participant_id = None
        self._building_type = None
        self._creator_id = None
        self._position = None
        self._before_id = None
        self.discriminator = None

        if event_type is not None:
            self.event_type = event_type
        if tower_type is not None:
            self.tower_type = tower_type
        if team_id is not None:
            self.team_id = team_id
        if ascended_type is not None:
            self.ascended_type = ascended_type
        if killer_id is not None:
            self.killer_id = killer_id
        if level_up_type is not None:
            self.level_up_type = level_up_type
        if point_captured is not None:
            self.point_captured = point_captured
        if assisting_participant_ids is not None:
            self.assisting_participant_ids = assisting_participant_ids
        if ward_type is not None:
            self.ward_type = ward_type
        if monster_type is not None:
            self.monster_type = monster_type
        if type is not None:
            self.type = type
        if skill_slot is not None:
            self.skill_slot = skill_slot
        if victim_id is not None:
            self.victim_id = victim_id
        if timestamp is not None:
            self.timestamp = timestamp
        if after_id is not None:
            self.after_id = after_id
        if monster_sub_type is not None:
            self.monster_sub_type = monster_sub_type
        if lane_type is not None:
            self.lane_type = lane_type
        if item_id is not None:
            self.item_id = item_id
        if participant_id is not None:
            self.participant_id = participant_id
        if building_type is not None:
            self.building_type = building_type
        if creator_id is not None:
            self.creator_id = creator_id
        if position is not None:
            self.position = position
        if before_id is not None:
            self.before_id = before_id

    @property
    def event_type(self):
        """Gets the event_type of this MatchV4MatchEventDto.  # noqa: E501


        :return: The event_type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MatchV4MatchEventDto.


        :param event_type: The event_type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def tower_type(self):
        """Gets the tower_type of this MatchV4MatchEventDto.  # noqa: E501


        :return: The tower_type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._tower_type

    @tower_type.setter
    def tower_type(self, tower_type):
        """Sets the tower_type of this MatchV4MatchEventDto.


        :param tower_type: The tower_type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._tower_type = tower_type

    @property
    def team_id(self):
        """Gets the team_id of this MatchV4MatchEventDto.  # noqa: E501


        :return: The team_id of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this MatchV4MatchEventDto.


        :param team_id: The team_id of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def ascended_type(self):
        """Gets the ascended_type of this MatchV4MatchEventDto.  # noqa: E501


        :return: The ascended_type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._ascended_type

    @ascended_type.setter
    def ascended_type(self, ascended_type):
        """Sets the ascended_type of this MatchV4MatchEventDto.


        :param ascended_type: The ascended_type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._ascended_type = ascended_type

    @property
    def killer_id(self):
        """Gets the killer_id of this MatchV4MatchEventDto.  # noqa: E501


        :return: The killer_id of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._killer_id

    @killer_id.setter
    def killer_id(self, killer_id):
        """Sets the killer_id of this MatchV4MatchEventDto.


        :param killer_id: The killer_id of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._killer_id = killer_id

    @property
    def level_up_type(self):
        """Gets the level_up_type of this MatchV4MatchEventDto.  # noqa: E501


        :return: The level_up_type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._level_up_type

    @level_up_type.setter
    def level_up_type(self, level_up_type):
        """Sets the level_up_type of this MatchV4MatchEventDto.


        :param level_up_type: The level_up_type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._level_up_type = level_up_type

    @property
    def point_captured(self):
        """Gets the point_captured of this MatchV4MatchEventDto.  # noqa: E501


        :return: The point_captured of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._point_captured

    @point_captured.setter
    def point_captured(self, point_captured):
        """Sets the point_captured of this MatchV4MatchEventDto.


        :param point_captured: The point_captured of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._point_captured = point_captured

    @property
    def assisting_participant_ids(self):
        """Gets the assisting_participant_ids of this MatchV4MatchEventDto.  # noqa: E501


        :return: The assisting_participant_ids of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._assisting_participant_ids

    @assisting_participant_ids.setter
    def assisting_participant_ids(self, assisting_participant_ids):
        """Sets the assisting_participant_ids of this MatchV4MatchEventDto.


        :param assisting_participant_ids: The assisting_participant_ids of this MatchV4MatchEventDto.  # noqa: E501
        :type: list[int]
        """

        self._assisting_participant_ids = assisting_participant_ids

    @property
    def ward_type(self):
        """Gets the ward_type of this MatchV4MatchEventDto.  # noqa: E501


        :return: The ward_type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._ward_type

    @ward_type.setter
    def ward_type(self, ward_type):
        """Sets the ward_type of this MatchV4MatchEventDto.


        :param ward_type: The ward_type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._ward_type = ward_type

    @property
    def monster_type(self):
        """Gets the monster_type of this MatchV4MatchEventDto.  # noqa: E501


        :return: The monster_type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._monster_type

    @monster_type.setter
    def monster_type(self, monster_type):
        """Sets the monster_type of this MatchV4MatchEventDto.


        :param monster_type: The monster_type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._monster_type = monster_type

    @property
    def type(self):
        """Gets the type of this MatchV4MatchEventDto.  # noqa: E501

        (Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL,  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO,  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON)  # noqa: E501

        :return: The type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MatchV4MatchEventDto.

        (Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL,  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO,  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON)  # noqa: E501

        :param type: The type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["CHAMPION_KILL", "WARD_PLACED", "WARD_KILL", "BUILDING_KILL", "ELITE_MONSTER_KILL", "ITEM_PURCHASED", "ITEM_SOLD", "ITEM_DESTROYED", "ITEM_UNDO", "SKILL_LEVEL_UP", "ASCENDED_EVENT", "CAPTURE_POINT", "PORO_KING_SUMMON"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def skill_slot(self):
        """Gets the skill_slot of this MatchV4MatchEventDto.  # noqa: E501


        :return: The skill_slot of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._skill_slot

    @skill_slot.setter
    def skill_slot(self, skill_slot):
        """Sets the skill_slot of this MatchV4MatchEventDto.


        :param skill_slot: The skill_slot of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._skill_slot = skill_slot

    @property
    def victim_id(self):
        """Gets the victim_id of this MatchV4MatchEventDto.  # noqa: E501


        :return: The victim_id of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._victim_id

    @victim_id.setter
    def victim_id(self, victim_id):
        """Sets the victim_id of this MatchV4MatchEventDto.


        :param victim_id: The victim_id of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._victim_id = victim_id

    @property
    def timestamp(self):
        """Gets the timestamp of this MatchV4MatchEventDto.  # noqa: E501


        :return: The timestamp of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MatchV4MatchEventDto.


        :param timestamp: The timestamp of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def after_id(self):
        """Gets the after_id of this MatchV4MatchEventDto.  # noqa: E501


        :return: The after_id of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._after_id

    @after_id.setter
    def after_id(self, after_id):
        """Sets the after_id of this MatchV4MatchEventDto.


        :param after_id: The after_id of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._after_id = after_id

    @property
    def monster_sub_type(self):
        """Gets the monster_sub_type of this MatchV4MatchEventDto.  # noqa: E501


        :return: The monster_sub_type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._monster_sub_type

    @monster_sub_type.setter
    def monster_sub_type(self, monster_sub_type):
        """Sets the monster_sub_type of this MatchV4MatchEventDto.


        :param monster_sub_type: The monster_sub_type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._monster_sub_type = monster_sub_type

    @property
    def lane_type(self):
        """Gets the lane_type of this MatchV4MatchEventDto.  # noqa: E501


        :return: The lane_type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._lane_type

    @lane_type.setter
    def lane_type(self, lane_type):
        """Sets the lane_type of this MatchV4MatchEventDto.


        :param lane_type: The lane_type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._lane_type = lane_type

    @property
    def item_id(self):
        """Gets the item_id of this MatchV4MatchEventDto.  # noqa: E501


        :return: The item_id of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this MatchV4MatchEventDto.


        :param item_id: The item_id of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def participant_id(self):
        """Gets the participant_id of this MatchV4MatchEventDto.  # noqa: E501


        :return: The participant_id of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """Sets the participant_id of this MatchV4MatchEventDto.


        :param participant_id: The participant_id of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._participant_id = participant_id

    @property
    def building_type(self):
        """Gets the building_type of this MatchV4MatchEventDto.  # noqa: E501


        :return: The building_type of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: str
        """
        return self._building_type

    @building_type.setter
    def building_type(self, building_type):
        """Sets the building_type of this MatchV4MatchEventDto.


        :param building_type: The building_type of this MatchV4MatchEventDto.  # noqa: E501
        :type: str
        """

        self._building_type = building_type

    @property
    def creator_id(self):
        """Gets the creator_id of this MatchV4MatchEventDto.  # noqa: E501


        :return: The creator_id of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this MatchV4MatchEventDto.


        :param creator_id: The creator_id of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def position(self):
        """Gets the position of this MatchV4MatchEventDto.  # noqa: E501


        :return: The position of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: MatchV4MatchPositionDto
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this MatchV4MatchEventDto.


        :param position: The position of this MatchV4MatchEventDto.  # noqa: E501
        :type: MatchV4MatchPositionDto
        """

        self._position = position

    @property
    def before_id(self):
        """Gets the before_id of this MatchV4MatchEventDto.  # noqa: E501


        :return: The before_id of this MatchV4MatchEventDto.  # noqa: E501
        :rtype: int
        """
        return self._before_id

    @before_id.setter
    def before_id(self, before_id):
        """Sets the before_id of this MatchV4MatchEventDto.


        :param before_id: The before_id of this MatchV4MatchEventDto.  # noqa: E501
        :type: int
        """

        self._before_id = before_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchV4MatchEventDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchV4MatchEventDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
