# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.spectator_v4_banned_champion import SpectatorV4BannedChampion  # noqa: F401,E501
from swagger_client.models.spectator_v4_current_game_participant import SpectatorV4CurrentGameParticipant  # noqa: F401,E501
from swagger_client.models.spectator_v4_observer import SpectatorV4Observer  # noqa: F401,E501


class SpectatorV4CurrentGameInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_id': 'int',
        'game_start_time': 'int',
        'platform_id': 'str',
        'game_mode': 'str',
        'map_id': 'int',
        'game_type': 'str',
        'banned_champions': 'list[SpectatorV4BannedChampion]',
        'observers': 'SpectatorV4Observer',
        'participants': 'list[SpectatorV4CurrentGameParticipant]',
        'game_length': 'int',
        'game_queue_config_id': 'int'
    }

    attribute_map = {
        'game_id': 'gameId',
        'game_start_time': 'gameStartTime',
        'platform_id': 'platformId',
        'game_mode': 'gameMode',
        'map_id': 'mapId',
        'game_type': 'gameType',
        'banned_champions': 'bannedChampions',
        'observers': 'observers',
        'participants': 'participants',
        'game_length': 'gameLength',
        'game_queue_config_id': 'gameQueueConfigId'
    }

    def __init__(self, game_id=None, game_start_time=None, platform_id=None, game_mode=None, map_id=None, game_type=None, banned_champions=None, observers=None, participants=None, game_length=None, game_queue_config_id=None):  # noqa: E501
        """SpectatorV4CurrentGameInfo - a model defined in Swagger"""  # noqa: E501

        self._game_id = None
        self._game_start_time = None
        self._platform_id = None
        self._game_mode = None
        self._map_id = None
        self._game_type = None
        self._banned_champions = None
        self._observers = None
        self._participants = None
        self._game_length = None
        self._game_queue_config_id = None
        self.discriminator = None

        if game_id is not None:
            self.game_id = game_id
        if game_start_time is not None:
            self.game_start_time = game_start_time
        if platform_id is not None:
            self.platform_id = platform_id
        if game_mode is not None:
            self.game_mode = game_mode
        if map_id is not None:
            self.map_id = map_id
        if game_type is not None:
            self.game_type = game_type
        if banned_champions is not None:
            self.banned_champions = banned_champions
        if observers is not None:
            self.observers = observers
        if participants is not None:
            self.participants = participants
        if game_length is not None:
            self.game_length = game_length
        if game_queue_config_id is not None:
            self.game_queue_config_id = game_queue_config_id

    @property
    def game_id(self):
        """Gets the game_id of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The ID of the game  # noqa: E501

        :return: The game_id of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this SpectatorV4CurrentGameInfo.

        The ID of the game  # noqa: E501

        :param game_id: The game_id of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def game_start_time(self):
        """Gets the game_start_time of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The game start time represented in epoch milliseconds  # noqa: E501

        :return: The game_start_time of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: int
        """
        return self._game_start_time

    @game_start_time.setter
    def game_start_time(self, game_start_time):
        """Sets the game_start_time of this SpectatorV4CurrentGameInfo.

        The game start time represented in epoch milliseconds  # noqa: E501

        :param game_start_time: The game_start_time of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: int
        """

        self._game_start_time = game_start_time

    @property
    def platform_id(self):
        """Gets the platform_id of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The ID of the platform on which the game is being played  # noqa: E501

        :return: The platform_id of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this SpectatorV4CurrentGameInfo.

        The ID of the platform on which the game is being played  # noqa: E501

        :param platform_id: The platform_id of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    @property
    def game_mode(self):
        """Gets the game_mode of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The game mode  # noqa: E501

        :return: The game_mode of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: str
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """Sets the game_mode of this SpectatorV4CurrentGameInfo.

        The game mode  # noqa: E501

        :param game_mode: The game_mode of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: str
        """

        self._game_mode = game_mode

    @property
    def map_id(self):
        """Gets the map_id of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The ID of the map  # noqa: E501

        :return: The map_id of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: int
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this SpectatorV4CurrentGameInfo.

        The ID of the map  # noqa: E501

        :param map_id: The map_id of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: int
        """

        self._map_id = map_id

    @property
    def game_type(self):
        """Gets the game_type of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The game type  # noqa: E501

        :return: The game_type of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: str
        """
        return self._game_type

    @game_type.setter
    def game_type(self, game_type):
        """Sets the game_type of this SpectatorV4CurrentGameInfo.

        The game type  # noqa: E501

        :param game_type: The game_type of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: str
        """

        self._game_type = game_type

    @property
    def banned_champions(self):
        """Gets the banned_champions of this SpectatorV4CurrentGameInfo.  # noqa: E501

        Banned champion information  # noqa: E501

        :return: The banned_champions of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: list[SpectatorV4BannedChampion]
        """
        return self._banned_champions

    @banned_champions.setter
    def banned_champions(self, banned_champions):
        """Sets the banned_champions of this SpectatorV4CurrentGameInfo.

        Banned champion information  # noqa: E501

        :param banned_champions: The banned_champions of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: list[SpectatorV4BannedChampion]
        """

        self._banned_champions = banned_champions

    @property
    def observers(self):
        """Gets the observers of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The observer information  # noqa: E501

        :return: The observers of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: SpectatorV4Observer
        """
        return self._observers

    @observers.setter
    def observers(self, observers):
        """Sets the observers of this SpectatorV4CurrentGameInfo.

        The observer information  # noqa: E501

        :param observers: The observers of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: SpectatorV4Observer
        """

        self._observers = observers

    @property
    def participants(self):
        """Gets the participants of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The participant information  # noqa: E501

        :return: The participants of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: list[SpectatorV4CurrentGameParticipant]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this SpectatorV4CurrentGameInfo.

        The participant information  # noqa: E501

        :param participants: The participants of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: list[SpectatorV4CurrentGameParticipant]
        """

        self._participants = participants

    @property
    def game_length(self):
        """Gets the game_length of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The amount of time in seconds that has passed since the game started  # noqa: E501

        :return: The game_length of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: int
        """
        return self._game_length

    @game_length.setter
    def game_length(self, game_length):
        """Sets the game_length of this SpectatorV4CurrentGameInfo.

        The amount of time in seconds that has passed since the game started  # noqa: E501

        :param game_length: The game_length of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: int
        """

        self._game_length = game_length

    @property
    def game_queue_config_id(self):
        """Gets the game_queue_config_id of this SpectatorV4CurrentGameInfo.  # noqa: E501

        The queue type (queue types are documented on the Game Constants page)  # noqa: E501

        :return: The game_queue_config_id of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :rtype: int
        """
        return self._game_queue_config_id

    @game_queue_config_id.setter
    def game_queue_config_id(self, game_queue_config_id):
        """Sets the game_queue_config_id of this SpectatorV4CurrentGameInfo.

        The queue type (queue types are documented on the Game Constants page)  # noqa: E501

        :param game_queue_config_id: The game_queue_config_id of this SpectatorV4CurrentGameInfo.  # noqa: E501
        :type: int
        """

        self._game_queue_config_id = game_queue_config_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpectatorV4CurrentGameInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpectatorV4CurrentGameInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
