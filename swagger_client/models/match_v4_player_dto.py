# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MatchV4PlayerDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_platform_id': 'str',
        'summoner_name': 'str',
        'match_history_uri': 'str',
        'platform_id': 'str',
        'current_account_id': 'str',
        'profile_icon': 'int',
        'summoner_id': 'str',
        'account_id': 'str'
    }

    attribute_map = {
        'current_platform_id': 'currentPlatformId',
        'summoner_name': 'summonerName',
        'match_history_uri': 'matchHistoryUri',
        'platform_id': 'platformId',
        'current_account_id': 'currentAccountId',
        'profile_icon': 'profileIcon',
        'summoner_id': 'summonerId',
        'account_id': 'accountId'
    }

    def __init__(self, current_platform_id=None, summoner_name=None, match_history_uri=None, platform_id=None, current_account_id=None, profile_icon=None, summoner_id=None, account_id=None):  # noqa: E501
        """MatchV4PlayerDto - a model defined in Swagger"""  # noqa: E501

        self._current_platform_id = None
        self._summoner_name = None
        self._match_history_uri = None
        self._platform_id = None
        self._current_account_id = None
        self._profile_icon = None
        self._summoner_id = None
        self._account_id = None
        self.discriminator = None

        if current_platform_id is not None:
            self.current_platform_id = current_platform_id
        if summoner_name is not None:
            self.summoner_name = summoner_name
        if match_history_uri is not None:
            self.match_history_uri = match_history_uri
        if platform_id is not None:
            self.platform_id = platform_id
        if current_account_id is not None:
            self.current_account_id = current_account_id
        if profile_icon is not None:
            self.profile_icon = profile_icon
        if summoner_id is not None:
            self.summoner_id = summoner_id
        if account_id is not None:
            self.account_id = account_id

    @property
    def current_platform_id(self):
        """Gets the current_platform_id of this MatchV4PlayerDto.  # noqa: E501


        :return: The current_platform_id of this MatchV4PlayerDto.  # noqa: E501
        :rtype: str
        """
        return self._current_platform_id

    @current_platform_id.setter
    def current_platform_id(self, current_platform_id):
        """Sets the current_platform_id of this MatchV4PlayerDto.


        :param current_platform_id: The current_platform_id of this MatchV4PlayerDto.  # noqa: E501
        :type: str
        """

        self._current_platform_id = current_platform_id

    @property
    def summoner_name(self):
        """Gets the summoner_name of this MatchV4PlayerDto.  # noqa: E501


        :return: The summoner_name of this MatchV4PlayerDto.  # noqa: E501
        :rtype: str
        """
        return self._summoner_name

    @summoner_name.setter
    def summoner_name(self, summoner_name):
        """Sets the summoner_name of this MatchV4PlayerDto.


        :param summoner_name: The summoner_name of this MatchV4PlayerDto.  # noqa: E501
        :type: str
        """

        self._summoner_name = summoner_name

    @property
    def match_history_uri(self):
        """Gets the match_history_uri of this MatchV4PlayerDto.  # noqa: E501


        :return: The match_history_uri of this MatchV4PlayerDto.  # noqa: E501
        :rtype: str
        """
        return self._match_history_uri

    @match_history_uri.setter
    def match_history_uri(self, match_history_uri):
        """Sets the match_history_uri of this MatchV4PlayerDto.


        :param match_history_uri: The match_history_uri of this MatchV4PlayerDto.  # noqa: E501
        :type: str
        """

        self._match_history_uri = match_history_uri

    @property
    def platform_id(self):
        """Gets the platform_id of this MatchV4PlayerDto.  # noqa: E501

        Original platformId.  # noqa: E501

        :return: The platform_id of this MatchV4PlayerDto.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this MatchV4PlayerDto.

        Original platformId.  # noqa: E501

        :param platform_id: The platform_id of this MatchV4PlayerDto.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    @property
    def current_account_id(self):
        """Gets the current_account_id of this MatchV4PlayerDto.  # noqa: E501

        Player's current accountId (Encrypted)  # noqa: E501

        :return: The current_account_id of this MatchV4PlayerDto.  # noqa: E501
        :rtype: str
        """
        return self._current_account_id

    @current_account_id.setter
    def current_account_id(self, current_account_id):
        """Sets the current_account_id of this MatchV4PlayerDto.

        Player's current accountId (Encrypted)  # noqa: E501

        :param current_account_id: The current_account_id of this MatchV4PlayerDto.  # noqa: E501
        :type: str
        """

        self._current_account_id = current_account_id

    @property
    def profile_icon(self):
        """Gets the profile_icon of this MatchV4PlayerDto.  # noqa: E501


        :return: The profile_icon of this MatchV4PlayerDto.  # noqa: E501
        :rtype: int
        """
        return self._profile_icon

    @profile_icon.setter
    def profile_icon(self, profile_icon):
        """Sets the profile_icon of this MatchV4PlayerDto.


        :param profile_icon: The profile_icon of this MatchV4PlayerDto.  # noqa: E501
        :type: int
        """

        self._profile_icon = profile_icon

    @property
    def summoner_id(self):
        """Gets the summoner_id of this MatchV4PlayerDto.  # noqa: E501

        Player's summonerId (Encrypted)  # noqa: E501

        :return: The summoner_id of this MatchV4PlayerDto.  # noqa: E501
        :rtype: str
        """
        return self._summoner_id

    @summoner_id.setter
    def summoner_id(self, summoner_id):
        """Sets the summoner_id of this MatchV4PlayerDto.

        Player's summonerId (Encrypted)  # noqa: E501

        :param summoner_id: The summoner_id of this MatchV4PlayerDto.  # noqa: E501
        :type: str
        """

        self._summoner_id = summoner_id

    @property
    def account_id(self):
        """Gets the account_id of this MatchV4PlayerDto.  # noqa: E501

        Player's original accountId (Encrypted)  # noqa: E501

        :return: The account_id of this MatchV4PlayerDto.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MatchV4PlayerDto.

        Player's original accountId (Encrypted)  # noqa: E501

        :param account_id: The account_id of this MatchV4PlayerDto.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchV4PlayerDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchV4PlayerDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
