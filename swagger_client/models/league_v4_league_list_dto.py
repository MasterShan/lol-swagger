# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.league_v4_league_item_dto import LeagueV4LeagueItemDTO  # noqa: F401,E501


class LeagueV4LeagueListDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'league_id': 'str',
        'tier': 'str',
        'entries': 'list[LeagueV4LeagueItemDTO]',
        'queue': 'str',
        'name': 'str'
    }

    attribute_map = {
        'league_id': 'leagueId',
        'tier': 'tier',
        'entries': 'entries',
        'queue': 'queue',
        'name': 'name'
    }

    def __init__(self, league_id=None, tier=None, entries=None, queue=None, name=None):  # noqa: E501
        """LeagueV4LeagueListDTO - a model defined in Swagger"""  # noqa: E501

        self._league_id = None
        self._tier = None
        self._entries = None
        self._queue = None
        self._name = None
        self.discriminator = None

        if league_id is not None:
            self.league_id = league_id
        if tier is not None:
            self.tier = tier
        if entries is not None:
            self.entries = entries
        if queue is not None:
            self.queue = queue
        if name is not None:
            self.name = name

    @property
    def league_id(self):
        """Gets the league_id of this LeagueV4LeagueListDTO.  # noqa: E501


        :return: The league_id of this LeagueV4LeagueListDTO.  # noqa: E501
        :rtype: str
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this LeagueV4LeagueListDTO.


        :param league_id: The league_id of this LeagueV4LeagueListDTO.  # noqa: E501
        :type: str
        """

        self._league_id = league_id

    @property
    def tier(self):
        """Gets the tier of this LeagueV4LeagueListDTO.  # noqa: E501


        :return: The tier of this LeagueV4LeagueListDTO.  # noqa: E501
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this LeagueV4LeagueListDTO.


        :param tier: The tier of this LeagueV4LeagueListDTO.  # noqa: E501
        :type: str
        """

        self._tier = tier

    @property
    def entries(self):
        """Gets the entries of this LeagueV4LeagueListDTO.  # noqa: E501


        :return: The entries of this LeagueV4LeagueListDTO.  # noqa: E501
        :rtype: list[LeagueV4LeagueItemDTO]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this LeagueV4LeagueListDTO.


        :param entries: The entries of this LeagueV4LeagueListDTO.  # noqa: E501
        :type: list[LeagueV4LeagueItemDTO]
        """

        self._entries = entries

    @property
    def queue(self):
        """Gets the queue of this LeagueV4LeagueListDTO.  # noqa: E501


        :return: The queue of this LeagueV4LeagueListDTO.  # noqa: E501
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this LeagueV4LeagueListDTO.


        :param queue: The queue of this LeagueV4LeagueListDTO.  # noqa: E501
        :type: str
        """

        self._queue = queue

    @property
    def name(self):
        """Gets the name of this LeagueV4LeagueListDTO.  # noqa: E501


        :return: The name of this LeagueV4LeagueListDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LeagueV4LeagueListDTO.


        :param name: The name of this LeagueV4LeagueListDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeagueV4LeagueListDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeagueV4LeagueListDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
