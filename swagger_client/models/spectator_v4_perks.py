# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpectatorV4Perks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'perk_style': 'int',
        'perk_ids': 'list[int]',
        'perk_sub_style': 'int'
    }

    attribute_map = {
        'perk_style': 'perkStyle',
        'perk_ids': 'perkIds',
        'perk_sub_style': 'perkSubStyle'
    }

    def __init__(self, perk_style=None, perk_ids=None, perk_sub_style=None):  # noqa: E501
        """SpectatorV4Perks - a model defined in Swagger"""  # noqa: E501

        self._perk_style = None
        self._perk_ids = None
        self._perk_sub_style = None
        self.discriminator = None

        if perk_style is not None:
            self.perk_style = perk_style
        if perk_ids is not None:
            self.perk_ids = perk_ids
        if perk_sub_style is not None:
            self.perk_sub_style = perk_sub_style

    @property
    def perk_style(self):
        """Gets the perk_style of this SpectatorV4Perks.  # noqa: E501

        Primary runes path  # noqa: E501

        :return: The perk_style of this SpectatorV4Perks.  # noqa: E501
        :rtype: int
        """
        return self._perk_style

    @perk_style.setter
    def perk_style(self, perk_style):
        """Sets the perk_style of this SpectatorV4Perks.

        Primary runes path  # noqa: E501

        :param perk_style: The perk_style of this SpectatorV4Perks.  # noqa: E501
        :type: int
        """

        self._perk_style = perk_style

    @property
    def perk_ids(self):
        """Gets the perk_ids of this SpectatorV4Perks.  # noqa: E501

        IDs of the perks/runes assigned.  # noqa: E501

        :return: The perk_ids of this SpectatorV4Perks.  # noqa: E501
        :rtype: list[int]
        """
        return self._perk_ids

    @perk_ids.setter
    def perk_ids(self, perk_ids):
        """Sets the perk_ids of this SpectatorV4Perks.

        IDs of the perks/runes assigned.  # noqa: E501

        :param perk_ids: The perk_ids of this SpectatorV4Perks.  # noqa: E501
        :type: list[int]
        """

        self._perk_ids = perk_ids

    @property
    def perk_sub_style(self):
        """Gets the perk_sub_style of this SpectatorV4Perks.  # noqa: E501

        Secondary runes path  # noqa: E501

        :return: The perk_sub_style of this SpectatorV4Perks.  # noqa: E501
        :rtype: int
        """
        return self._perk_sub_style

    @perk_sub_style.setter
    def perk_sub_style(self, perk_sub_style):
        """Sets the perk_sub_style of this SpectatorV4Perks.

        Secondary runes path  # noqa: E501

        :param perk_sub_style: The perk_sub_style of this SpectatorV4Perks.  # noqa: E501
        :type: int
        """

        self._perk_sub_style = perk_sub_style

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpectatorV4Perks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpectatorV4Perks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
