# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.spectator_v4_game_customization_object import SpectatorV4GameCustomizationObject  # noqa: F401,E501
from swagger_client.models.spectator_v4_perks import SpectatorV4Perks  # noqa: F401,E501


class SpectatorV4CurrentGameParticipant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_icon_id': 'int',
        'champion_id': 'int',
        'summoner_name': 'str',
        'game_customization_objects': 'list[SpectatorV4GameCustomizationObject]',
        'bot': 'bool',
        'perks': 'SpectatorV4Perks',
        'spell2_id': 'int',
        'team_id': 'int',
        'spell1_id': 'int',
        'summoner_id': 'str'
    }

    attribute_map = {
        'profile_icon_id': 'profileIconId',
        'champion_id': 'championId',
        'summoner_name': 'summonerName',
        'game_customization_objects': 'gameCustomizationObjects',
        'bot': 'bot',
        'perks': 'perks',
        'spell2_id': 'spell2Id',
        'team_id': 'teamId',
        'spell1_id': 'spell1Id',
        'summoner_id': 'summonerId'
    }

    def __init__(self, profile_icon_id=None, champion_id=None, summoner_name=None, game_customization_objects=None, bot=None, perks=None, spell2_id=None, team_id=None, spell1_id=None, summoner_id=None):  # noqa: E501
        """SpectatorV4CurrentGameParticipant - a model defined in Swagger"""  # noqa: E501

        self._profile_icon_id = None
        self._champion_id = None
        self._summoner_name = None
        self._game_customization_objects = None
        self._bot = None
        self._perks = None
        self._spell2_id = None
        self._team_id = None
        self._spell1_id = None
        self._summoner_id = None
        self.discriminator = None

        if profile_icon_id is not None:
            self.profile_icon_id = profile_icon_id
        if champion_id is not None:
            self.champion_id = champion_id
        if summoner_name is not None:
            self.summoner_name = summoner_name
        if game_customization_objects is not None:
            self.game_customization_objects = game_customization_objects
        if bot is not None:
            self.bot = bot
        if perks is not None:
            self.perks = perks
        if spell2_id is not None:
            self.spell2_id = spell2_id
        if team_id is not None:
            self.team_id = team_id
        if spell1_id is not None:
            self.spell1_id = spell1_id
        if summoner_id is not None:
            self.summoner_id = summoner_id

    @property
    def profile_icon_id(self):
        """Gets the profile_icon_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        The ID of the profile icon used by this participant  # noqa: E501

        :return: The profile_icon_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: int
        """
        return self._profile_icon_id

    @profile_icon_id.setter
    def profile_icon_id(self, profile_icon_id):
        """Sets the profile_icon_id of this SpectatorV4CurrentGameParticipant.

        The ID of the profile icon used by this participant  # noqa: E501

        :param profile_icon_id: The profile_icon_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: int
        """

        self._profile_icon_id = profile_icon_id

    @property
    def champion_id(self):
        """Gets the champion_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        The ID of the champion played by this participant  # noqa: E501

        :return: The champion_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: int
        """
        return self._champion_id

    @champion_id.setter
    def champion_id(self, champion_id):
        """Sets the champion_id of this SpectatorV4CurrentGameParticipant.

        The ID of the champion played by this participant  # noqa: E501

        :param champion_id: The champion_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: int
        """

        self._champion_id = champion_id

    @property
    def summoner_name(self):
        """Gets the summoner_name of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        The summoner name of this participant  # noqa: E501

        :return: The summoner_name of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: str
        """
        return self._summoner_name

    @summoner_name.setter
    def summoner_name(self, summoner_name):
        """Sets the summoner_name of this SpectatorV4CurrentGameParticipant.

        The summoner name of this participant  # noqa: E501

        :param summoner_name: The summoner_name of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: str
        """

        self._summoner_name = summoner_name

    @property
    def game_customization_objects(self):
        """Gets the game_customization_objects of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        List of Game Customizations  # noqa: E501

        :return: The game_customization_objects of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: list[SpectatorV4GameCustomizationObject]
        """
        return self._game_customization_objects

    @game_customization_objects.setter
    def game_customization_objects(self, game_customization_objects):
        """Sets the game_customization_objects of this SpectatorV4CurrentGameParticipant.

        List of Game Customizations  # noqa: E501

        :param game_customization_objects: The game_customization_objects of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: list[SpectatorV4GameCustomizationObject]
        """

        self._game_customization_objects = game_customization_objects

    @property
    def bot(self):
        """Gets the bot of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        Flag indicating whether or not this participant is a bot  # noqa: E501

        :return: The bot of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: bool
        """
        return self._bot

    @bot.setter
    def bot(self, bot):
        """Sets the bot of this SpectatorV4CurrentGameParticipant.

        Flag indicating whether or not this participant is a bot  # noqa: E501

        :param bot: The bot of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: bool
        """

        self._bot = bot

    @property
    def perks(self):
        """Gets the perks of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        Perks/Runes Reforged Information  # noqa: E501

        :return: The perks of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: SpectatorV4Perks
        """
        return self._perks

    @perks.setter
    def perks(self, perks):
        """Sets the perks of this SpectatorV4CurrentGameParticipant.

        Perks/Runes Reforged Information  # noqa: E501

        :param perks: The perks of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: SpectatorV4Perks
        """

        self._perks = perks

    @property
    def spell2_id(self):
        """Gets the spell2_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        The ID of the second summoner spell used by this participant  # noqa: E501

        :return: The spell2_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: int
        """
        return self._spell2_id

    @spell2_id.setter
    def spell2_id(self, spell2_id):
        """Sets the spell2_id of this SpectatorV4CurrentGameParticipant.

        The ID of the second summoner spell used by this participant  # noqa: E501

        :param spell2_id: The spell2_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: int
        """

        self._spell2_id = spell2_id

    @property
    def team_id(self):
        """Gets the team_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        The team ID of this participant, indicating the participant's team  # noqa: E501

        :return: The team_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this SpectatorV4CurrentGameParticipant.

        The team ID of this participant, indicating the participant's team  # noqa: E501

        :param team_id: The team_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def spell1_id(self):
        """Gets the spell1_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        The ID of the first summoner spell used by this participant  # noqa: E501

        :return: The spell1_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: int
        """
        return self._spell1_id

    @spell1_id.setter
    def spell1_id(self, spell1_id):
        """Sets the spell1_id of this SpectatorV4CurrentGameParticipant.

        The ID of the first summoner spell used by this participant  # noqa: E501

        :param spell1_id: The spell1_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: int
        """

        self._spell1_id = spell1_id

    @property
    def summoner_id(self):
        """Gets the summoner_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501

        The encrypted summoner ID of this participant  # noqa: E501

        :return: The summoner_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :rtype: str
        """
        return self._summoner_id

    @summoner_id.setter
    def summoner_id(self, summoner_id):
        """Sets the summoner_id of this SpectatorV4CurrentGameParticipant.

        The encrypted summoner ID of this participant  # noqa: E501

        :param summoner_id: The summoner_id of this SpectatorV4CurrentGameParticipant.  # noqa: E501
        :type: str
        """

        self._summoner_id = summoner_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpectatorV4CurrentGameParticipant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpectatorV4CurrentGameParticipant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
