# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.match_v4_match_event_dto import MatchV4MatchEventDto  # noqa: F401,E501
from swagger_client.models.match_v4_match_participant_frame_dto import MatchV4MatchParticipantFrameDto  # noqa: F401,E501


class MatchV4MatchFrameDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'int',
        'participant_frames': 'dict(str, MatchV4MatchParticipantFrameDto)',
        'events': 'list[MatchV4MatchEventDto]'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'participant_frames': 'participantFrames',
        'events': 'events'
    }

    def __init__(self, timestamp=None, participant_frames=None, events=None):  # noqa: E501
        """MatchV4MatchFrameDto - a model defined in Swagger"""  # noqa: E501

        self._timestamp = None
        self._participant_frames = None
        self._events = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if participant_frames is not None:
            self.participant_frames = participant_frames
        if events is not None:
            self.events = events

    @property
    def timestamp(self):
        """Gets the timestamp of this MatchV4MatchFrameDto.  # noqa: E501


        :return: The timestamp of this MatchV4MatchFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MatchV4MatchFrameDto.


        :param timestamp: The timestamp of this MatchV4MatchFrameDto.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def participant_frames(self):
        """Gets the participant_frames of this MatchV4MatchFrameDto.  # noqa: E501


        :return: The participant_frames of this MatchV4MatchFrameDto.  # noqa: E501
        :rtype: dict(str, MatchV4MatchParticipantFrameDto)
        """
        return self._participant_frames

    @participant_frames.setter
    def participant_frames(self, participant_frames):
        """Sets the participant_frames of this MatchV4MatchFrameDto.


        :param participant_frames: The participant_frames of this MatchV4MatchFrameDto.  # noqa: E501
        :type: dict(str, MatchV4MatchParticipantFrameDto)
        """

        self._participant_frames = participant_frames

    @property
    def events(self):
        """Gets the events of this MatchV4MatchFrameDto.  # noqa: E501


        :return: The events of this MatchV4MatchFrameDto.  # noqa: E501
        :rtype: list[MatchV4MatchEventDto]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this MatchV4MatchFrameDto.


        :param events: The events of this MatchV4MatchFrameDto.  # noqa: E501
        :type: list[MatchV4MatchEventDto]
        """

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchV4MatchFrameDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchV4MatchFrameDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
