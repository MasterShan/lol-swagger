# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.match_v4_match_position_dto import MatchV4MatchPositionDto  # noqa: F401,E501


class MatchV4MatchParticipantFrameDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_gold': 'int',
        'team_score': 'int',
        'participant_id': 'int',
        'level': 'int',
        'current_gold': 'int',
        'minions_killed': 'int',
        'dominion_score': 'int',
        'position': 'MatchV4MatchPositionDto',
        'xp': 'int',
        'jungle_minions_killed': 'int'
    }

    attribute_map = {
        'total_gold': 'totalGold',
        'team_score': 'teamScore',
        'participant_id': 'participantId',
        'level': 'level',
        'current_gold': 'currentGold',
        'minions_killed': 'minionsKilled',
        'dominion_score': 'dominionScore',
        'position': 'position',
        'xp': 'xp',
        'jungle_minions_killed': 'jungleMinionsKilled'
    }

    def __init__(self, total_gold=None, team_score=None, participant_id=None, level=None, current_gold=None, minions_killed=None, dominion_score=None, position=None, xp=None, jungle_minions_killed=None):  # noqa: E501
        """MatchV4MatchParticipantFrameDto - a model defined in Swagger"""  # noqa: E501

        self._total_gold = None
        self._team_score = None
        self._participant_id = None
        self._level = None
        self._current_gold = None
        self._minions_killed = None
        self._dominion_score = None
        self._position = None
        self._xp = None
        self._jungle_minions_killed = None
        self.discriminator = None

        if total_gold is not None:
            self.total_gold = total_gold
        if team_score is not None:
            self.team_score = team_score
        if participant_id is not None:
            self.participant_id = participant_id
        if level is not None:
            self.level = level
        if current_gold is not None:
            self.current_gold = current_gold
        if minions_killed is not None:
            self.minions_killed = minions_killed
        if dominion_score is not None:
            self.dominion_score = dominion_score
        if position is not None:
            self.position = position
        if xp is not None:
            self.xp = xp
        if jungle_minions_killed is not None:
            self.jungle_minions_killed = jungle_minions_killed

    @property
    def total_gold(self):
        """Gets the total_gold of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The total_gold of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._total_gold

    @total_gold.setter
    def total_gold(self, total_gold):
        """Sets the total_gold of this MatchV4MatchParticipantFrameDto.


        :param total_gold: The total_gold of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: int
        """

        self._total_gold = total_gold

    @property
    def team_score(self):
        """Gets the team_score of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The team_score of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._team_score

    @team_score.setter
    def team_score(self, team_score):
        """Sets the team_score of this MatchV4MatchParticipantFrameDto.


        :param team_score: The team_score of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: int
        """

        self._team_score = team_score

    @property
    def participant_id(self):
        """Gets the participant_id of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The participant_id of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """Sets the participant_id of this MatchV4MatchParticipantFrameDto.


        :param participant_id: The participant_id of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: int
        """

        self._participant_id = participant_id

    @property
    def level(self):
        """Gets the level of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The level of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this MatchV4MatchParticipantFrameDto.


        :param level: The level of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def current_gold(self):
        """Gets the current_gold of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The current_gold of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._current_gold

    @current_gold.setter
    def current_gold(self, current_gold):
        """Sets the current_gold of this MatchV4MatchParticipantFrameDto.


        :param current_gold: The current_gold of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: int
        """

        self._current_gold = current_gold

    @property
    def minions_killed(self):
        """Gets the minions_killed of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The minions_killed of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._minions_killed

    @minions_killed.setter
    def minions_killed(self, minions_killed):
        """Sets the minions_killed of this MatchV4MatchParticipantFrameDto.


        :param minions_killed: The minions_killed of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: int
        """

        self._minions_killed = minions_killed

    @property
    def dominion_score(self):
        """Gets the dominion_score of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The dominion_score of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._dominion_score

    @dominion_score.setter
    def dominion_score(self, dominion_score):
        """Sets the dominion_score of this MatchV4MatchParticipantFrameDto.


        :param dominion_score: The dominion_score of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: int
        """

        self._dominion_score = dominion_score

    @property
    def position(self):
        """Gets the position of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The position of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: MatchV4MatchPositionDto
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this MatchV4MatchParticipantFrameDto.


        :param position: The position of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: MatchV4MatchPositionDto
        """

        self._position = position

    @property
    def xp(self):
        """Gets the xp of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The xp of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """Sets the xp of this MatchV4MatchParticipantFrameDto.


        :param xp: The xp of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: int
        """

        self._xp = xp

    @property
    def jungle_minions_killed(self):
        """Gets the jungle_minions_killed of this MatchV4MatchParticipantFrameDto.  # noqa: E501


        :return: The jungle_minions_killed of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :rtype: int
        """
        return self._jungle_minions_killed

    @jungle_minions_killed.setter
    def jungle_minions_killed(self, jungle_minions_killed):
        """Sets the jungle_minions_killed of this MatchV4MatchParticipantFrameDto.


        :param jungle_minions_killed: The jungle_minions_killed of this MatchV4MatchParticipantFrameDto.  # noqa: E501
        :type: int
        """

        self._jungle_minions_killed = jungle_minions_killed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchV4MatchParticipantFrameDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchV4MatchParticipantFrameDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
