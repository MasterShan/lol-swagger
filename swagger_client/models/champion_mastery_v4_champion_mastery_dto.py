# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChampionMasteryV4ChampionMasteryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chest_granted': 'bool',
        'champion_level': 'int',
        'champion_points': 'int',
        'champion_id': 'int',
        'champion_points_until_next_level': 'int',
        'last_play_time': 'int',
        'tokens_earned': 'int',
        'champion_points_since_last_level': 'int',
        'summoner_id': 'str'
    }

    attribute_map = {
        'chest_granted': 'chestGranted',
        'champion_level': 'championLevel',
        'champion_points': 'championPoints',
        'champion_id': 'championId',
        'champion_points_until_next_level': 'championPointsUntilNextLevel',
        'last_play_time': 'lastPlayTime',
        'tokens_earned': 'tokensEarned',
        'champion_points_since_last_level': 'championPointsSinceLastLevel',
        'summoner_id': 'summonerId'
    }

    def __init__(self, chest_granted=None, champion_level=None, champion_points=None, champion_id=None, champion_points_until_next_level=None, last_play_time=None, tokens_earned=None, champion_points_since_last_level=None, summoner_id=None):  # noqa: E501
        """ChampionMasteryV4ChampionMasteryDTO - a model defined in Swagger"""  # noqa: E501

        self._chest_granted = None
        self._champion_level = None
        self._champion_points = None
        self._champion_id = None
        self._champion_points_until_next_level = None
        self._last_play_time = None
        self._tokens_earned = None
        self._champion_points_since_last_level = None
        self._summoner_id = None
        self.discriminator = None

        if chest_granted is not None:
            self.chest_granted = chest_granted
        if champion_level is not None:
            self.champion_level = champion_level
        if champion_points is not None:
            self.champion_points = champion_points
        if champion_id is not None:
            self.champion_id = champion_id
        if champion_points_until_next_level is not None:
            self.champion_points_until_next_level = champion_points_until_next_level
        if last_play_time is not None:
            self.last_play_time = last_play_time
        if tokens_earned is not None:
            self.tokens_earned = tokens_earned
        if champion_points_since_last_level is not None:
            self.champion_points_since_last_level = champion_points_since_last_level
        if summoner_id is not None:
            self.summoner_id = summoner_id

    @property
    def chest_granted(self):
        """Gets the chest_granted of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501

        Is chest granted for this champion or not in current season.  # noqa: E501

        :return: The chest_granted of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._chest_granted

    @chest_granted.setter
    def chest_granted(self, chest_granted):
        """Sets the chest_granted of this ChampionMasteryV4ChampionMasteryDTO.

        Is chest granted for this champion or not in current season.  # noqa: E501

        :param chest_granted: The chest_granted of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :type: bool
        """

        self._chest_granted = chest_granted

    @property
    def champion_level(self):
        """Gets the champion_level of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501

        Champion level for specified player and champion combination.  # noqa: E501

        :return: The champion_level of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :rtype: int
        """
        return self._champion_level

    @champion_level.setter
    def champion_level(self, champion_level):
        """Sets the champion_level of this ChampionMasteryV4ChampionMasteryDTO.

        Champion level for specified player and champion combination.  # noqa: E501

        :param champion_level: The champion_level of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :type: int
        """

        self._champion_level = champion_level

    @property
    def champion_points(self):
        """Gets the champion_points of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501

        Total number of champion points for this player and champion combination - they are used to determine championLevel.  # noqa: E501

        :return: The champion_points of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :rtype: int
        """
        return self._champion_points

    @champion_points.setter
    def champion_points(self, champion_points):
        """Sets the champion_points of this ChampionMasteryV4ChampionMasteryDTO.

        Total number of champion points for this player and champion combination - they are used to determine championLevel.  # noqa: E501

        :param champion_points: The champion_points of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :type: int
        """

        self._champion_points = champion_points

    @property
    def champion_id(self):
        """Gets the champion_id of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501

        Champion ID for this entry.  # noqa: E501

        :return: The champion_id of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :rtype: int
        """
        return self._champion_id

    @champion_id.setter
    def champion_id(self, champion_id):
        """Sets the champion_id of this ChampionMasteryV4ChampionMasteryDTO.

        Champion ID for this entry.  # noqa: E501

        :param champion_id: The champion_id of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :type: int
        """

        self._champion_id = champion_id

    @property
    def champion_points_until_next_level(self):
        """Gets the champion_points_until_next_level of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501

        Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.  # noqa: E501

        :return: The champion_points_until_next_level of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :rtype: int
        """
        return self._champion_points_until_next_level

    @champion_points_until_next_level.setter
    def champion_points_until_next_level(self, champion_points_until_next_level):
        """Sets the champion_points_until_next_level of this ChampionMasteryV4ChampionMasteryDTO.

        Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.  # noqa: E501

        :param champion_points_until_next_level: The champion_points_until_next_level of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :type: int
        """

        self._champion_points_until_next_level = champion_points_until_next_level

    @property
    def last_play_time(self):
        """Gets the last_play_time of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501

        Last time this champion was played by this player - in Unix milliseconds time format.  # noqa: E501

        :return: The last_play_time of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :rtype: int
        """
        return self._last_play_time

    @last_play_time.setter
    def last_play_time(self, last_play_time):
        """Sets the last_play_time of this ChampionMasteryV4ChampionMasteryDTO.

        Last time this champion was played by this player - in Unix milliseconds time format.  # noqa: E501

        :param last_play_time: The last_play_time of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :type: int
        """

        self._last_play_time = last_play_time

    @property
    def tokens_earned(self):
        """Gets the tokens_earned of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501

        The token earned for this champion to levelup.  # noqa: E501

        :return: The tokens_earned of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :rtype: int
        """
        return self._tokens_earned

    @tokens_earned.setter
    def tokens_earned(self, tokens_earned):
        """Sets the tokens_earned of this ChampionMasteryV4ChampionMasteryDTO.

        The token earned for this champion to levelup.  # noqa: E501

        :param tokens_earned: The tokens_earned of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :type: int
        """

        self._tokens_earned = tokens_earned

    @property
    def champion_points_since_last_level(self):
        """Gets the champion_points_since_last_level of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501

        Number of points earned since current level has been achieved.  # noqa: E501

        :return: The champion_points_since_last_level of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :rtype: int
        """
        return self._champion_points_since_last_level

    @champion_points_since_last_level.setter
    def champion_points_since_last_level(self, champion_points_since_last_level):
        """Sets the champion_points_since_last_level of this ChampionMasteryV4ChampionMasteryDTO.

        Number of points earned since current level has been achieved.  # noqa: E501

        :param champion_points_since_last_level: The champion_points_since_last_level of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :type: int
        """

        self._champion_points_since_last_level = champion_points_since_last_level

    @property
    def summoner_id(self):
        """Gets the summoner_id of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501

        Summoner ID for this entry. (Encrypted)  # noqa: E501

        :return: The summoner_id of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :rtype: str
        """
        return self._summoner_id

    @summoner_id.setter
    def summoner_id(self, summoner_id):
        """Sets the summoner_id of this ChampionMasteryV4ChampionMasteryDTO.

        Summoner ID for this entry. (Encrypted)  # noqa: E501

        :param summoner_id: The summoner_id of this ChampionMasteryV4ChampionMasteryDTO.  # noqa: E501
        :type: str
        """

        self._summoner_id = summoner_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChampionMasteryV4ChampionMasteryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChampionMasteryV4ChampionMasteryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
