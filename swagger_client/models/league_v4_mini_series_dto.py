# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LeagueV4MiniSeriesDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'progress': 'str',
        'losses': 'int',
        'target': 'int',
        'wins': 'int'
    }

    attribute_map = {
        'progress': 'progress',
        'losses': 'losses',
        'target': 'target',
        'wins': 'wins'
    }

    def __init__(self, progress=None, losses=None, target=None, wins=None):  # noqa: E501
        """LeagueV4MiniSeriesDTO - a model defined in Swagger"""  # noqa: E501

        self._progress = None
        self._losses = None
        self._target = None
        self._wins = None
        self.discriminator = None

        if progress is not None:
            self.progress = progress
        if losses is not None:
            self.losses = losses
        if target is not None:
            self.target = target
        if wins is not None:
            self.wins = wins

    @property
    def progress(self):
        """Gets the progress of this LeagueV4MiniSeriesDTO.  # noqa: E501


        :return: The progress of this LeagueV4MiniSeriesDTO.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this LeagueV4MiniSeriesDTO.


        :param progress: The progress of this LeagueV4MiniSeriesDTO.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def losses(self):
        """Gets the losses of this LeagueV4MiniSeriesDTO.  # noqa: E501


        :return: The losses of this LeagueV4MiniSeriesDTO.  # noqa: E501
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this LeagueV4MiniSeriesDTO.


        :param losses: The losses of this LeagueV4MiniSeriesDTO.  # noqa: E501
        :type: int
        """

        self._losses = losses

    @property
    def target(self):
        """Gets the target of this LeagueV4MiniSeriesDTO.  # noqa: E501


        :return: The target of this LeagueV4MiniSeriesDTO.  # noqa: E501
        :rtype: int
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this LeagueV4MiniSeriesDTO.


        :param target: The target of this LeagueV4MiniSeriesDTO.  # noqa: E501
        :type: int
        """

        self._target = target

    @property
    def wins(self):
        """Gets the wins of this LeagueV4MiniSeriesDTO.  # noqa: E501


        :return: The wins of this LeagueV4MiniSeriesDTO.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this LeagueV4MiniSeriesDTO.


        :param wins: The wins of this LeagueV4MiniSeriesDTO.  # noqa: E501
        :type: int
        """

        self._wins = wins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeagueV4MiniSeriesDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeagueV4MiniSeriesDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
