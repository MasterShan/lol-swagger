# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.match_v4_match_reference_dto import MatchV4MatchReferenceDto  # noqa: F401,E501


class MatchV4MatchlistDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'matches': 'list[MatchV4MatchReferenceDto]',
        'total_games': 'int',
        'start_index': 'int',
        'end_index': 'int'
    }

    attribute_map = {
        'matches': 'matches',
        'total_games': 'totalGames',
        'start_index': 'startIndex',
        'end_index': 'endIndex'
    }

    def __init__(self, matches=None, total_games=None, start_index=None, end_index=None):  # noqa: E501
        """MatchV4MatchlistDto - a model defined in Swagger"""  # noqa: E501

        self._matches = None
        self._total_games = None
        self._start_index = None
        self._end_index = None
        self.discriminator = None

        if matches is not None:
            self.matches = matches
        if total_games is not None:
            self.total_games = total_games
        if start_index is not None:
            self.start_index = start_index
        if end_index is not None:
            self.end_index = end_index

    @property
    def matches(self):
        """Gets the matches of this MatchV4MatchlistDto.  # noqa: E501


        :return: The matches of this MatchV4MatchlistDto.  # noqa: E501
        :rtype: list[MatchV4MatchReferenceDto]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this MatchV4MatchlistDto.


        :param matches: The matches of this MatchV4MatchlistDto.  # noqa: E501
        :type: list[MatchV4MatchReferenceDto]
        """

        self._matches = matches

    @property
    def total_games(self):
        """Gets the total_games of this MatchV4MatchlistDto.  # noqa: E501


        :return: The total_games of this MatchV4MatchlistDto.  # noqa: E501
        :rtype: int
        """
        return self._total_games

    @total_games.setter
    def total_games(self, total_games):
        """Sets the total_games of this MatchV4MatchlistDto.


        :param total_games: The total_games of this MatchV4MatchlistDto.  # noqa: E501
        :type: int
        """

        self._total_games = total_games

    @property
    def start_index(self):
        """Gets the start_index of this MatchV4MatchlistDto.  # noqa: E501


        :return: The start_index of this MatchV4MatchlistDto.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this MatchV4MatchlistDto.


        :param start_index: The start_index of this MatchV4MatchlistDto.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    @property
    def end_index(self):
        """Gets the end_index of this MatchV4MatchlistDto.  # noqa: E501


        :return: The end_index of this MatchV4MatchlistDto.  # noqa: E501
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this MatchV4MatchlistDto.


        :param end_index: The end_index of this MatchV4MatchlistDto.  # noqa: E501
        :type: int
        """

        self._end_index = end_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchV4MatchlistDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchV4MatchlistDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
