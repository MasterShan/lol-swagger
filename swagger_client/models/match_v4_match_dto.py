# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.match_v4_participant_dto import MatchV4ParticipantDto  # noqa: F401,E501
from swagger_client.models.match_v4_participant_identity_dto import MatchV4ParticipantIdentityDto  # noqa: F401,E501
from swagger_client.models.match_v4_team_stats_dto import MatchV4TeamStatsDto  # noqa: F401,E501


class MatchV4MatchDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'season_id': 'int',
        'queue_id': 'int',
        'game_id': 'int',
        'participant_identities': 'list[MatchV4ParticipantIdentityDto]',
        'game_version': 'str',
        'platform_id': 'str',
        'game_mode': 'str',
        'map_id': 'int',
        'game_type': 'str',
        'teams': 'list[MatchV4TeamStatsDto]',
        'participants': 'list[MatchV4ParticipantDto]',
        'game_duration': 'int',
        'game_creation': 'int'
    }

    attribute_map = {
        'season_id': 'seasonId',
        'queue_id': 'queueId',
        'game_id': 'gameId',
        'participant_identities': 'participantIdentities',
        'game_version': 'gameVersion',
        'platform_id': 'platformId',
        'game_mode': 'gameMode',
        'map_id': 'mapId',
        'game_type': 'gameType',
        'teams': 'teams',
        'participants': 'participants',
        'game_duration': 'gameDuration',
        'game_creation': 'gameCreation'
    }

    def __init__(self, season_id=None, queue_id=None, game_id=None, participant_identities=None, game_version=None, platform_id=None, game_mode=None, map_id=None, game_type=None, teams=None, participants=None, game_duration=None, game_creation=None):  # noqa: E501
        """MatchV4MatchDto - a model defined in Swagger"""  # noqa: E501

        self._season_id = None
        self._queue_id = None
        self._game_id = None
        self._participant_identities = None
        self._game_version = None
        self._platform_id = None
        self._game_mode = None
        self._map_id = None
        self._game_type = None
        self._teams = None
        self._participants = None
        self._game_duration = None
        self._game_creation = None
        self.discriminator = None

        if season_id is not None:
            self.season_id = season_id
        if queue_id is not None:
            self.queue_id = queue_id
        if game_id is not None:
            self.game_id = game_id
        if participant_identities is not None:
            self.participant_identities = participant_identities
        if game_version is not None:
            self.game_version = game_version
        if platform_id is not None:
            self.platform_id = platform_id
        if game_mode is not None:
            self.game_mode = game_mode
        if map_id is not None:
            self.map_id = map_id
        if game_type is not None:
            self.game_type = game_type
        if teams is not None:
            self.teams = teams
        if participants is not None:
            self.participants = participants
        if game_duration is not None:
            self.game_duration = game_duration
        if game_creation is not None:
            self.game_creation = game_creation

    @property
    def season_id(self):
        """Gets the season_id of this MatchV4MatchDto.  # noqa: E501

        Please refer to the Game Constants documentation.  # noqa: E501

        :return: The season_id of this MatchV4MatchDto.  # noqa: E501
        :rtype: int
        """
        return self._season_id

    @season_id.setter
    def season_id(self, season_id):
        """Sets the season_id of this MatchV4MatchDto.

        Please refer to the Game Constants documentation.  # noqa: E501

        :param season_id: The season_id of this MatchV4MatchDto.  # noqa: E501
        :type: int
        """

        self._season_id = season_id

    @property
    def queue_id(self):
        """Gets the queue_id of this MatchV4MatchDto.  # noqa: E501

        Please refer to the Game Constants documentation.  # noqa: E501

        :return: The queue_id of this MatchV4MatchDto.  # noqa: E501
        :rtype: int
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this MatchV4MatchDto.

        Please refer to the Game Constants documentation.  # noqa: E501

        :param queue_id: The queue_id of this MatchV4MatchDto.  # noqa: E501
        :type: int
        """

        self._queue_id = queue_id

    @property
    def game_id(self):
        """Gets the game_id of this MatchV4MatchDto.  # noqa: E501


        :return: The game_id of this MatchV4MatchDto.  # noqa: E501
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this MatchV4MatchDto.


        :param game_id: The game_id of this MatchV4MatchDto.  # noqa: E501
        :type: int
        """

        self._game_id = game_id

    @property
    def participant_identities(self):
        """Gets the participant_identities of this MatchV4MatchDto.  # noqa: E501

        Participant identity information.  # noqa: E501

        :return: The participant_identities of this MatchV4MatchDto.  # noqa: E501
        :rtype: list[MatchV4ParticipantIdentityDto]
        """
        return self._participant_identities

    @participant_identities.setter
    def participant_identities(self, participant_identities):
        """Sets the participant_identities of this MatchV4MatchDto.

        Participant identity information.  # noqa: E501

        :param participant_identities: The participant_identities of this MatchV4MatchDto.  # noqa: E501
        :type: list[MatchV4ParticipantIdentityDto]
        """

        self._participant_identities = participant_identities

    @property
    def game_version(self):
        """Gets the game_version of this MatchV4MatchDto.  # noqa: E501

        The major.minor version typically indicates the patch the match was played on.  # noqa: E501

        :return: The game_version of this MatchV4MatchDto.  # noqa: E501
        :rtype: str
        """
        return self._game_version

    @game_version.setter
    def game_version(self, game_version):
        """Sets the game_version of this MatchV4MatchDto.

        The major.minor version typically indicates the patch the match was played on.  # noqa: E501

        :param game_version: The game_version of this MatchV4MatchDto.  # noqa: E501
        :type: str
        """

        self._game_version = game_version

    @property
    def platform_id(self):
        """Gets the platform_id of this MatchV4MatchDto.  # noqa: E501

        Platform where the match was played.  # noqa: E501

        :return: The platform_id of this MatchV4MatchDto.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this MatchV4MatchDto.

        Platform where the match was played.  # noqa: E501

        :param platform_id: The platform_id of this MatchV4MatchDto.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    @property
    def game_mode(self):
        """Gets the game_mode of this MatchV4MatchDto.  # noqa: E501

        Please refer to the Game Constants documentation.  # noqa: E501

        :return: The game_mode of this MatchV4MatchDto.  # noqa: E501
        :rtype: str
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """Sets the game_mode of this MatchV4MatchDto.

        Please refer to the Game Constants documentation.  # noqa: E501

        :param game_mode: The game_mode of this MatchV4MatchDto.  # noqa: E501
        :type: str
        """

        self._game_mode = game_mode

    @property
    def map_id(self):
        """Gets the map_id of this MatchV4MatchDto.  # noqa: E501

        Please refer to the Game Constants documentation.  # noqa: E501

        :return: The map_id of this MatchV4MatchDto.  # noqa: E501
        :rtype: int
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this MatchV4MatchDto.

        Please refer to the Game Constants documentation.  # noqa: E501

        :param map_id: The map_id of this MatchV4MatchDto.  # noqa: E501
        :type: int
        """

        self._map_id = map_id

    @property
    def game_type(self):
        """Gets the game_type of this MatchV4MatchDto.  # noqa: E501

        Please refer to the Game Constants documentation.  # noqa: E501

        :return: The game_type of this MatchV4MatchDto.  # noqa: E501
        :rtype: str
        """
        return self._game_type

    @game_type.setter
    def game_type(self, game_type):
        """Sets the game_type of this MatchV4MatchDto.

        Please refer to the Game Constants documentation.  # noqa: E501

        :param game_type: The game_type of this MatchV4MatchDto.  # noqa: E501
        :type: str
        """

        self._game_type = game_type

    @property
    def teams(self):
        """Gets the teams of this MatchV4MatchDto.  # noqa: E501

        Team information.  # noqa: E501

        :return: The teams of this MatchV4MatchDto.  # noqa: E501
        :rtype: list[MatchV4TeamStatsDto]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this MatchV4MatchDto.

        Team information.  # noqa: E501

        :param teams: The teams of this MatchV4MatchDto.  # noqa: E501
        :type: list[MatchV4TeamStatsDto]
        """

        self._teams = teams

    @property
    def participants(self):
        """Gets the participants of this MatchV4MatchDto.  # noqa: E501

        Participant information.  # noqa: E501

        :return: The participants of this MatchV4MatchDto.  # noqa: E501
        :rtype: list[MatchV4ParticipantDto]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this MatchV4MatchDto.

        Participant information.  # noqa: E501

        :param participants: The participants of this MatchV4MatchDto.  # noqa: E501
        :type: list[MatchV4ParticipantDto]
        """

        self._participants = participants

    @property
    def game_duration(self):
        """Gets the game_duration of this MatchV4MatchDto.  # noqa: E501

        Match duration in seconds.  # noqa: E501

        :return: The game_duration of this MatchV4MatchDto.  # noqa: E501
        :rtype: int
        """
        return self._game_duration

    @game_duration.setter
    def game_duration(self, game_duration):
        """Sets the game_duration of this MatchV4MatchDto.

        Match duration in seconds.  # noqa: E501

        :param game_duration: The game_duration of this MatchV4MatchDto.  # noqa: E501
        :type: int
        """

        self._game_duration = game_duration

    @property
    def game_creation(self):
        """Gets the game_creation of this MatchV4MatchDto.  # noqa: E501

        Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00.  # noqa: E501

        :return: The game_creation of this MatchV4MatchDto.  # noqa: E501
        :rtype: int
        """
        return self._game_creation

    @game_creation.setter
    def game_creation(self, game_creation):
        """Sets the game_creation of this MatchV4MatchDto.

        Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00.  # noqa: E501

        :param game_creation: The game_creation of this MatchV4MatchDto.  # noqa: E501
        :type: int
        """

        self._game_creation = game_creation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchV4MatchDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchV4MatchDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
