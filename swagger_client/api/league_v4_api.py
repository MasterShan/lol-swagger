# coding: utf-8

"""
    Riot API

     OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***   # noqa: E501

    OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LeagueV4Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def league_v4_get_challenger_league(self, queue, **kwargs):  # noqa: E501
        """Get the challenger league for given queue.  # noqa: E501

        Get the challenger league for given queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_challenger_league(queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue:  (required)
        :return: LeagueV4LeagueListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league_v4_get_challenger_league_with_http_info(queue, **kwargs)  # noqa: E501
        else:
            (data) = self.league_v4_get_challenger_league_with_http_info(queue, **kwargs)  # noqa: E501
            return data

    def league_v4_get_challenger_league_with_http_info(self, queue, **kwargs):  # noqa: E501
        """Get the challenger league for given queue.  # noqa: E501

        Get the challenger league for given queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_challenger_league_with_http_info(queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue:  (required)
        :return: LeagueV4LeagueListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league_v4_get_challenger_league" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue' is set
        if ('queue' not in params or
                params['queue'] is None):
            raise ValueError("Missing the required parameter `queue` when calling `league_v4_get_challenger_league`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue' in params:
            path_params['queue'] = params['queue']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Riot-Token', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/lol/league/v4/challengerleagues/by-queue/{queue}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeagueV4LeagueListDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def league_v4_get_grandmaster_league(self, queue, **kwargs):  # noqa: E501
        """Get the grandmaster league of a specific queue.  # noqa: E501

        Get the grandmaster league of a specific queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_grandmaster_league(queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue:  (required)
        :return: LeagueV4LeagueListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league_v4_get_grandmaster_league_with_http_info(queue, **kwargs)  # noqa: E501
        else:
            (data) = self.league_v4_get_grandmaster_league_with_http_info(queue, **kwargs)  # noqa: E501
            return data

    def league_v4_get_grandmaster_league_with_http_info(self, queue, **kwargs):  # noqa: E501
        """Get the grandmaster league of a specific queue.  # noqa: E501

        Get the grandmaster league of a specific queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_grandmaster_league_with_http_info(queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue:  (required)
        :return: LeagueV4LeagueListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league_v4_get_grandmaster_league" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue' is set
        if ('queue' not in params or
                params['queue'] is None):
            raise ValueError("Missing the required parameter `queue` when calling `league_v4_get_grandmaster_league`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue' in params:
            path_params['queue'] = params['queue']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Riot-Token', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/lol/league/v4/grandmasterleagues/by-queue/{queue}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeagueV4LeagueListDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def league_v4_get_league_by_id(self, league_id, **kwargs):  # noqa: E501
        """Get league with given ID, including inactive entries.  # noqa: E501

        Get league with given ID, including inactive entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_league_by_id(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: The UUID of the league. (required)
        :return: LeagueV4LeagueListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league_v4_get_league_by_id_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.league_v4_get_league_by_id_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def league_v4_get_league_by_id_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """Get league with given ID, including inactive entries.  # noqa: E501

        Get league with given ID, including inactive entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_league_by_id_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_id: The UUID of the league. (required)
        :return: LeagueV4LeagueListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league_v4_get_league_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `league_v4_get_league_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Riot-Token', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/lol/league/v4/leagues/{leagueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeagueV4LeagueListDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def league_v4_get_league_entries(self, division, tier, queue, **kwargs):  # noqa: E501
        """Get all the league entries.  # noqa: E501

        Get all the league entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_league_entries(division, tier, queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str division:  (required)
        :param str tier:  (required)
        :param str queue: Note that the queue value must be a valid ranked queue. (required)
        :param int page: Starts with page 1.
        :return: list[LeagueV4LeagueEntryDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league_v4_get_league_entries_with_http_info(division, tier, queue, **kwargs)  # noqa: E501
        else:
            (data) = self.league_v4_get_league_entries_with_http_info(division, tier, queue, **kwargs)  # noqa: E501
            return data

    def league_v4_get_league_entries_with_http_info(self, division, tier, queue, **kwargs):  # noqa: E501
        """Get all the league entries.  # noqa: E501

        Get all the league entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_league_entries_with_http_info(division, tier, queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str division:  (required)
        :param str tier:  (required)
        :param str queue: Note that the queue value must be a valid ranked queue. (required)
        :param int page: Starts with page 1.
        :return: list[LeagueV4LeagueEntryDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['division', 'tier', 'queue', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league_v4_get_league_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'division' is set
        if ('division' not in params or
                params['division'] is None):
            raise ValueError("Missing the required parameter `division` when calling `league_v4_get_league_entries`")  # noqa: E501
        # verify the required parameter 'tier' is set
        if ('tier' not in params or
                params['tier'] is None):
            raise ValueError("Missing the required parameter `tier` when calling `league_v4_get_league_entries`")  # noqa: E501
        # verify the required parameter 'queue' is set
        if ('queue' not in params or
                params['queue'] is None):
            raise ValueError("Missing the required parameter `queue` when calling `league_v4_get_league_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'division' in params:
            path_params['division'] = params['division']  # noqa: E501
        if 'tier' in params:
            path_params['tier'] = params['tier']  # noqa: E501
        if 'queue' in params:
            path_params['queue'] = params['queue']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Riot-Token', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/lol/league/v4/entries/{queue}/{tier}/{division}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LeagueV4LeagueEntryDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def league_v4_get_league_entries_for_summoner(self, encrypted_summoner_id, **kwargs):  # noqa: E501
        """Get league entries in all queues for a given summoner ID.  # noqa: E501

        Get league entries in all queues for a given summoner ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_league_entries_for_summoner(encrypted_summoner_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str encrypted_summoner_id:  (required)
        :return: list[LeagueV4LeagueEntryDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league_v4_get_league_entries_for_summoner_with_http_info(encrypted_summoner_id, **kwargs)  # noqa: E501
        else:
            (data) = self.league_v4_get_league_entries_for_summoner_with_http_info(encrypted_summoner_id, **kwargs)  # noqa: E501
            return data

    def league_v4_get_league_entries_for_summoner_with_http_info(self, encrypted_summoner_id, **kwargs):  # noqa: E501
        """Get league entries in all queues for a given summoner ID.  # noqa: E501

        Get league entries in all queues for a given summoner ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_league_entries_for_summoner_with_http_info(encrypted_summoner_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str encrypted_summoner_id:  (required)
        :return: list[LeagueV4LeagueEntryDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['encrypted_summoner_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league_v4_get_league_entries_for_summoner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'encrypted_summoner_id' is set
        if ('encrypted_summoner_id' not in params or
                params['encrypted_summoner_id'] is None):
            raise ValueError("Missing the required parameter `encrypted_summoner_id` when calling `league_v4_get_league_entries_for_summoner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'encrypted_summoner_id' in params:
            path_params['encryptedSummonerId'] = params['encrypted_summoner_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Riot-Token', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/lol/league/v4/entries/by-summoner/{encryptedSummonerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LeagueV4LeagueEntryDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def league_v4_get_master_league(self, queue, **kwargs):  # noqa: E501
        """Get the master league for given queue.  # noqa: E501

        Get the master league for given queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_master_league(queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue:  (required)
        :return: LeagueV4LeagueListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.league_v4_get_master_league_with_http_info(queue, **kwargs)  # noqa: E501
        else:
            (data) = self.league_v4_get_master_league_with_http_info(queue, **kwargs)  # noqa: E501
            return data

    def league_v4_get_master_league_with_http_info(self, queue, **kwargs):  # noqa: E501
        """Get the master league for given queue.  # noqa: E501

        Get the master league for given queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.league_v4_get_master_league_with_http_info(queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue:  (required)
        :return: LeagueV4LeagueListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method league_v4_get_master_league" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue' is set
        if ('queue' not in params or
                params['queue'] is None):
            raise ValueError("Missing the required parameter `queue` when calling `league_v4_get_master_league`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue' in params:
            path_params['queue'] = params['queue']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Riot-Token', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/lol/league/v4/masterleagues/by-queue/{queue}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeagueV4LeagueListDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
