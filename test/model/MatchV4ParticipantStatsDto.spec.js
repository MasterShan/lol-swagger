/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RiotApi);
  }
}(this, function(expect, RiotApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RiotApi.MatchV4ParticipantStatsDto();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MatchV4ParticipantStatsDto', function() {
    it('should create an instance of MatchV4ParticipantStatsDto', function() {
      // uncomment below and update the code to test MatchV4ParticipantStatsDto
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be.a(RiotApi.MatchV4ParticipantStatsDto);
    });

    it('should have the property firstBloodAssist (base name: "firstBloodAssist")', function() {
      // uncomment below and update the code to test the property firstBloodAssist
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property visionScore (base name: "visionScore")', function() {
      // uncomment below and update the code to test the property visionScore
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property magicDamageDealtToChampions (base name: "magicDamageDealtToChampions")', function() {
      // uncomment below and update the code to test the property magicDamageDealtToChampions
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property damageDealtToObjectives (base name: "damageDealtToObjectives")', function() {
      // uncomment below and update the code to test the property damageDealtToObjectives
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property totalTimeCrowdControlDealt (base name: "totalTimeCrowdControlDealt")', function() {
      // uncomment below and update the code to test the property totalTimeCrowdControlDealt
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property longestTimeSpentLiving (base name: "longestTimeSpentLiving")', function() {
      // uncomment below and update the code to test the property longestTimeSpentLiving
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk1Var1 (base name: "perk1Var1")', function() {
      // uncomment below and update the code to test the property perk1Var1
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk1Var3 (base name: "perk1Var3")', function() {
      // uncomment below and update the code to test the property perk1Var3
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk1Var2 (base name: "perk1Var2")', function() {
      // uncomment below and update the code to test the property perk1Var2
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property tripleKills (base name: "tripleKills")', function() {
      // uncomment below and update the code to test the property tripleKills
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk3Var3 (base name: "perk3Var3")', function() {
      // uncomment below and update the code to test the property perk3Var3
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property nodeNeutralizeAssist (base name: "nodeNeutralizeAssist")', function() {
      // uncomment below and update the code to test the property nodeNeutralizeAssist
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk3Var2 (base name: "perk3Var2")', function() {
      // uncomment below and update the code to test the property perk3Var2
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore9 (base name: "playerScore9")', function() {
      // uncomment below and update the code to test the property playerScore9
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore8 (base name: "playerScore8")', function() {
      // uncomment below and update the code to test the property playerScore8
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property kills (base name: "kills")', function() {
      // uncomment below and update the code to test the property kills
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore1 (base name: "playerScore1")', function() {
      // uncomment below and update the code to test the property playerScore1
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore0 (base name: "playerScore0")', function() {
      // uncomment below and update the code to test the property playerScore0
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore3 (base name: "playerScore3")', function() {
      // uncomment below and update the code to test the property playerScore3
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore2 (base name: "playerScore2")', function() {
      // uncomment below and update the code to test the property playerScore2
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore5 (base name: "playerScore5")', function() {
      // uncomment below and update the code to test the property playerScore5
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore4 (base name: "playerScore4")', function() {
      // uncomment below and update the code to test the property playerScore4
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore7 (base name: "playerScore7")', function() {
      // uncomment below and update the code to test the property playerScore7
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property playerScore6 (base name: "playerScore6")', function() {
      // uncomment below and update the code to test the property playerScore6
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk5Var1 (base name: "perk5Var1")', function() {
      // uncomment below and update the code to test the property perk5Var1
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk5Var3 (base name: "perk5Var3")', function() {
      // uncomment below and update the code to test the property perk5Var3
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk5Var2 (base name: "perk5Var2")', function() {
      // uncomment below and update the code to test the property perk5Var2
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property totalScoreRank (base name: "totalScoreRank")', function() {
      // uncomment below and update the code to test the property totalScoreRank
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property neutralMinionsKilled (base name: "neutralMinionsKilled")', function() {
      // uncomment below and update the code to test the property neutralMinionsKilled
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property damageDealtToTurrets (base name: "damageDealtToTurrets")', function() {
      // uncomment below and update the code to test the property damageDealtToTurrets
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property physicalDamageDealtToChampions (base name: "physicalDamageDealtToChampions")', function() {
      // uncomment below and update the code to test the property physicalDamageDealtToChampions
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property nodeCapture (base name: "nodeCapture")', function() {
      // uncomment below and update the code to test the property nodeCapture
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property largestMultiKill (base name: "largestMultiKill")', function() {
      // uncomment below and update the code to test the property largestMultiKill
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk2Var2 (base name: "perk2Var2")', function() {
      // uncomment below and update the code to test the property perk2Var2
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk2Var3 (base name: "perk2Var3")', function() {
      // uncomment below and update the code to test the property perk2Var3
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property totalUnitsHealed (base name: "totalUnitsHealed")', function() {
      // uncomment below and update the code to test the property totalUnitsHealed
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk2Var1 (base name: "perk2Var1")', function() {
      // uncomment below and update the code to test the property perk2Var1
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk4Var1 (base name: "perk4Var1")', function() {
      // uncomment below and update the code to test the property perk4Var1
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk4Var2 (base name: "perk4Var2")', function() {
      // uncomment below and update the code to test the property perk4Var2
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk4Var3 (base name: "perk4Var3")', function() {
      // uncomment below and update the code to test the property perk4Var3
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property wardsKilled (base name: "wardsKilled")', function() {
      // uncomment below and update the code to test the property wardsKilled
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property largestCriticalStrike (base name: "largestCriticalStrike")', function() {
      // uncomment below and update the code to test the property largestCriticalStrike
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property largestKillingSpree (base name: "largestKillingSpree")', function() {
      // uncomment below and update the code to test the property largestKillingSpree
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property quadraKills (base name: "quadraKills")', function() {
      // uncomment below and update the code to test the property quadraKills
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property teamObjective (base name: "teamObjective")', function() {
      // uncomment below and update the code to test the property teamObjective
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property magicDamageDealt (base name: "magicDamageDealt")', function() {
      // uncomment below and update the code to test the property magicDamageDealt
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property item2 (base name: "item2")', function() {
      // uncomment below and update the code to test the property item2
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property item3 (base name: "item3")', function() {
      // uncomment below and update the code to test the property item3
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property item0 (base name: "item0")', function() {
      // uncomment below and update the code to test the property item0
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property neutralMinionsKilledTeamJungle (base name: "neutralMinionsKilledTeamJungle")', function() {
      // uncomment below and update the code to test the property neutralMinionsKilledTeamJungle
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property item6 (base name: "item6")', function() {
      // uncomment below and update the code to test the property item6
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property item4 (base name: "item4")', function() {
      // uncomment below and update the code to test the property item4
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property item5 (base name: "item5")', function() {
      // uncomment below and update the code to test the property item5
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk1 (base name: "perk1")', function() {
      // uncomment below and update the code to test the property perk1
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk0 (base name: "perk0")', function() {
      // uncomment below and update the code to test the property perk0
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk3 (base name: "perk3")', function() {
      // uncomment below and update the code to test the property perk3
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk2 (base name: "perk2")', function() {
      // uncomment below and update the code to test the property perk2
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk5 (base name: "perk5")', function() {
      // uncomment below and update the code to test the property perk5
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk4 (base name: "perk4")', function() {
      // uncomment below and update the code to test the property perk4
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk3Var1 (base name: "perk3Var1")', function() {
      // uncomment below and update the code to test the property perk3Var1
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property damageSelfMitigated (base name: "damageSelfMitigated")', function() {
      // uncomment below and update the code to test the property damageSelfMitigated
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property magicalDamageTaken (base name: "magicalDamageTaken")', function() {
      // uncomment below and update the code to test the property magicalDamageTaken
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property firstInhibitorKill (base name: "firstInhibitorKill")', function() {
      // uncomment below and update the code to test the property firstInhibitorKill
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property trueDamageTaken (base name: "trueDamageTaken")', function() {
      // uncomment below and update the code to test the property trueDamageTaken
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property nodeNeutralize (base name: "nodeNeutralize")', function() {
      // uncomment below and update the code to test the property nodeNeutralize
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property assists (base name: "assists")', function() {
      // uncomment below and update the code to test the property assists
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property combatPlayerScore (base name: "combatPlayerScore")', function() {
      // uncomment below and update the code to test the property combatPlayerScore
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perkPrimaryStyle (base name: "perkPrimaryStyle")', function() {
      // uncomment below and update the code to test the property perkPrimaryStyle
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property goldSpent (base name: "goldSpent")', function() {
      // uncomment below and update the code to test the property goldSpent
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property trueDamageDealt (base name: "trueDamageDealt")', function() {
      // uncomment below and update the code to test the property trueDamageDealt
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property participantId (base name: "participantId")', function() {
      // uncomment below and update the code to test the property participantId
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property totalDamageTaken (base name: "totalDamageTaken")', function() {
      // uncomment below and update the code to test the property totalDamageTaken
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property physicalDamageDealt (base name: "physicalDamageDealt")', function() {
      // uncomment below and update the code to test the property physicalDamageDealt
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property sightWardsBoughtInGame (base name: "sightWardsBoughtInGame")', function() {
      // uncomment below and update the code to test the property sightWardsBoughtInGame
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property totalDamageDealtToChampions (base name: "totalDamageDealtToChampions")', function() {
      // uncomment below and update the code to test the property totalDamageDealtToChampions
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property physicalDamageTaken (base name: "physicalDamageTaken")', function() {
      // uncomment below and update the code to test the property physicalDamageTaken
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property totalPlayerScore (base name: "totalPlayerScore")', function() {
      // uncomment below and update the code to test the property totalPlayerScore
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property win (base name: "win")', function() {
      // uncomment below and update the code to test the property win
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property objectivePlayerScore (base name: "objectivePlayerScore")', function() {
      // uncomment below and update the code to test the property objectivePlayerScore
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property totalDamageDealt (base name: "totalDamageDealt")', function() {
      // uncomment below and update the code to test the property totalDamageDealt
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property item1 (base name: "item1")', function() {
      // uncomment below and update the code to test the property item1
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property neutralMinionsKilledEnemyJungle (base name: "neutralMinionsKilledEnemyJungle")', function() {
      // uncomment below and update the code to test the property neutralMinionsKilledEnemyJungle
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property deaths (base name: "deaths")', function() {
      // uncomment below and update the code to test the property deaths
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property wardsPlaced (base name: "wardsPlaced")', function() {
      // uncomment below and update the code to test the property wardsPlaced
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perkSubStyle (base name: "perkSubStyle")', function() {
      // uncomment below and update the code to test the property perkSubStyle
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property turretKills (base name: "turretKills")', function() {
      // uncomment below and update the code to test the property turretKills
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property firstBloodKill (base name: "firstBloodKill")', function() {
      // uncomment below and update the code to test the property firstBloodKill
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property trueDamageDealtToChampions (base name: "trueDamageDealtToChampions")', function() {
      // uncomment below and update the code to test the property trueDamageDealtToChampions
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property goldEarned (base name: "goldEarned")', function() {
      // uncomment below and update the code to test the property goldEarned
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property killingSprees (base name: "killingSprees")', function() {
      // uncomment below and update the code to test the property killingSprees
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property unrealKills (base name: "unrealKills")', function() {
      // uncomment below and update the code to test the property unrealKills
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property altarsCaptured (base name: "altarsCaptured")', function() {
      // uncomment below and update the code to test the property altarsCaptured
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property firstTowerAssist (base name: "firstTowerAssist")', function() {
      // uncomment below and update the code to test the property firstTowerAssist
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property firstTowerKill (base name: "firstTowerKill")', function() {
      // uncomment below and update the code to test the property firstTowerKill
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property champLevel (base name: "champLevel")', function() {
      // uncomment below and update the code to test the property champLevel
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property doubleKills (base name: "doubleKills")', function() {
      // uncomment below and update the code to test the property doubleKills
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property nodeCaptureAssist (base name: "nodeCaptureAssist")', function() {
      // uncomment below and update the code to test the property nodeCaptureAssist
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property inhibitorKills (base name: "inhibitorKills")', function() {
      // uncomment below and update the code to test the property inhibitorKills
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property firstInhibitorAssist (base name: "firstInhibitorAssist")', function() {
      // uncomment below and update the code to test the property firstInhibitorAssist
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk0Var1 (base name: "perk0Var1")', function() {
      // uncomment below and update the code to test the property perk0Var1
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk0Var2 (base name: "perk0Var2")', function() {
      // uncomment below and update the code to test the property perk0Var2
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property perk0Var3 (base name: "perk0Var3")', function() {
      // uncomment below and update the code to test the property perk0Var3
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property visionWardsBoughtInGame (base name: "visionWardsBoughtInGame")', function() {
      // uncomment below and update the code to test the property visionWardsBoughtInGame
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property altarsNeutralized (base name: "altarsNeutralized")', function() {
      // uncomment below and update the code to test the property altarsNeutralized
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property pentaKills (base name: "pentaKills")', function() {
      // uncomment below and update the code to test the property pentaKills
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property totalHeal (base name: "totalHeal")', function() {
      // uncomment below and update the code to test the property totalHeal
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property totalMinionsKilled (base name: "totalMinionsKilled")', function() {
      // uncomment below and update the code to test the property totalMinionsKilled
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

    it('should have the property timeCCingOthers (base name: "timeCCingOthers")', function() {
      // uncomment below and update the code to test the property timeCCingOthers
      //var instance = new RiotApi.MatchV4ParticipantStatsDto();
      //expect(instance).to.be();
    });

  });

}));
