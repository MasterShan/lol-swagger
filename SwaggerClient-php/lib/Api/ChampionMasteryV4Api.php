<?php
/**
 * ChampionMasteryV4Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ChampionMasteryV4Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChampionMasteryV4Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation championMasteryV4GetAllChampionMasteries
     *
     * Get all champion mastery entries sorted by number of champion points descending,
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO[]
     */
    public function championMasteryV4GetAllChampionMasteries($encrypted_summoner_id)
    {
        list($response) = $this->championMasteryV4GetAllChampionMasteriesWithHttpInfo($encrypted_summoner_id);
        return $response;
    }

    /**
     * Operation championMasteryV4GetAllChampionMasteriesWithHttpInfo
     *
     * Get all champion mastery entries sorted by number of champion points descending,
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function championMasteryV4GetAllChampionMasteriesWithHttpInfo($encrypted_summoner_id)
    {
        $returnType = '\Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO[]';
        $request = $this->championMasteryV4GetAllChampionMasteriesRequest($encrypted_summoner_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation championMasteryV4GetAllChampionMasteriesAsync
     *
     * Get all champion mastery entries sorted by number of champion points descending,
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function championMasteryV4GetAllChampionMasteriesAsync($encrypted_summoner_id)
    {
        return $this->championMasteryV4GetAllChampionMasteriesAsyncWithHttpInfo($encrypted_summoner_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation championMasteryV4GetAllChampionMasteriesAsyncWithHttpInfo
     *
     * Get all champion mastery entries sorted by number of champion points descending,
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function championMasteryV4GetAllChampionMasteriesAsyncWithHttpInfo($encrypted_summoner_id)
    {
        $returnType = '\Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO[]';
        $request = $this->championMasteryV4GetAllChampionMasteriesRequest($encrypted_summoner_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'championMasteryV4GetAllChampionMasteries'
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function championMasteryV4GetAllChampionMasteriesRequest($encrypted_summoner_id)
    {
        // verify the required parameter 'encrypted_summoner_id' is set
        if ($encrypted_summoner_id === null || (is_array($encrypted_summoner_id) && count($encrypted_summoner_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $encrypted_summoner_id when calling championMasteryV4GetAllChampionMasteries'
            );
        }

        $resourcePath = '/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($encrypted_summoner_id !== null) {
            $resourcePath = str_replace(
                '{' . 'encryptedSummonerId' . '}',
                ObjectSerializer::toPathValue($encrypted_summoner_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation championMasteryV4GetChampionMastery
     *
     * Get a champion mastery by player ID and champion ID.
     *
     * @param  int $champion_id Champion ID to retrieve Champion Mastery for (required)
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO
     */
    public function championMasteryV4GetChampionMastery($champion_id, $encrypted_summoner_id)
    {
        list($response) = $this->championMasteryV4GetChampionMasteryWithHttpInfo($champion_id, $encrypted_summoner_id);
        return $response;
    }

    /**
     * Operation championMasteryV4GetChampionMasteryWithHttpInfo
     *
     * Get a champion mastery by player ID and champion ID.
     *
     * @param  int $champion_id Champion ID to retrieve Champion Mastery for (required)
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function championMasteryV4GetChampionMasteryWithHttpInfo($champion_id, $encrypted_summoner_id)
    {
        $returnType = '\Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO';
        $request = $this->championMasteryV4GetChampionMasteryRequest($champion_id, $encrypted_summoner_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation championMasteryV4GetChampionMasteryAsync
     *
     * Get a champion mastery by player ID and champion ID.
     *
     * @param  int $champion_id Champion ID to retrieve Champion Mastery for (required)
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function championMasteryV4GetChampionMasteryAsync($champion_id, $encrypted_summoner_id)
    {
        return $this->championMasteryV4GetChampionMasteryAsyncWithHttpInfo($champion_id, $encrypted_summoner_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation championMasteryV4GetChampionMasteryAsyncWithHttpInfo
     *
     * Get a champion mastery by player ID and champion ID.
     *
     * @param  int $champion_id Champion ID to retrieve Champion Mastery for (required)
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function championMasteryV4GetChampionMasteryAsyncWithHttpInfo($champion_id, $encrypted_summoner_id)
    {
        $returnType = '\Swagger\Client\Model\ChampionMasteryV4ChampionMasteryDTO';
        $request = $this->championMasteryV4GetChampionMasteryRequest($champion_id, $encrypted_summoner_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'championMasteryV4GetChampionMastery'
     *
     * @param  int $champion_id Champion ID to retrieve Champion Mastery for (required)
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function championMasteryV4GetChampionMasteryRequest($champion_id, $encrypted_summoner_id)
    {
        // verify the required parameter 'champion_id' is set
        if ($champion_id === null || (is_array($champion_id) && count($champion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $champion_id when calling championMasteryV4GetChampionMastery'
            );
        }
        // verify the required parameter 'encrypted_summoner_id' is set
        if ($encrypted_summoner_id === null || (is_array($encrypted_summoner_id) && count($encrypted_summoner_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $encrypted_summoner_id when calling championMasteryV4GetChampionMastery'
            );
        }

        $resourcePath = '/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{championId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($champion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'championId' . '}',
                ObjectSerializer::toPathValue($champion_id),
                $resourcePath
            );
        }
        // path params
        if ($encrypted_summoner_id !== null) {
            $resourcePath = str_replace(
                '{' . 'encryptedSummonerId' . '}',
                ObjectSerializer::toPathValue($encrypted_summoner_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation championMasteryV4GetChampionMasteryScore
     *
     * Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function championMasteryV4GetChampionMasteryScore($encrypted_summoner_id)
    {
        list($response) = $this->championMasteryV4GetChampionMasteryScoreWithHttpInfo($encrypted_summoner_id);
        return $response;
    }

    /**
     * Operation championMasteryV4GetChampionMasteryScoreWithHttpInfo
     *
     * Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function championMasteryV4GetChampionMasteryScoreWithHttpInfo($encrypted_summoner_id)
    {
        $returnType = 'int';
        $request = $this->championMasteryV4GetChampionMasteryScoreRequest($encrypted_summoner_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation championMasteryV4GetChampionMasteryScoreAsync
     *
     * Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function championMasteryV4GetChampionMasteryScoreAsync($encrypted_summoner_id)
    {
        return $this->championMasteryV4GetChampionMasteryScoreAsyncWithHttpInfo($encrypted_summoner_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation championMasteryV4GetChampionMasteryScoreAsyncWithHttpInfo
     *
     * Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function championMasteryV4GetChampionMasteryScoreAsyncWithHttpInfo($encrypted_summoner_id)
    {
        $returnType = 'int';
        $request = $this->championMasteryV4GetChampionMasteryScoreRequest($encrypted_summoner_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'championMasteryV4GetChampionMasteryScore'
     *
     * @param  string $encrypted_summoner_id Summoner ID associated with the player (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function championMasteryV4GetChampionMasteryScoreRequest($encrypted_summoner_id)
    {
        // verify the required parameter 'encrypted_summoner_id' is set
        if ($encrypted_summoner_id === null || (is_array($encrypted_summoner_id) && count($encrypted_summoner_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $encrypted_summoner_id when calling championMasteryV4GetChampionMasteryScore'
            );
        }

        $resourcePath = '/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($encrypted_summoner_id !== null) {
            $resourcePath = str_replace(
                '{' . 'encryptedSummonerId' . '}',
                ObjectSerializer::toPathValue($encrypted_summoner_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
