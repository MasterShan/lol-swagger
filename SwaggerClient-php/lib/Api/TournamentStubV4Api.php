<?php
/**
 * TournamentStubV4Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TournamentStubV4Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TournamentStubV4Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation tournamentStubV4CreateTournamentCode
     *
     * Create a mock tournament code for the given tournament.
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentCodeParameters $tournament_code_parameters Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function tournamentStubV4CreateTournamentCode($tournament_id, $tournament_code_parameters, $count = null)
    {
        list($response) = $this->tournamentStubV4CreateTournamentCodeWithHttpInfo($tournament_id, $tournament_code_parameters, $count);
        return $response;
    }

    /**
     * Operation tournamentStubV4CreateTournamentCodeWithHttpInfo
     *
     * Create a mock tournament code for the given tournament.
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentCodeParameters $tournament_code_parameters Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentStubV4CreateTournamentCodeWithHttpInfo($tournament_id, $tournament_code_parameters, $count = null)
    {
        $returnType = 'string[]';
        $request = $this->tournamentStubV4CreateTournamentCodeRequest($tournament_id, $tournament_code_parameters, $count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentStubV4CreateTournamentCodeAsync
     *
     * Create a mock tournament code for the given tournament.
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentCodeParameters $tournament_code_parameters Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentStubV4CreateTournamentCodeAsync($tournament_id, $tournament_code_parameters, $count = null)
    {
        return $this->tournamentStubV4CreateTournamentCodeAsyncWithHttpInfo($tournament_id, $tournament_code_parameters, $count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentStubV4CreateTournamentCodeAsyncWithHttpInfo
     *
     * Create a mock tournament code for the given tournament.
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentCodeParameters $tournament_code_parameters Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentStubV4CreateTournamentCodeAsyncWithHttpInfo($tournament_id, $tournament_code_parameters, $count = null)
    {
        $returnType = 'string[]';
        $request = $this->tournamentStubV4CreateTournamentCodeRequest($tournament_id, $tournament_code_parameters, $count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentStubV4CreateTournamentCode'
     *
     * @param  int $tournament_id The tournament ID (required)
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentCodeParameters $tournament_code_parameters Metadata for the generated code (required)
     * @param  int $count The number of codes to create (max 1000) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentStubV4CreateTournamentCodeRequest($tournament_id, $tournament_code_parameters, $count = null)
    {
        // verify the required parameter 'tournament_id' is set
        if ($tournament_id === null || (is_array($tournament_id) && count($tournament_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_id when calling tournamentStubV4CreateTournamentCode'
            );
        }
        // verify the required parameter 'tournament_code_parameters' is set
        if ($tournament_code_parameters === null || (is_array($tournament_code_parameters) && count($tournament_code_parameters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_code_parameters when calling tournamentStubV4CreateTournamentCode'
            );
        }

        $resourcePath = '/lol/tournament-stub/v4/codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($tournament_id !== null) {
            $queryParams['tournamentId'] = ObjectSerializer::toQueryValue($tournament_id);
        }


        // body params
        $_tempBody = null;
        if (isset($tournament_code_parameters)) {
            $_tempBody = $tournament_code_parameters;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentStubV4GetLobbyEventsByCode
     *
     * Gets a mock list of lobby events by tournament code.
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TournamentStubV4LobbyEventDTOWrapper
     */
    public function tournamentStubV4GetLobbyEventsByCode($tournament_code)
    {
        list($response) = $this->tournamentStubV4GetLobbyEventsByCodeWithHttpInfo($tournament_code);
        return $response;
    }

    /**
     * Operation tournamentStubV4GetLobbyEventsByCodeWithHttpInfo
     *
     * Gets a mock list of lobby events by tournament code.
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TournamentStubV4LobbyEventDTOWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentStubV4GetLobbyEventsByCodeWithHttpInfo($tournament_code)
    {
        $returnType = '\Swagger\Client\Model\TournamentStubV4LobbyEventDTOWrapper';
        $request = $this->tournamentStubV4GetLobbyEventsByCodeRequest($tournament_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TournamentStubV4LobbyEventDTOWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentStubV4GetLobbyEventsByCodeAsync
     *
     * Gets a mock list of lobby events by tournament code.
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentStubV4GetLobbyEventsByCodeAsync($tournament_code)
    {
        return $this->tournamentStubV4GetLobbyEventsByCodeAsyncWithHttpInfo($tournament_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentStubV4GetLobbyEventsByCodeAsyncWithHttpInfo
     *
     * Gets a mock list of lobby events by tournament code.
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentStubV4GetLobbyEventsByCodeAsyncWithHttpInfo($tournament_code)
    {
        $returnType = '\Swagger\Client\Model\TournamentStubV4LobbyEventDTOWrapper';
        $request = $this->tournamentStubV4GetLobbyEventsByCodeRequest($tournament_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentStubV4GetLobbyEventsByCode'
     *
     * @param  string $tournament_code The short code to look up lobby events for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentStubV4GetLobbyEventsByCodeRequest($tournament_code)
    {
        // verify the required parameter 'tournament_code' is set
        if ($tournament_code === null || (is_array($tournament_code) && count($tournament_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_code when calling tournamentStubV4GetLobbyEventsByCode'
            );
        }

        $resourcePath = '/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tournament_code !== null) {
            $resourcePath = str_replace(
                '{' . 'tournamentCode' . '}',
                ObjectSerializer::toPathValue($tournament_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentStubV4RegisterProviderData
     *
     * Creates a mock tournament provider and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentStubV4ProviderRegistrationParameters $provider_registration_parameters The provider definition. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function tournamentStubV4RegisterProviderData($provider_registration_parameters)
    {
        list($response) = $this->tournamentStubV4RegisterProviderDataWithHttpInfo($provider_registration_parameters);
        return $response;
    }

    /**
     * Operation tournamentStubV4RegisterProviderDataWithHttpInfo
     *
     * Creates a mock tournament provider and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentStubV4ProviderRegistrationParameters $provider_registration_parameters The provider definition. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentStubV4RegisterProviderDataWithHttpInfo($provider_registration_parameters)
    {
        $returnType = 'int';
        $request = $this->tournamentStubV4RegisterProviderDataRequest($provider_registration_parameters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentStubV4RegisterProviderDataAsync
     *
     * Creates a mock tournament provider and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentStubV4ProviderRegistrationParameters $provider_registration_parameters The provider definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentStubV4RegisterProviderDataAsync($provider_registration_parameters)
    {
        return $this->tournamentStubV4RegisterProviderDataAsyncWithHttpInfo($provider_registration_parameters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentStubV4RegisterProviderDataAsyncWithHttpInfo
     *
     * Creates a mock tournament provider and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentStubV4ProviderRegistrationParameters $provider_registration_parameters The provider definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentStubV4RegisterProviderDataAsyncWithHttpInfo($provider_registration_parameters)
    {
        $returnType = 'int';
        $request = $this->tournamentStubV4RegisterProviderDataRequest($provider_registration_parameters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentStubV4RegisterProviderData'
     *
     * @param  \Swagger\Client\Model\TournamentStubV4ProviderRegistrationParameters $provider_registration_parameters The provider definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentStubV4RegisterProviderDataRequest($provider_registration_parameters)
    {
        // verify the required parameter 'provider_registration_parameters' is set
        if ($provider_registration_parameters === null || (is_array($provider_registration_parameters) && count($provider_registration_parameters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_registration_parameters when calling tournamentStubV4RegisterProviderData'
            );
        }

        $resourcePath = '/lol/tournament-stub/v4/providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($provider_registration_parameters)) {
            $_tempBody = $provider_registration_parameters;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tournamentStubV4RegisterTournament
     *
     * Creates a mock tournament and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentRegistrationParameters $tournament_registration_parameters The tournament definition. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function tournamentStubV4RegisterTournament($tournament_registration_parameters)
    {
        list($response) = $this->tournamentStubV4RegisterTournamentWithHttpInfo($tournament_registration_parameters);
        return $response;
    }

    /**
     * Operation tournamentStubV4RegisterTournamentWithHttpInfo
     *
     * Creates a mock tournament and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentRegistrationParameters $tournament_registration_parameters The tournament definition. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function tournamentStubV4RegisterTournamentWithHttpInfo($tournament_registration_parameters)
    {
        $returnType = 'int';
        $request = $this->tournamentStubV4RegisterTournamentRequest($tournament_registration_parameters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tournamentStubV4RegisterTournamentAsync
     *
     * Creates a mock tournament and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentRegistrationParameters $tournament_registration_parameters The tournament definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentStubV4RegisterTournamentAsync($tournament_registration_parameters)
    {
        return $this->tournamentStubV4RegisterTournamentAsyncWithHttpInfo($tournament_registration_parameters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tournamentStubV4RegisterTournamentAsyncWithHttpInfo
     *
     * Creates a mock tournament and returns its ID.
     *
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentRegistrationParameters $tournament_registration_parameters The tournament definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tournamentStubV4RegisterTournamentAsyncWithHttpInfo($tournament_registration_parameters)
    {
        $returnType = 'int';
        $request = $this->tournamentStubV4RegisterTournamentRequest($tournament_registration_parameters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tournamentStubV4RegisterTournament'
     *
     * @param  \Swagger\Client\Model\TournamentStubV4TournamentRegistrationParameters $tournament_registration_parameters The tournament definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tournamentStubV4RegisterTournamentRequest($tournament_registration_parameters)
    {
        // verify the required parameter 'tournament_registration_parameters' is set
        if ($tournament_registration_parameters === null || (is_array($tournament_registration_parameters) && count($tournament_registration_parameters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tournament_registration_parameters when calling tournamentStubV4RegisterTournament'
            );
        }

        $resourcePath = '/lol/tournament-stub/v4/tournaments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($tournament_registration_parameters)) {
            $_tempBody = $tournament_registration_parameters;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Riot-Token');
        if ($apiKey !== null) {
            $headers['X-Riot-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
