<?php
/**
 * MatchV4TeamStatsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV4TeamStatsDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV4TeamStatsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v4.TeamStatsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'first_dragon' => 'bool',
        'first_inhibitor' => 'bool',
        'bans' => '\Swagger\Client\Model\MatchV4TeamBansDto[]',
        'baron_kills' => 'int',
        'first_rift_herald' => 'bool',
        'first_baron' => 'bool',
        'rift_herald_kills' => 'int',
        'first_blood' => 'bool',
        'team_id' => 'int',
        'first_tower' => 'bool',
        'vilemaw_kills' => 'int',
        'inhibitor_kills' => 'int',
        'tower_kills' => 'int',
        'dominion_victory_score' => 'int',
        'win' => 'string',
        'dragon_kills' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'first_dragon' => null,
        'first_inhibitor' => null,
        'bans' => null,
        'baron_kills' => 'int32',
        'first_rift_herald' => null,
        'first_baron' => null,
        'rift_herald_kills' => 'int32',
        'first_blood' => null,
        'team_id' => 'int32',
        'first_tower' => null,
        'vilemaw_kills' => 'int32',
        'inhibitor_kills' => 'int32',
        'tower_kills' => 'int32',
        'dominion_victory_score' => 'int32',
        'win' => null,
        'dragon_kills' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_dragon' => 'firstDragon',
        'first_inhibitor' => 'firstInhibitor',
        'bans' => 'bans',
        'baron_kills' => 'baronKills',
        'first_rift_herald' => 'firstRiftHerald',
        'first_baron' => 'firstBaron',
        'rift_herald_kills' => 'riftHeraldKills',
        'first_blood' => 'firstBlood',
        'team_id' => 'teamId',
        'first_tower' => 'firstTower',
        'vilemaw_kills' => 'vilemawKills',
        'inhibitor_kills' => 'inhibitorKills',
        'tower_kills' => 'towerKills',
        'dominion_victory_score' => 'dominionVictoryScore',
        'win' => 'win',
        'dragon_kills' => 'dragonKills'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_dragon' => 'setFirstDragon',
        'first_inhibitor' => 'setFirstInhibitor',
        'bans' => 'setBans',
        'baron_kills' => 'setBaronKills',
        'first_rift_herald' => 'setFirstRiftHerald',
        'first_baron' => 'setFirstBaron',
        'rift_herald_kills' => 'setRiftHeraldKills',
        'first_blood' => 'setFirstBlood',
        'team_id' => 'setTeamId',
        'first_tower' => 'setFirstTower',
        'vilemaw_kills' => 'setVilemawKills',
        'inhibitor_kills' => 'setInhibitorKills',
        'tower_kills' => 'setTowerKills',
        'dominion_victory_score' => 'setDominionVictoryScore',
        'win' => 'setWin',
        'dragon_kills' => 'setDragonKills'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_dragon' => 'getFirstDragon',
        'first_inhibitor' => 'getFirstInhibitor',
        'bans' => 'getBans',
        'baron_kills' => 'getBaronKills',
        'first_rift_herald' => 'getFirstRiftHerald',
        'first_baron' => 'getFirstBaron',
        'rift_herald_kills' => 'getRiftHeraldKills',
        'first_blood' => 'getFirstBlood',
        'team_id' => 'getTeamId',
        'first_tower' => 'getFirstTower',
        'vilemaw_kills' => 'getVilemawKills',
        'inhibitor_kills' => 'getInhibitorKills',
        'tower_kills' => 'getTowerKills',
        'dominion_victory_score' => 'getDominionVictoryScore',
        'win' => 'getWin',
        'dragon_kills' => 'getDragonKills'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WIN_FAIL = 'Fail';
    const WIN_WIN = 'Win';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWinAllowableValues()
    {
        return [
            self::WIN_FAIL,
            self::WIN_WIN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_dragon'] = isset($data['first_dragon']) ? $data['first_dragon'] : null;
        $this->container['first_inhibitor'] = isset($data['first_inhibitor']) ? $data['first_inhibitor'] : null;
        $this->container['bans'] = isset($data['bans']) ? $data['bans'] : null;
        $this->container['baron_kills'] = isset($data['baron_kills']) ? $data['baron_kills'] : null;
        $this->container['first_rift_herald'] = isset($data['first_rift_herald']) ? $data['first_rift_herald'] : null;
        $this->container['first_baron'] = isset($data['first_baron']) ? $data['first_baron'] : null;
        $this->container['rift_herald_kills'] = isset($data['rift_herald_kills']) ? $data['rift_herald_kills'] : null;
        $this->container['first_blood'] = isset($data['first_blood']) ? $data['first_blood'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['first_tower'] = isset($data['first_tower']) ? $data['first_tower'] : null;
        $this->container['vilemaw_kills'] = isset($data['vilemaw_kills']) ? $data['vilemaw_kills'] : null;
        $this->container['inhibitor_kills'] = isset($data['inhibitor_kills']) ? $data['inhibitor_kills'] : null;
        $this->container['tower_kills'] = isset($data['tower_kills']) ? $data['tower_kills'] : null;
        $this->container['dominion_victory_score'] = isset($data['dominion_victory_score']) ? $data['dominion_victory_score'] : null;
        $this->container['win'] = isset($data['win']) ? $data['win'] : null;
        $this->container['dragon_kills'] = isset($data['dragon_kills']) ? $data['dragon_kills'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWinAllowableValues();
        if (!is_null($this->container['win']) && !in_array($this->container['win'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'win', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_dragon
     *
     * @return bool
     */
    public function getFirstDragon()
    {
        return $this->container['first_dragon'];
    }

    /**
     * Sets first_dragon
     *
     * @param bool $first_dragon Flag indicating whether or not the team scored the first Dragon kill.
     *
     * @return $this
     */
    public function setFirstDragon($first_dragon)
    {
        $this->container['first_dragon'] = $first_dragon;

        return $this;
    }

    /**
     * Gets first_inhibitor
     *
     * @return bool
     */
    public function getFirstInhibitor()
    {
        return $this->container['first_inhibitor'];
    }

    /**
     * Sets first_inhibitor
     *
     * @param bool $first_inhibitor Flag indicating whether or not the team destroyed the first inhibitor.
     *
     * @return $this
     */
    public function setFirstInhibitor($first_inhibitor)
    {
        $this->container['first_inhibitor'] = $first_inhibitor;

        return $this;
    }

    /**
     * Gets bans
     *
     * @return \Swagger\Client\Model\MatchV4TeamBansDto[]
     */
    public function getBans()
    {
        return $this->container['bans'];
    }

    /**
     * Sets bans
     *
     * @param \Swagger\Client\Model\MatchV4TeamBansDto[] $bans If match queueId has a draft, contains banned champion data, otherwise empty.
     *
     * @return $this
     */
    public function setBans($bans)
    {
        $this->container['bans'] = $bans;

        return $this;
    }

    /**
     * Gets baron_kills
     *
     * @return int
     */
    public function getBaronKills()
    {
        return $this->container['baron_kills'];
    }

    /**
     * Sets baron_kills
     *
     * @param int $baron_kills Number of times the team killed Baron.
     *
     * @return $this
     */
    public function setBaronKills($baron_kills)
    {
        $this->container['baron_kills'] = $baron_kills;

        return $this;
    }

    /**
     * Gets first_rift_herald
     *
     * @return bool
     */
    public function getFirstRiftHerald()
    {
        return $this->container['first_rift_herald'];
    }

    /**
     * Sets first_rift_herald
     *
     * @param bool $first_rift_herald Flag indicating whether or not the team scored the first Rift Herald kill.
     *
     * @return $this
     */
    public function setFirstRiftHerald($first_rift_herald)
    {
        $this->container['first_rift_herald'] = $first_rift_herald;

        return $this;
    }

    /**
     * Gets first_baron
     *
     * @return bool
     */
    public function getFirstBaron()
    {
        return $this->container['first_baron'];
    }

    /**
     * Sets first_baron
     *
     * @param bool $first_baron Flag indicating whether or not the team scored the first Baron kill.
     *
     * @return $this
     */
    public function setFirstBaron($first_baron)
    {
        $this->container['first_baron'] = $first_baron;

        return $this;
    }

    /**
     * Gets rift_herald_kills
     *
     * @return int
     */
    public function getRiftHeraldKills()
    {
        return $this->container['rift_herald_kills'];
    }

    /**
     * Sets rift_herald_kills
     *
     * @param int $rift_herald_kills Number of times the team killed Rift Herald.
     *
     * @return $this
     */
    public function setRiftHeraldKills($rift_herald_kills)
    {
        $this->container['rift_herald_kills'] = $rift_herald_kills;

        return $this;
    }

    /**
     * Gets first_blood
     *
     * @return bool
     */
    public function getFirstBlood()
    {
        return $this->container['first_blood'];
    }

    /**
     * Sets first_blood
     *
     * @param bool $first_blood Flag indicating whether or not the team scored the first blood.
     *
     * @return $this
     */
    public function setFirstBlood($first_blood)
    {
        $this->container['first_blood'] = $first_blood;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id 100 for blue side. 200 for red side.
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets first_tower
     *
     * @return bool
     */
    public function getFirstTower()
    {
        return $this->container['first_tower'];
    }

    /**
     * Sets first_tower
     *
     * @param bool $first_tower Flag indicating whether or not the team destroyed the first tower.
     *
     * @return $this
     */
    public function setFirstTower($first_tower)
    {
        $this->container['first_tower'] = $first_tower;

        return $this;
    }

    /**
     * Gets vilemaw_kills
     *
     * @return int
     */
    public function getVilemawKills()
    {
        return $this->container['vilemaw_kills'];
    }

    /**
     * Sets vilemaw_kills
     *
     * @param int $vilemaw_kills Number of times the team killed Vilemaw.
     *
     * @return $this
     */
    public function setVilemawKills($vilemaw_kills)
    {
        $this->container['vilemaw_kills'] = $vilemaw_kills;

        return $this;
    }

    /**
     * Gets inhibitor_kills
     *
     * @return int
     */
    public function getInhibitorKills()
    {
        return $this->container['inhibitor_kills'];
    }

    /**
     * Sets inhibitor_kills
     *
     * @param int $inhibitor_kills Number of inhibitors the team destroyed.
     *
     * @return $this
     */
    public function setInhibitorKills($inhibitor_kills)
    {
        $this->container['inhibitor_kills'] = $inhibitor_kills;

        return $this;
    }

    /**
     * Gets tower_kills
     *
     * @return int
     */
    public function getTowerKills()
    {
        return $this->container['tower_kills'];
    }

    /**
     * Sets tower_kills
     *
     * @param int $tower_kills Number of towers the team destroyed.
     *
     * @return $this
     */
    public function setTowerKills($tower_kills)
    {
        $this->container['tower_kills'] = $tower_kills;

        return $this;
    }

    /**
     * Gets dominion_victory_score
     *
     * @return int
     */
    public function getDominionVictoryScore()
    {
        return $this->container['dominion_victory_score'];
    }

    /**
     * Sets dominion_victory_score
     *
     * @param int $dominion_victory_score For Dominion matches, specifies the points the team had at game end.
     *
     * @return $this
     */
    public function setDominionVictoryScore($dominion_victory_score)
    {
        $this->container['dominion_victory_score'] = $dominion_victory_score;

        return $this;
    }

    /**
     * Gets win
     *
     * @return string
     */
    public function getWin()
    {
        return $this->container['win'];
    }

    /**
     * Sets win
     *
     * @param string $win String indicating whether or not the team won. There are only two values visibile in public match history.              (Legal values:  Fail,  Win)
     *
     * @return $this
     */
    public function setWin($win)
    {
        $allowedValues = $this->getWinAllowableValues();
        if (!is_null($win) && !in_array($win, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'win', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['win'] = $win;

        return $this;
    }

    /**
     * Gets dragon_kills
     *
     * @return int
     */
    public function getDragonKills()
    {
        return $this->container['dragon_kills'];
    }

    /**
     * Sets dragon_kills
     *
     * @param int $dragon_kills Number of times the team killed Dragon.
     *
     * @return $this
     */
    public function setDragonKills($dragon_kills)
    {
        $this->container['dragon_kills'] = $dragon_kills;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


