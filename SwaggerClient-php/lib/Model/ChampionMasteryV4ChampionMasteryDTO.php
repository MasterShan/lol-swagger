<?php
/**
 * ChampionMasteryV4ChampionMasteryDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChampionMasteryV4ChampionMasteryDTO Class Doc Comment
 *
 * @category Class
 * @description This object contains single Champion Mastery information for player and champion combination.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChampionMasteryV4ChampionMasteryDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'champion-mastery-v4.ChampionMasteryDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'chest_granted' => 'bool',
        'champion_level' => 'int',
        'champion_points' => 'int',
        'champion_id' => 'int',
        'champion_points_until_next_level' => 'int',
        'last_play_time' => 'int',
        'tokens_earned' => 'int',
        'champion_points_since_last_level' => 'int',
        'summoner_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'chest_granted' => null,
        'champion_level' => 'int32',
        'champion_points' => 'int32',
        'champion_id' => 'int64',
        'champion_points_until_next_level' => 'int64',
        'last_play_time' => 'int64',
        'tokens_earned' => 'int32',
        'champion_points_since_last_level' => 'int64',
        'summoner_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chest_granted' => 'chestGranted',
        'champion_level' => 'championLevel',
        'champion_points' => 'championPoints',
        'champion_id' => 'championId',
        'champion_points_until_next_level' => 'championPointsUntilNextLevel',
        'last_play_time' => 'lastPlayTime',
        'tokens_earned' => 'tokensEarned',
        'champion_points_since_last_level' => 'championPointsSinceLastLevel',
        'summoner_id' => 'summonerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chest_granted' => 'setChestGranted',
        'champion_level' => 'setChampionLevel',
        'champion_points' => 'setChampionPoints',
        'champion_id' => 'setChampionId',
        'champion_points_until_next_level' => 'setChampionPointsUntilNextLevel',
        'last_play_time' => 'setLastPlayTime',
        'tokens_earned' => 'setTokensEarned',
        'champion_points_since_last_level' => 'setChampionPointsSinceLastLevel',
        'summoner_id' => 'setSummonerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chest_granted' => 'getChestGranted',
        'champion_level' => 'getChampionLevel',
        'champion_points' => 'getChampionPoints',
        'champion_id' => 'getChampionId',
        'champion_points_until_next_level' => 'getChampionPointsUntilNextLevel',
        'last_play_time' => 'getLastPlayTime',
        'tokens_earned' => 'getTokensEarned',
        'champion_points_since_last_level' => 'getChampionPointsSinceLastLevel',
        'summoner_id' => 'getSummonerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chest_granted'] = isset($data['chest_granted']) ? $data['chest_granted'] : null;
        $this->container['champion_level'] = isset($data['champion_level']) ? $data['champion_level'] : null;
        $this->container['champion_points'] = isset($data['champion_points']) ? $data['champion_points'] : null;
        $this->container['champion_id'] = isset($data['champion_id']) ? $data['champion_id'] : null;
        $this->container['champion_points_until_next_level'] = isset($data['champion_points_until_next_level']) ? $data['champion_points_until_next_level'] : null;
        $this->container['last_play_time'] = isset($data['last_play_time']) ? $data['last_play_time'] : null;
        $this->container['tokens_earned'] = isset($data['tokens_earned']) ? $data['tokens_earned'] : null;
        $this->container['champion_points_since_last_level'] = isset($data['champion_points_since_last_level']) ? $data['champion_points_since_last_level'] : null;
        $this->container['summoner_id'] = isset($data['summoner_id']) ? $data['summoner_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chest_granted
     *
     * @return bool
     */
    public function getChestGranted()
    {
        return $this->container['chest_granted'];
    }

    /**
     * Sets chest_granted
     *
     * @param bool $chest_granted Is chest granted for this champion or not in current season.
     *
     * @return $this
     */
    public function setChestGranted($chest_granted)
    {
        $this->container['chest_granted'] = $chest_granted;

        return $this;
    }

    /**
     * Gets champion_level
     *
     * @return int
     */
    public function getChampionLevel()
    {
        return $this->container['champion_level'];
    }

    /**
     * Sets champion_level
     *
     * @param int $champion_level Champion level for specified player and champion combination.
     *
     * @return $this
     */
    public function setChampionLevel($champion_level)
    {
        $this->container['champion_level'] = $champion_level;

        return $this;
    }

    /**
     * Gets champion_points
     *
     * @return int
     */
    public function getChampionPoints()
    {
        return $this->container['champion_points'];
    }

    /**
     * Sets champion_points
     *
     * @param int $champion_points Total number of champion points for this player and champion combination - they are used to determine championLevel.
     *
     * @return $this
     */
    public function setChampionPoints($champion_points)
    {
        $this->container['champion_points'] = $champion_points;

        return $this;
    }

    /**
     * Gets champion_id
     *
     * @return int
     */
    public function getChampionId()
    {
        return $this->container['champion_id'];
    }

    /**
     * Sets champion_id
     *
     * @param int $champion_id Champion ID for this entry.
     *
     * @return $this
     */
    public function setChampionId($champion_id)
    {
        $this->container['champion_id'] = $champion_id;

        return $this;
    }

    /**
     * Gets champion_points_until_next_level
     *
     * @return int
     */
    public function getChampionPointsUntilNextLevel()
    {
        return $this->container['champion_points_until_next_level'];
    }

    /**
     * Sets champion_points_until_next_level
     *
     * @param int $champion_points_until_next_level Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
     *
     * @return $this
     */
    public function setChampionPointsUntilNextLevel($champion_points_until_next_level)
    {
        $this->container['champion_points_until_next_level'] = $champion_points_until_next_level;

        return $this;
    }

    /**
     * Gets last_play_time
     *
     * @return int
     */
    public function getLastPlayTime()
    {
        return $this->container['last_play_time'];
    }

    /**
     * Sets last_play_time
     *
     * @param int $last_play_time Last time this champion was played by this player - in Unix milliseconds time format.
     *
     * @return $this
     */
    public function setLastPlayTime($last_play_time)
    {
        $this->container['last_play_time'] = $last_play_time;

        return $this;
    }

    /**
     * Gets tokens_earned
     *
     * @return int
     */
    public function getTokensEarned()
    {
        return $this->container['tokens_earned'];
    }

    /**
     * Sets tokens_earned
     *
     * @param int $tokens_earned The token earned for this champion to levelup.
     *
     * @return $this
     */
    public function setTokensEarned($tokens_earned)
    {
        $this->container['tokens_earned'] = $tokens_earned;

        return $this;
    }

    /**
     * Gets champion_points_since_last_level
     *
     * @return int
     */
    public function getChampionPointsSinceLastLevel()
    {
        return $this->container['champion_points_since_last_level'];
    }

    /**
     * Sets champion_points_since_last_level
     *
     * @param int $champion_points_since_last_level Number of points earned since current level has been achieved.
     *
     * @return $this
     */
    public function setChampionPointsSinceLastLevel($champion_points_since_last_level)
    {
        $this->container['champion_points_since_last_level'] = $champion_points_since_last_level;

        return $this;
    }

    /**
     * Gets summoner_id
     *
     * @return string
     */
    public function getSummonerId()
    {
        return $this->container['summoner_id'];
    }

    /**
     * Sets summoner_id
     *
     * @param string $summoner_id Summoner ID for this entry. (Encrypted)
     *
     * @return $this
     */
    public function setSummonerId($summoner_id)
    {
        $this->container['summoner_id'] = $summoner_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


