<?php
/**
 * MatchV4ParticipantDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV4ParticipantDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV4ParticipantDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v4.ParticipantDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stats' => '\Swagger\Client\Model\MatchV4ParticipantStatsDto',
        'participant_id' => 'int',
        'runes' => '\Swagger\Client\Model\MatchV4RuneDto[]',
        'timeline' => '\Swagger\Client\Model\MatchV4ParticipantTimelineDto',
        'team_id' => 'int',
        'spell2_id' => 'int',
        'masteries' => '\Swagger\Client\Model\MatchV4MasteryDto[]',
        'highest_achieved_season_tier' => 'string',
        'spell1_id' => 'int',
        'champion_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stats' => null,
        'participant_id' => 'int32',
        'runes' => null,
        'timeline' => null,
        'team_id' => 'int32',
        'spell2_id' => 'int32',
        'masteries' => null,
        'highest_achieved_season_tier' => null,
        'spell1_id' => 'int32',
        'champion_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stats' => 'stats',
        'participant_id' => 'participantId',
        'runes' => 'runes',
        'timeline' => 'timeline',
        'team_id' => 'teamId',
        'spell2_id' => 'spell2Id',
        'masteries' => 'masteries',
        'highest_achieved_season_tier' => 'highestAchievedSeasonTier',
        'spell1_id' => 'spell1Id',
        'champion_id' => 'championId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stats' => 'setStats',
        'participant_id' => 'setParticipantId',
        'runes' => 'setRunes',
        'timeline' => 'setTimeline',
        'team_id' => 'setTeamId',
        'spell2_id' => 'setSpell2Id',
        'masteries' => 'setMasteries',
        'highest_achieved_season_tier' => 'setHighestAchievedSeasonTier',
        'spell1_id' => 'setSpell1Id',
        'champion_id' => 'setChampionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stats' => 'getStats',
        'participant_id' => 'getParticipantId',
        'runes' => 'getRunes',
        'timeline' => 'getTimeline',
        'team_id' => 'getTeamId',
        'spell2_id' => 'getSpell2Id',
        'masteries' => 'getMasteries',
        'highest_achieved_season_tier' => 'getHighestAchievedSeasonTier',
        'spell1_id' => 'getSpell1Id',
        'champion_id' => 'getChampionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HIGHEST_ACHIEVED_SEASON_TIER_CHALLENGER = 'CHALLENGER';
    const HIGHEST_ACHIEVED_SEASON_TIER_MASTER = 'MASTER';
    const HIGHEST_ACHIEVED_SEASON_TIER_DIAMOND = 'DIAMOND';
    const HIGHEST_ACHIEVED_SEASON_TIER_PLATINUM = 'PLATINUM';
    const HIGHEST_ACHIEVED_SEASON_TIER_GOLD = 'GOLD';
    const HIGHEST_ACHIEVED_SEASON_TIER_SILVER = 'SILVER';
    const HIGHEST_ACHIEVED_SEASON_TIER_BRONZE = 'BRONZE';
    const HIGHEST_ACHIEVED_SEASON_TIER_UNRANKED = 'UNRANKED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHighestAchievedSeasonTierAllowableValues()
    {
        return [
            self::HIGHEST_ACHIEVED_SEASON_TIER_CHALLENGER,
            self::HIGHEST_ACHIEVED_SEASON_TIER_MASTER,
            self::HIGHEST_ACHIEVED_SEASON_TIER_DIAMOND,
            self::HIGHEST_ACHIEVED_SEASON_TIER_PLATINUM,
            self::HIGHEST_ACHIEVED_SEASON_TIER_GOLD,
            self::HIGHEST_ACHIEVED_SEASON_TIER_SILVER,
            self::HIGHEST_ACHIEVED_SEASON_TIER_BRONZE,
            self::HIGHEST_ACHIEVED_SEASON_TIER_UNRANKED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['participant_id'] = isset($data['participant_id']) ? $data['participant_id'] : null;
        $this->container['runes'] = isset($data['runes']) ? $data['runes'] : null;
        $this->container['timeline'] = isset($data['timeline']) ? $data['timeline'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['spell2_id'] = isset($data['spell2_id']) ? $data['spell2_id'] : null;
        $this->container['masteries'] = isset($data['masteries']) ? $data['masteries'] : null;
        $this->container['highest_achieved_season_tier'] = isset($data['highest_achieved_season_tier']) ? $data['highest_achieved_season_tier'] : null;
        $this->container['spell1_id'] = isset($data['spell1_id']) ? $data['spell1_id'] : null;
        $this->container['champion_id'] = isset($data['champion_id']) ? $data['champion_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHighestAchievedSeasonTierAllowableValues();
        if (!is_null($this->container['highest_achieved_season_tier']) && !in_array($this->container['highest_achieved_season_tier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'highest_achieved_season_tier', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stats
     *
     * @return \Swagger\Client\Model\MatchV4ParticipantStatsDto
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Swagger\Client\Model\MatchV4ParticipantStatsDto $stats Participant statistics.
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets participant_id
     *
     * @return int
     */
    public function getParticipantId()
    {
        return $this->container['participant_id'];
    }

    /**
     * Sets participant_id
     *
     * @param int $participant_id participant_id
     *
     * @return $this
     */
    public function setParticipantId($participant_id)
    {
        $this->container['participant_id'] = $participant_id;

        return $this;
    }

    /**
     * Gets runes
     *
     * @return \Swagger\Client\Model\MatchV4RuneDto[]
     */
    public function getRunes()
    {
        return $this->container['runes'];
    }

    /**
     * Sets runes
     *
     * @param \Swagger\Client\Model\MatchV4RuneDto[] $runes List of legacy Rune information. Not included for matches played with Runes Reforged.
     *
     * @return $this
     */
    public function setRunes($runes)
    {
        $this->container['runes'] = $runes;

        return $this;
    }

    /**
     * Gets timeline
     *
     * @return \Swagger\Client\Model\MatchV4ParticipantTimelineDto
     */
    public function getTimeline()
    {
        return $this->container['timeline'];
    }

    /**
     * Sets timeline
     *
     * @param \Swagger\Client\Model\MatchV4ParticipantTimelineDto $timeline Participant timeline data.
     *
     * @return $this
     */
    public function setTimeline($timeline)
    {
        $this->container['timeline'] = $timeline;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id 100 for blue side. 200 for red side.
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets spell2_id
     *
     * @return int
     */
    public function getSpell2Id()
    {
        return $this->container['spell2_id'];
    }

    /**
     * Sets spell2_id
     *
     * @param int $spell2_id Second Summoner Spell id.
     *
     * @return $this
     */
    public function setSpell2Id($spell2_id)
    {
        $this->container['spell2_id'] = $spell2_id;

        return $this;
    }

    /**
     * Gets masteries
     *
     * @return \Swagger\Client\Model\MatchV4MasteryDto[]
     */
    public function getMasteries()
    {
        return $this->container['masteries'];
    }

    /**
     * Sets masteries
     *
     * @param \Swagger\Client\Model\MatchV4MasteryDto[] $masteries List of legacy Mastery information. Not included for matches played with Runes Reforged.
     *
     * @return $this
     */
    public function setMasteries($masteries)
    {
        $this->container['masteries'] = $masteries;

        return $this;
    }

    /**
     * Gets highest_achieved_season_tier
     *
     * @return string
     */
    public function getHighestAchievedSeasonTier()
    {
        return $this->container['highest_achieved_season_tier'];
    }

    /**
     * Sets highest_achieved_season_tier
     *
     * @param string $highest_achieved_season_tier Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.              (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
     *
     * @return $this
     */
    public function setHighestAchievedSeasonTier($highest_achieved_season_tier)
    {
        $allowedValues = $this->getHighestAchievedSeasonTierAllowableValues();
        if (!is_null($highest_achieved_season_tier) && !in_array($highest_achieved_season_tier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'highest_achieved_season_tier', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['highest_achieved_season_tier'] = $highest_achieved_season_tier;

        return $this;
    }

    /**
     * Gets spell1_id
     *
     * @return int
     */
    public function getSpell1Id()
    {
        return $this->container['spell1_id'];
    }

    /**
     * Sets spell1_id
     *
     * @param int $spell1_id First Summoner Spell id.
     *
     * @return $this
     */
    public function setSpell1Id($spell1_id)
    {
        $this->container['spell1_id'] = $spell1_id;

        return $this;
    }

    /**
     * Gets champion_id
     *
     * @return int
     */
    public function getChampionId()
    {
        return $this->container['champion_id'];
    }

    /**
     * Sets champion_id
     *
     * @param int $champion_id champion_id
     *
     * @return $this
     */
    public function setChampionId($champion_id)
    {
        $this->container['champion_id'] = $champion_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


