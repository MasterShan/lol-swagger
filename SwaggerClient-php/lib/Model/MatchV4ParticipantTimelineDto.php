<?php
/**
 * MatchV4ParticipantTimelineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV4ParticipantTimelineDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV4ParticipantTimelineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v4.ParticipantTimelineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lane' => 'string',
        'participant_id' => 'int',
        'cs_diff_per_min_deltas' => 'map[string,double]',
        'gold_per_min_deltas' => 'map[string,double]',
        'xp_diff_per_min_deltas' => 'map[string,double]',
        'creeps_per_min_deltas' => 'map[string,double]',
        'xp_per_min_deltas' => 'map[string,double]',
        'role' => 'string',
        'damage_taken_diff_per_min_deltas' => 'map[string,double]',
        'damage_taken_per_min_deltas' => 'map[string,double]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lane' => null,
        'participant_id' => 'int32',
        'cs_diff_per_min_deltas' => 'double',
        'gold_per_min_deltas' => 'double',
        'xp_diff_per_min_deltas' => 'double',
        'creeps_per_min_deltas' => 'double',
        'xp_per_min_deltas' => 'double',
        'role' => null,
        'damage_taken_diff_per_min_deltas' => 'double',
        'damage_taken_per_min_deltas' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lane' => 'lane',
        'participant_id' => 'participantId',
        'cs_diff_per_min_deltas' => 'csDiffPerMinDeltas',
        'gold_per_min_deltas' => 'goldPerMinDeltas',
        'xp_diff_per_min_deltas' => 'xpDiffPerMinDeltas',
        'creeps_per_min_deltas' => 'creepsPerMinDeltas',
        'xp_per_min_deltas' => 'xpPerMinDeltas',
        'role' => 'role',
        'damage_taken_diff_per_min_deltas' => 'damageTakenDiffPerMinDeltas',
        'damage_taken_per_min_deltas' => 'damageTakenPerMinDeltas'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lane' => 'setLane',
        'participant_id' => 'setParticipantId',
        'cs_diff_per_min_deltas' => 'setCsDiffPerMinDeltas',
        'gold_per_min_deltas' => 'setGoldPerMinDeltas',
        'xp_diff_per_min_deltas' => 'setXpDiffPerMinDeltas',
        'creeps_per_min_deltas' => 'setCreepsPerMinDeltas',
        'xp_per_min_deltas' => 'setXpPerMinDeltas',
        'role' => 'setRole',
        'damage_taken_diff_per_min_deltas' => 'setDamageTakenDiffPerMinDeltas',
        'damage_taken_per_min_deltas' => 'setDamageTakenPerMinDeltas'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lane' => 'getLane',
        'participant_id' => 'getParticipantId',
        'cs_diff_per_min_deltas' => 'getCsDiffPerMinDeltas',
        'gold_per_min_deltas' => 'getGoldPerMinDeltas',
        'xp_diff_per_min_deltas' => 'getXpDiffPerMinDeltas',
        'creeps_per_min_deltas' => 'getCreepsPerMinDeltas',
        'xp_per_min_deltas' => 'getXpPerMinDeltas',
        'role' => 'getRole',
        'damage_taken_diff_per_min_deltas' => 'getDamageTakenDiffPerMinDeltas',
        'damage_taken_per_min_deltas' => 'getDamageTakenPerMinDeltas'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LANE_MID = 'MID';
    const LANE_MIDDLE = 'MIDDLE';
    const LANE_TOP = 'TOP';
    const LANE_JUNGLE = 'JUNGLE';
    const LANE_BOT = 'BOT';
    const LANE_BOTTOM = 'BOTTOM';
    const ROLE_DUO = 'DUO';
    const ROLE_NONE = 'NONE';
    const ROLE_SOLO = 'SOLO';
    const ROLE_DUO_CARRY = 'DUO_CARRY';
    const ROLE_DUO_SUPPORT = 'DUO_SUPPORT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLaneAllowableValues()
    {
        return [
            self::LANE_MID,
            self::LANE_MIDDLE,
            self::LANE_TOP,
            self::LANE_JUNGLE,
            self::LANE_BOT,
            self::LANE_BOTTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_DUO,
            self::ROLE_NONE,
            self::ROLE_SOLO,
            self::ROLE_DUO_CARRY,
            self::ROLE_DUO_SUPPORT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lane'] = isset($data['lane']) ? $data['lane'] : null;
        $this->container['participant_id'] = isset($data['participant_id']) ? $data['participant_id'] : null;
        $this->container['cs_diff_per_min_deltas'] = isset($data['cs_diff_per_min_deltas']) ? $data['cs_diff_per_min_deltas'] : null;
        $this->container['gold_per_min_deltas'] = isset($data['gold_per_min_deltas']) ? $data['gold_per_min_deltas'] : null;
        $this->container['xp_diff_per_min_deltas'] = isset($data['xp_diff_per_min_deltas']) ? $data['xp_diff_per_min_deltas'] : null;
        $this->container['creeps_per_min_deltas'] = isset($data['creeps_per_min_deltas']) ? $data['creeps_per_min_deltas'] : null;
        $this->container['xp_per_min_deltas'] = isset($data['xp_per_min_deltas']) ? $data['xp_per_min_deltas'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['damage_taken_diff_per_min_deltas'] = isset($data['damage_taken_diff_per_min_deltas']) ? $data['damage_taken_diff_per_min_deltas'] : null;
        $this->container['damage_taken_per_min_deltas'] = isset($data['damage_taken_per_min_deltas']) ? $data['damage_taken_per_min_deltas'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLaneAllowableValues();
        if (!is_null($this->container['lane']) && !in_array($this->container['lane'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lane', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'role', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lane
     *
     * @return string
     */
    public function getLane()
    {
        return $this->container['lane'];
    }

    /**
     * Sets lane
     *
     * @param string $lane Participant's calculated lane. MID and BOT are legacy values.              (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)
     *
     * @return $this
     */
    public function setLane($lane)
    {
        $allowedValues = $this->getLaneAllowableValues();
        if (!is_null($lane) && !in_array($lane, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lane', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lane'] = $lane;

        return $this;
    }

    /**
     * Gets participant_id
     *
     * @return int
     */
    public function getParticipantId()
    {
        return $this->container['participant_id'];
    }

    /**
     * Sets participant_id
     *
     * @param int $participant_id participant_id
     *
     * @return $this
     */
    public function setParticipantId($participant_id)
    {
        $this->container['participant_id'] = $participant_id;

        return $this;
    }

    /**
     * Gets cs_diff_per_min_deltas
     *
     * @return map[string,double]
     */
    public function getCsDiffPerMinDeltas()
    {
        return $this->container['cs_diff_per_min_deltas'];
    }

    /**
     * Sets cs_diff_per_min_deltas
     *
     * @param map[string,double] $cs_diff_per_min_deltas Creep score difference versus the calculated lane opponent(s) for a specified period.
     *
     * @return $this
     */
    public function setCsDiffPerMinDeltas($cs_diff_per_min_deltas)
    {
        $this->container['cs_diff_per_min_deltas'] = $cs_diff_per_min_deltas;

        return $this;
    }

    /**
     * Gets gold_per_min_deltas
     *
     * @return map[string,double]
     */
    public function getGoldPerMinDeltas()
    {
        return $this->container['gold_per_min_deltas'];
    }

    /**
     * Sets gold_per_min_deltas
     *
     * @param map[string,double] $gold_per_min_deltas Gold for a specified period.
     *
     * @return $this
     */
    public function setGoldPerMinDeltas($gold_per_min_deltas)
    {
        $this->container['gold_per_min_deltas'] = $gold_per_min_deltas;

        return $this;
    }

    /**
     * Gets xp_diff_per_min_deltas
     *
     * @return map[string,double]
     */
    public function getXpDiffPerMinDeltas()
    {
        return $this->container['xp_diff_per_min_deltas'];
    }

    /**
     * Sets xp_diff_per_min_deltas
     *
     * @param map[string,double] $xp_diff_per_min_deltas Experience difference versus the calculated lane opponent(s) for a specified period.
     *
     * @return $this
     */
    public function setXpDiffPerMinDeltas($xp_diff_per_min_deltas)
    {
        $this->container['xp_diff_per_min_deltas'] = $xp_diff_per_min_deltas;

        return $this;
    }

    /**
     * Gets creeps_per_min_deltas
     *
     * @return map[string,double]
     */
    public function getCreepsPerMinDeltas()
    {
        return $this->container['creeps_per_min_deltas'];
    }

    /**
     * Sets creeps_per_min_deltas
     *
     * @param map[string,double] $creeps_per_min_deltas Creeps for a specified period.
     *
     * @return $this
     */
    public function setCreepsPerMinDeltas($creeps_per_min_deltas)
    {
        $this->container['creeps_per_min_deltas'] = $creeps_per_min_deltas;

        return $this;
    }

    /**
     * Gets xp_per_min_deltas
     *
     * @return map[string,double]
     */
    public function getXpPerMinDeltas()
    {
        return $this->container['xp_per_min_deltas'];
    }

    /**
     * Sets xp_per_min_deltas
     *
     * @param map[string,double] $xp_per_min_deltas Experience change for a specified period.
     *
     * @return $this
     */
    public function setXpPerMinDeltas($xp_per_min_deltas)
    {
        $this->container['xp_per_min_deltas'] = $xp_per_min_deltas;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role Participant's calculated role.              (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)
     *
     * @return $this
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($role) && !in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'role', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets damage_taken_diff_per_min_deltas
     *
     * @return map[string,double]
     */
    public function getDamageTakenDiffPerMinDeltas()
    {
        return $this->container['damage_taken_diff_per_min_deltas'];
    }

    /**
     * Sets damage_taken_diff_per_min_deltas
     *
     * @param map[string,double] $damage_taken_diff_per_min_deltas Damage taken difference versus the calculated lane opponent(s) for a specified period.
     *
     * @return $this
     */
    public function setDamageTakenDiffPerMinDeltas($damage_taken_diff_per_min_deltas)
    {
        $this->container['damage_taken_diff_per_min_deltas'] = $damage_taken_diff_per_min_deltas;

        return $this;
    }

    /**
     * Gets damage_taken_per_min_deltas
     *
     * @return map[string,double]
     */
    public function getDamageTakenPerMinDeltas()
    {
        return $this->container['damage_taken_per_min_deltas'];
    }

    /**
     * Sets damage_taken_per_min_deltas
     *
     * @param map[string,double] $damage_taken_per_min_deltas Damage taken for a specified period.
     *
     * @return $this
     */
    public function setDamageTakenPerMinDeltas($damage_taken_per_min_deltas)
    {
        $this->container['damage_taken_per_min_deltas'] = $damage_taken_per_min_deltas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


