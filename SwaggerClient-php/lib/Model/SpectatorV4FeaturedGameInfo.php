<?php
/**
 * SpectatorV4FeaturedGameInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SpectatorV4FeaturedGameInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SpectatorV4FeaturedGameInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'spectator-v4.FeaturedGameInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'game_id' => 'int',
        'game_start_time' => 'int',
        'platform_id' => 'string',
        'game_mode' => 'string',
        'map_id' => 'int',
        'game_type' => 'string',
        'banned_champions' => '\Swagger\Client\Model\SpectatorV4BannedChampion[]',
        'observers' => '\Swagger\Client\Model\SpectatorV4Observer',
        'participants' => '\Swagger\Client\Model\SpectatorV4Participant[]',
        'game_length' => 'int',
        'game_queue_config_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'game_id' => 'int64',
        'game_start_time' => 'int64',
        'platform_id' => null,
        'game_mode' => null,
        'map_id' => 'int64',
        'game_type' => null,
        'banned_champions' => null,
        'observers' => null,
        'participants' => null,
        'game_length' => 'int64',
        'game_queue_config_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'game_id' => 'gameId',
        'game_start_time' => 'gameStartTime',
        'platform_id' => 'platformId',
        'game_mode' => 'gameMode',
        'map_id' => 'mapId',
        'game_type' => 'gameType',
        'banned_champions' => 'bannedChampions',
        'observers' => 'observers',
        'participants' => 'participants',
        'game_length' => 'gameLength',
        'game_queue_config_id' => 'gameQueueConfigId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'game_id' => 'setGameId',
        'game_start_time' => 'setGameStartTime',
        'platform_id' => 'setPlatformId',
        'game_mode' => 'setGameMode',
        'map_id' => 'setMapId',
        'game_type' => 'setGameType',
        'banned_champions' => 'setBannedChampions',
        'observers' => 'setObservers',
        'participants' => 'setParticipants',
        'game_length' => 'setGameLength',
        'game_queue_config_id' => 'setGameQueueConfigId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'game_id' => 'getGameId',
        'game_start_time' => 'getGameStartTime',
        'platform_id' => 'getPlatformId',
        'game_mode' => 'getGameMode',
        'map_id' => 'getMapId',
        'game_type' => 'getGameType',
        'banned_champions' => 'getBannedChampions',
        'observers' => 'getObservers',
        'participants' => 'getParticipants',
        'game_length' => 'getGameLength',
        'game_queue_config_id' => 'getGameQueueConfigId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GAME_MODE_CLASSIC = 'CLASSIC';
    const GAME_MODE_ODIN = 'ODIN';
    const GAME_MODE_ARAM = 'ARAM';
    const GAME_MODE_TUTORIAL = 'TUTORIAL';
    const GAME_MODE_ONEFORALL = 'ONEFORALL';
    const GAME_MODE_ASCENSION = 'ASCENSION';
    const GAME_MODE_FIRSTBLOOD = 'FIRSTBLOOD';
    const GAME_MODE_KINGPORO = 'KINGPORO';
    const GAME_TYPE_CUSTOM_GAME = 'CUSTOM_GAME';
    const GAME_TYPE_MATCHED_GAME = 'MATCHED_GAME';
    const GAME_TYPE_TUTORIAL_GAME = 'TUTORIAL_GAME';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGameModeAllowableValues()
    {
        return [
            self::GAME_MODE_CLASSIC,
            self::GAME_MODE_ODIN,
            self::GAME_MODE_ARAM,
            self::GAME_MODE_TUTORIAL,
            self::GAME_MODE_ONEFORALL,
            self::GAME_MODE_ASCENSION,
            self::GAME_MODE_FIRSTBLOOD,
            self::GAME_MODE_KINGPORO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGameTypeAllowableValues()
    {
        return [
            self::GAME_TYPE_CUSTOM_GAME,
            self::GAME_TYPE_MATCHED_GAME,
            self::GAME_TYPE_TUTORIAL_GAME,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['game_id'] = isset($data['game_id']) ? $data['game_id'] : null;
        $this->container['game_start_time'] = isset($data['game_start_time']) ? $data['game_start_time'] : null;
        $this->container['platform_id'] = isset($data['platform_id']) ? $data['platform_id'] : null;
        $this->container['game_mode'] = isset($data['game_mode']) ? $data['game_mode'] : null;
        $this->container['map_id'] = isset($data['map_id']) ? $data['map_id'] : null;
        $this->container['game_type'] = isset($data['game_type']) ? $data['game_type'] : null;
        $this->container['banned_champions'] = isset($data['banned_champions']) ? $data['banned_champions'] : null;
        $this->container['observers'] = isset($data['observers']) ? $data['observers'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['game_length'] = isset($data['game_length']) ? $data['game_length'] : null;
        $this->container['game_queue_config_id'] = isset($data['game_queue_config_id']) ? $data['game_queue_config_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGameModeAllowableValues();
        if (!is_null($this->container['game_mode']) && !in_array($this->container['game_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'game_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGameTypeAllowableValues();
        if (!is_null($this->container['game_type']) && !in_array($this->container['game_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'game_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets game_id
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param int $game_id The ID of the game
     *
     * @return $this
     */
    public function setGameId($game_id)
    {
        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets game_start_time
     *
     * @return int
     */
    public function getGameStartTime()
    {
        return $this->container['game_start_time'];
    }

    /**
     * Sets game_start_time
     *
     * @param int $game_start_time The game start time represented in epoch milliseconds
     *
     * @return $this
     */
    public function setGameStartTime($game_start_time)
    {
        $this->container['game_start_time'] = $game_start_time;

        return $this;
    }

    /**
     * Gets platform_id
     *
     * @return string
     */
    public function getPlatformId()
    {
        return $this->container['platform_id'];
    }

    /**
     * Sets platform_id
     *
     * @param string $platform_id The ID of the platform on which the game is being played
     *
     * @return $this
     */
    public function setPlatformId($platform_id)
    {
        $this->container['platform_id'] = $platform_id;

        return $this;
    }

    /**
     * Gets game_mode
     *
     * @return string
     */
    public function getGameMode()
    {
        return $this->container['game_mode'];
    }

    /**
     * Sets game_mode
     *
     * @param string $game_mode The game mode              (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)
     *
     * @return $this
     */
    public function setGameMode($game_mode)
    {
        $allowedValues = $this->getGameModeAllowableValues();
        if (!is_null($game_mode) && !in_array($game_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'game_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['game_mode'] = $game_mode;

        return $this;
    }

    /**
     * Gets map_id
     *
     * @return int
     */
    public function getMapId()
    {
        return $this->container['map_id'];
    }

    /**
     * Sets map_id
     *
     * @param int $map_id The ID of the map
     *
     * @return $this
     */
    public function setMapId($map_id)
    {
        $this->container['map_id'] = $map_id;

        return $this;
    }

    /**
     * Gets game_type
     *
     * @return string
     */
    public function getGameType()
    {
        return $this->container['game_type'];
    }

    /**
     * Sets game_type
     *
     * @param string $game_type The game type              (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)
     *
     * @return $this
     */
    public function setGameType($game_type)
    {
        $allowedValues = $this->getGameTypeAllowableValues();
        if (!is_null($game_type) && !in_array($game_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'game_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['game_type'] = $game_type;

        return $this;
    }

    /**
     * Gets banned_champions
     *
     * @return \Swagger\Client\Model\SpectatorV4BannedChampion[]
     */
    public function getBannedChampions()
    {
        return $this->container['banned_champions'];
    }

    /**
     * Sets banned_champions
     *
     * @param \Swagger\Client\Model\SpectatorV4BannedChampion[] $banned_champions Banned champion information
     *
     * @return $this
     */
    public function setBannedChampions($banned_champions)
    {
        $this->container['banned_champions'] = $banned_champions;

        return $this;
    }

    /**
     * Gets observers
     *
     * @return \Swagger\Client\Model\SpectatorV4Observer
     */
    public function getObservers()
    {
        return $this->container['observers'];
    }

    /**
     * Sets observers
     *
     * @param \Swagger\Client\Model\SpectatorV4Observer $observers The observer information
     *
     * @return $this
     */
    public function setObservers($observers)
    {
        $this->container['observers'] = $observers;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \Swagger\Client\Model\SpectatorV4Participant[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \Swagger\Client\Model\SpectatorV4Participant[] $participants The participant information
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets game_length
     *
     * @return int
     */
    public function getGameLength()
    {
        return $this->container['game_length'];
    }

    /**
     * Sets game_length
     *
     * @param int $game_length The amount of time in seconds that has passed since the game started
     *
     * @return $this
     */
    public function setGameLength($game_length)
    {
        $this->container['game_length'] = $game_length;

        return $this;
    }

    /**
     * Gets game_queue_config_id
     *
     * @return int
     */
    public function getGameQueueConfigId()
    {
        return $this->container['game_queue_config_id'];
    }

    /**
     * Sets game_queue_config_id
     *
     * @param int $game_queue_config_id The queue type (queue types are documented on the Game Constants page)
     *
     * @return $this
     */
    public function setGameQueueConfigId($game_queue_config_id)
    {
        $this->container['game_queue_config_id'] = $game_queue_config_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


