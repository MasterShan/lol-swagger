<?php
/**
 * MatchV4PlayerDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV4PlayerDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV4PlayerDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v4.PlayerDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'current_platform_id' => 'string',
        'summoner_name' => 'string',
        'match_history_uri' => 'string',
        'platform_id' => 'string',
        'current_account_id' => 'string',
        'profile_icon' => 'int',
        'summoner_id' => 'string',
        'account_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'current_platform_id' => null,
        'summoner_name' => null,
        'match_history_uri' => null,
        'platform_id' => null,
        'current_account_id' => null,
        'profile_icon' => 'int32',
        'summoner_id' => null,
        'account_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_platform_id' => 'currentPlatformId',
        'summoner_name' => 'summonerName',
        'match_history_uri' => 'matchHistoryUri',
        'platform_id' => 'platformId',
        'current_account_id' => 'currentAccountId',
        'profile_icon' => 'profileIcon',
        'summoner_id' => 'summonerId',
        'account_id' => 'accountId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_platform_id' => 'setCurrentPlatformId',
        'summoner_name' => 'setSummonerName',
        'match_history_uri' => 'setMatchHistoryUri',
        'platform_id' => 'setPlatformId',
        'current_account_id' => 'setCurrentAccountId',
        'profile_icon' => 'setProfileIcon',
        'summoner_id' => 'setSummonerId',
        'account_id' => 'setAccountId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_platform_id' => 'getCurrentPlatformId',
        'summoner_name' => 'getSummonerName',
        'match_history_uri' => 'getMatchHistoryUri',
        'platform_id' => 'getPlatformId',
        'current_account_id' => 'getCurrentAccountId',
        'profile_icon' => 'getProfileIcon',
        'summoner_id' => 'getSummonerId',
        'account_id' => 'getAccountId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_platform_id'] = isset($data['current_platform_id']) ? $data['current_platform_id'] : null;
        $this->container['summoner_name'] = isset($data['summoner_name']) ? $data['summoner_name'] : null;
        $this->container['match_history_uri'] = isset($data['match_history_uri']) ? $data['match_history_uri'] : null;
        $this->container['platform_id'] = isset($data['platform_id']) ? $data['platform_id'] : null;
        $this->container['current_account_id'] = isset($data['current_account_id']) ? $data['current_account_id'] : null;
        $this->container['profile_icon'] = isset($data['profile_icon']) ? $data['profile_icon'] : null;
        $this->container['summoner_id'] = isset($data['summoner_id']) ? $data['summoner_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_platform_id
     *
     * @return string
     */
    public function getCurrentPlatformId()
    {
        return $this->container['current_platform_id'];
    }

    /**
     * Sets current_platform_id
     *
     * @param string $current_platform_id current_platform_id
     *
     * @return $this
     */
    public function setCurrentPlatformId($current_platform_id)
    {
        $this->container['current_platform_id'] = $current_platform_id;

        return $this;
    }

    /**
     * Gets summoner_name
     *
     * @return string
     */
    public function getSummonerName()
    {
        return $this->container['summoner_name'];
    }

    /**
     * Sets summoner_name
     *
     * @param string $summoner_name summoner_name
     *
     * @return $this
     */
    public function setSummonerName($summoner_name)
    {
        $this->container['summoner_name'] = $summoner_name;

        return $this;
    }

    /**
     * Gets match_history_uri
     *
     * @return string
     */
    public function getMatchHistoryUri()
    {
        return $this->container['match_history_uri'];
    }

    /**
     * Sets match_history_uri
     *
     * @param string $match_history_uri match_history_uri
     *
     * @return $this
     */
    public function setMatchHistoryUri($match_history_uri)
    {
        $this->container['match_history_uri'] = $match_history_uri;

        return $this;
    }

    /**
     * Gets platform_id
     *
     * @return string
     */
    public function getPlatformId()
    {
        return $this->container['platform_id'];
    }

    /**
     * Sets platform_id
     *
     * @param string $platform_id Original platformId.
     *
     * @return $this
     */
    public function setPlatformId($platform_id)
    {
        $this->container['platform_id'] = $platform_id;

        return $this;
    }

    /**
     * Gets current_account_id
     *
     * @return string
     */
    public function getCurrentAccountId()
    {
        return $this->container['current_account_id'];
    }

    /**
     * Sets current_account_id
     *
     * @param string $current_account_id Player's current accountId (Encrypted)
     *
     * @return $this
     */
    public function setCurrentAccountId($current_account_id)
    {
        $this->container['current_account_id'] = $current_account_id;

        return $this;
    }

    /**
     * Gets profile_icon
     *
     * @return int
     */
    public function getProfileIcon()
    {
        return $this->container['profile_icon'];
    }

    /**
     * Sets profile_icon
     *
     * @param int $profile_icon profile_icon
     *
     * @return $this
     */
    public function setProfileIcon($profile_icon)
    {
        $this->container['profile_icon'] = $profile_icon;

        return $this;
    }

    /**
     * Gets summoner_id
     *
     * @return string
     */
    public function getSummonerId()
    {
        return $this->container['summoner_id'];
    }

    /**
     * Sets summoner_id
     *
     * @param string $summoner_id Player's summonerId (Encrypted)
     *
     * @return $this
     */
    public function setSummonerId($summoner_id)
    {
        $this->container['summoner_id'] = $summoner_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id Player's original accountId (Encrypted)
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


