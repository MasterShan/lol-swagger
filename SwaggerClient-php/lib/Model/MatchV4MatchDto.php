<?php
/**
 * MatchV4MatchDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV4MatchDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV4MatchDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v4.MatchDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'season_id' => 'int',
        'queue_id' => 'int',
        'game_id' => 'int',
        'participant_identities' => '\Swagger\Client\Model\MatchV4ParticipantIdentityDto[]',
        'game_version' => 'string',
        'platform_id' => 'string',
        'game_mode' => 'string',
        'map_id' => 'int',
        'game_type' => 'string',
        'teams' => '\Swagger\Client\Model\MatchV4TeamStatsDto[]',
        'participants' => '\Swagger\Client\Model\MatchV4ParticipantDto[]',
        'game_duration' => 'int',
        'game_creation' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'season_id' => 'int32',
        'queue_id' => 'int32',
        'game_id' => 'int64',
        'participant_identities' => null,
        'game_version' => null,
        'platform_id' => null,
        'game_mode' => null,
        'map_id' => 'int32',
        'game_type' => null,
        'teams' => null,
        'participants' => null,
        'game_duration' => 'int64',
        'game_creation' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'season_id' => 'seasonId',
        'queue_id' => 'queueId',
        'game_id' => 'gameId',
        'participant_identities' => 'participantIdentities',
        'game_version' => 'gameVersion',
        'platform_id' => 'platformId',
        'game_mode' => 'gameMode',
        'map_id' => 'mapId',
        'game_type' => 'gameType',
        'teams' => 'teams',
        'participants' => 'participants',
        'game_duration' => 'gameDuration',
        'game_creation' => 'gameCreation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'season_id' => 'setSeasonId',
        'queue_id' => 'setQueueId',
        'game_id' => 'setGameId',
        'participant_identities' => 'setParticipantIdentities',
        'game_version' => 'setGameVersion',
        'platform_id' => 'setPlatformId',
        'game_mode' => 'setGameMode',
        'map_id' => 'setMapId',
        'game_type' => 'setGameType',
        'teams' => 'setTeams',
        'participants' => 'setParticipants',
        'game_duration' => 'setGameDuration',
        'game_creation' => 'setGameCreation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'season_id' => 'getSeasonId',
        'queue_id' => 'getQueueId',
        'game_id' => 'getGameId',
        'participant_identities' => 'getParticipantIdentities',
        'game_version' => 'getGameVersion',
        'platform_id' => 'getPlatformId',
        'game_mode' => 'getGameMode',
        'map_id' => 'getMapId',
        'game_type' => 'getGameType',
        'teams' => 'getTeams',
        'participants' => 'getParticipants',
        'game_duration' => 'getGameDuration',
        'game_creation' => 'getGameCreation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['season_id'] = isset($data['season_id']) ? $data['season_id'] : null;
        $this->container['queue_id'] = isset($data['queue_id']) ? $data['queue_id'] : null;
        $this->container['game_id'] = isset($data['game_id']) ? $data['game_id'] : null;
        $this->container['participant_identities'] = isset($data['participant_identities']) ? $data['participant_identities'] : null;
        $this->container['game_version'] = isset($data['game_version']) ? $data['game_version'] : null;
        $this->container['platform_id'] = isset($data['platform_id']) ? $data['platform_id'] : null;
        $this->container['game_mode'] = isset($data['game_mode']) ? $data['game_mode'] : null;
        $this->container['map_id'] = isset($data['map_id']) ? $data['map_id'] : null;
        $this->container['game_type'] = isset($data['game_type']) ? $data['game_type'] : null;
        $this->container['teams'] = isset($data['teams']) ? $data['teams'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['game_duration'] = isset($data['game_duration']) ? $data['game_duration'] : null;
        $this->container['game_creation'] = isset($data['game_creation']) ? $data['game_creation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets season_id
     *
     * @return int
     */
    public function getSeasonId()
    {
        return $this->container['season_id'];
    }

    /**
     * Sets season_id
     *
     * @param int $season_id Please refer to the Game Constants documentation.
     *
     * @return $this
     */
    public function setSeasonId($season_id)
    {
        $this->container['season_id'] = $season_id;

        return $this;
    }

    /**
     * Gets queue_id
     *
     * @return int
     */
    public function getQueueId()
    {
        return $this->container['queue_id'];
    }

    /**
     * Sets queue_id
     *
     * @param int $queue_id Please refer to the Game Constants documentation.
     *
     * @return $this
     */
    public function setQueueId($queue_id)
    {
        $this->container['queue_id'] = $queue_id;

        return $this;
    }

    /**
     * Gets game_id
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param int $game_id game_id
     *
     * @return $this
     */
    public function setGameId($game_id)
    {
        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets participant_identities
     *
     * @return \Swagger\Client\Model\MatchV4ParticipantIdentityDto[]
     */
    public function getParticipantIdentities()
    {
        return $this->container['participant_identities'];
    }

    /**
     * Sets participant_identities
     *
     * @param \Swagger\Client\Model\MatchV4ParticipantIdentityDto[] $participant_identities Participant identity information.
     *
     * @return $this
     */
    public function setParticipantIdentities($participant_identities)
    {
        $this->container['participant_identities'] = $participant_identities;

        return $this;
    }

    /**
     * Gets game_version
     *
     * @return string
     */
    public function getGameVersion()
    {
        return $this->container['game_version'];
    }

    /**
     * Sets game_version
     *
     * @param string $game_version The major.minor version typically indicates the patch the match was played on.
     *
     * @return $this
     */
    public function setGameVersion($game_version)
    {
        $this->container['game_version'] = $game_version;

        return $this;
    }

    /**
     * Gets platform_id
     *
     * @return string
     */
    public function getPlatformId()
    {
        return $this->container['platform_id'];
    }

    /**
     * Sets platform_id
     *
     * @param string $platform_id Platform where the match was played.
     *
     * @return $this
     */
    public function setPlatformId($platform_id)
    {
        $this->container['platform_id'] = $platform_id;

        return $this;
    }

    /**
     * Gets game_mode
     *
     * @return string
     */
    public function getGameMode()
    {
        return $this->container['game_mode'];
    }

    /**
     * Sets game_mode
     *
     * @param string $game_mode Please refer to the Game Constants documentation.
     *
     * @return $this
     */
    public function setGameMode($game_mode)
    {
        $this->container['game_mode'] = $game_mode;

        return $this;
    }

    /**
     * Gets map_id
     *
     * @return int
     */
    public function getMapId()
    {
        return $this->container['map_id'];
    }

    /**
     * Sets map_id
     *
     * @param int $map_id Please refer to the Game Constants documentation.
     *
     * @return $this
     */
    public function setMapId($map_id)
    {
        $this->container['map_id'] = $map_id;

        return $this;
    }

    /**
     * Gets game_type
     *
     * @return string
     */
    public function getGameType()
    {
        return $this->container['game_type'];
    }

    /**
     * Sets game_type
     *
     * @param string $game_type Please refer to the Game Constants documentation.
     *
     * @return $this
     */
    public function setGameType($game_type)
    {
        $this->container['game_type'] = $game_type;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \Swagger\Client\Model\MatchV4TeamStatsDto[]
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \Swagger\Client\Model\MatchV4TeamStatsDto[] $teams Team information.
     *
     * @return $this
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \Swagger\Client\Model\MatchV4ParticipantDto[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \Swagger\Client\Model\MatchV4ParticipantDto[] $participants Participant information.
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets game_duration
     *
     * @return int
     */
    public function getGameDuration()
    {
        return $this->container['game_duration'];
    }

    /**
     * Sets game_duration
     *
     * @param int $game_duration Match duration in seconds.
     *
     * @return $this
     */
    public function setGameDuration($game_duration)
    {
        $this->container['game_duration'] = $game_duration;

        return $this;
    }

    /**
     * Gets game_creation
     *
     * @return int
     */
    public function getGameCreation()
    {
        return $this->container['game_creation'];
    }

    /**
     * Sets game_creation
     *
     * @param int $game_creation Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00.
     *
     * @return $this
     */
    public function setGameCreation($game_creation)
    {
        $this->container['game_creation'] = $game_creation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


