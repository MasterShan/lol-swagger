<?php
/**
 * MatchV4MatchParticipantFrameDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Riot API
 *
 * OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. ***
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchV4MatchParticipantFrameDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchV4MatchParticipantFrameDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'match-v4.MatchParticipantFrameDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_gold' => 'int',
        'team_score' => 'int',
        'participant_id' => 'int',
        'level' => 'int',
        'current_gold' => 'int',
        'minions_killed' => 'int',
        'dominion_score' => 'int',
        'position' => '\Swagger\Client\Model\MatchV4MatchPositionDto',
        'xp' => 'int',
        'jungle_minions_killed' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_gold' => 'int32',
        'team_score' => 'int32',
        'participant_id' => 'int32',
        'level' => 'int32',
        'current_gold' => 'int32',
        'minions_killed' => 'int32',
        'dominion_score' => 'int32',
        'position' => null,
        'xp' => 'int32',
        'jungle_minions_killed' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_gold' => 'totalGold',
        'team_score' => 'teamScore',
        'participant_id' => 'participantId',
        'level' => 'level',
        'current_gold' => 'currentGold',
        'minions_killed' => 'minionsKilled',
        'dominion_score' => 'dominionScore',
        'position' => 'position',
        'xp' => 'xp',
        'jungle_minions_killed' => 'jungleMinionsKilled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_gold' => 'setTotalGold',
        'team_score' => 'setTeamScore',
        'participant_id' => 'setParticipantId',
        'level' => 'setLevel',
        'current_gold' => 'setCurrentGold',
        'minions_killed' => 'setMinionsKilled',
        'dominion_score' => 'setDominionScore',
        'position' => 'setPosition',
        'xp' => 'setXp',
        'jungle_minions_killed' => 'setJungleMinionsKilled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_gold' => 'getTotalGold',
        'team_score' => 'getTeamScore',
        'participant_id' => 'getParticipantId',
        'level' => 'getLevel',
        'current_gold' => 'getCurrentGold',
        'minions_killed' => 'getMinionsKilled',
        'dominion_score' => 'getDominionScore',
        'position' => 'getPosition',
        'xp' => 'getXp',
        'jungle_minions_killed' => 'getJungleMinionsKilled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_gold'] = isset($data['total_gold']) ? $data['total_gold'] : null;
        $this->container['team_score'] = isset($data['team_score']) ? $data['team_score'] : null;
        $this->container['participant_id'] = isset($data['participant_id']) ? $data['participant_id'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['current_gold'] = isset($data['current_gold']) ? $data['current_gold'] : null;
        $this->container['minions_killed'] = isset($data['minions_killed']) ? $data['minions_killed'] : null;
        $this->container['dominion_score'] = isset($data['dominion_score']) ? $data['dominion_score'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['xp'] = isset($data['xp']) ? $data['xp'] : null;
        $this->container['jungle_minions_killed'] = isset($data['jungle_minions_killed']) ? $data['jungle_minions_killed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_gold
     *
     * @return int
     */
    public function getTotalGold()
    {
        return $this->container['total_gold'];
    }

    /**
     * Sets total_gold
     *
     * @param int $total_gold total_gold
     *
     * @return $this
     */
    public function setTotalGold($total_gold)
    {
        $this->container['total_gold'] = $total_gold;

        return $this;
    }

    /**
     * Gets team_score
     *
     * @return int
     */
    public function getTeamScore()
    {
        return $this->container['team_score'];
    }

    /**
     * Sets team_score
     *
     * @param int $team_score team_score
     *
     * @return $this
     */
    public function setTeamScore($team_score)
    {
        $this->container['team_score'] = $team_score;

        return $this;
    }

    /**
     * Gets participant_id
     *
     * @return int
     */
    public function getParticipantId()
    {
        return $this->container['participant_id'];
    }

    /**
     * Sets participant_id
     *
     * @param int $participant_id participant_id
     *
     * @return $this
     */
    public function setParticipantId($participant_id)
    {
        $this->container['participant_id'] = $participant_id;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets current_gold
     *
     * @return int
     */
    public function getCurrentGold()
    {
        return $this->container['current_gold'];
    }

    /**
     * Sets current_gold
     *
     * @param int $current_gold current_gold
     *
     * @return $this
     */
    public function setCurrentGold($current_gold)
    {
        $this->container['current_gold'] = $current_gold;

        return $this;
    }

    /**
     * Gets minions_killed
     *
     * @return int
     */
    public function getMinionsKilled()
    {
        return $this->container['minions_killed'];
    }

    /**
     * Sets minions_killed
     *
     * @param int $minions_killed minions_killed
     *
     * @return $this
     */
    public function setMinionsKilled($minions_killed)
    {
        $this->container['minions_killed'] = $minions_killed;

        return $this;
    }

    /**
     * Gets dominion_score
     *
     * @return int
     */
    public function getDominionScore()
    {
        return $this->container['dominion_score'];
    }

    /**
     * Sets dominion_score
     *
     * @param int $dominion_score dominion_score
     *
     * @return $this
     */
    public function setDominionScore($dominion_score)
    {
        $this->container['dominion_score'] = $dominion_score;

        return $this;
    }

    /**
     * Gets position
     *
     * @return \Swagger\Client\Model\MatchV4MatchPositionDto
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param \Swagger\Client\Model\MatchV4MatchPositionDto $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets xp
     *
     * @return int
     */
    public function getXp()
    {
        return $this->container['xp'];
    }

    /**
     * Sets xp
     *
     * @param int $xp xp
     *
     * @return $this
     */
    public function setXp($xp)
    {
        $this->container['xp'] = $xp;

        return $this;
    }

    /**
     * Gets jungle_minions_killed
     *
     * @return int
     */
    public function getJungleMinionsKilled()
    {
        return $this->container['jungle_minions_killed'];
    }

    /**
     * Sets jungle_minions_killed
     *
     * @param int $jungle_minions_killed jungle_minions_killed
     *
     * @return $this
     */
    public function setJungleMinionsKilled($jungle_minions_killed)
    {
        $this->container['jungle_minions_killed'] = $jungle_minions_killed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


