/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SpectatorV4BannedChampion', 'model/SpectatorV4CurrentGameParticipant', 'model/SpectatorV4Observer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SpectatorV4BannedChampion'), require('./SpectatorV4CurrentGameParticipant'), require('./SpectatorV4Observer'));
  } else {
    // Browser globals (root is window)
    if (!root.RiotApi) {
      root.RiotApi = {};
    }
    root.RiotApi.SpectatorV4CurrentGameInfo = factory(root.RiotApi.ApiClient, root.RiotApi.SpectatorV4BannedChampion, root.RiotApi.SpectatorV4CurrentGameParticipant, root.RiotApi.SpectatorV4Observer);
  }
}(this, function(ApiClient, SpectatorV4BannedChampion, SpectatorV4CurrentGameParticipant, SpectatorV4Observer) {
  'use strict';




  /**
   * The SpectatorV4CurrentGameInfo model module.
   * @module model/SpectatorV4CurrentGameInfo
   * @version dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
   */

  /**
   * Constructs a new <code>SpectatorV4CurrentGameInfo</code>.
   * @alias module:model/SpectatorV4CurrentGameInfo
   * @class
   */
  var exports = function() {
    var _this = this;












  };

  /**
   * Constructs a <code>SpectatorV4CurrentGameInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SpectatorV4CurrentGameInfo} obj Optional instance to populate.
   * @return {module:model/SpectatorV4CurrentGameInfo} The populated <code>SpectatorV4CurrentGameInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('gameId')) {
        obj['gameId'] = ApiClient.convertToType(data['gameId'], 'Number');
      }
      if (data.hasOwnProperty('gameStartTime')) {
        obj['gameStartTime'] = ApiClient.convertToType(data['gameStartTime'], 'Number');
      }
      if (data.hasOwnProperty('platformId')) {
        obj['platformId'] = ApiClient.convertToType(data['platformId'], 'String');
      }
      if (data.hasOwnProperty('gameMode')) {
        obj['gameMode'] = ApiClient.convertToType(data['gameMode'], 'String');
      }
      if (data.hasOwnProperty('mapId')) {
        obj['mapId'] = ApiClient.convertToType(data['mapId'], 'Number');
      }
      if (data.hasOwnProperty('gameType')) {
        obj['gameType'] = ApiClient.convertToType(data['gameType'], 'String');
      }
      if (data.hasOwnProperty('bannedChampions')) {
        obj['bannedChampions'] = ApiClient.convertToType(data['bannedChampions'], [SpectatorV4BannedChampion]);
      }
      if (data.hasOwnProperty('observers')) {
        obj['observers'] = SpectatorV4Observer.constructFromObject(data['observers']);
      }
      if (data.hasOwnProperty('participants')) {
        obj['participants'] = ApiClient.convertToType(data['participants'], [SpectatorV4CurrentGameParticipant]);
      }
      if (data.hasOwnProperty('gameLength')) {
        obj['gameLength'] = ApiClient.convertToType(data['gameLength'], 'Number');
      }
      if (data.hasOwnProperty('gameQueueConfigId')) {
        obj['gameQueueConfigId'] = ApiClient.convertToType(data['gameQueueConfigId'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The ID of the game
   * @member {Number} gameId
   */
  exports.prototype['gameId'] = undefined;
  /**
   * The game start time represented in epoch milliseconds
   * @member {Number} gameStartTime
   */
  exports.prototype['gameStartTime'] = undefined;
  /**
   * The ID of the platform on which the game is being played
   * @member {String} platformId
   */
  exports.prototype['platformId'] = undefined;
  /**
   * The game mode
   * @member {String} gameMode
   */
  exports.prototype['gameMode'] = undefined;
  /**
   * The ID of the map
   * @member {Number} mapId
   */
  exports.prototype['mapId'] = undefined;
  /**
   * The game type
   * @member {String} gameType
   */
  exports.prototype['gameType'] = undefined;
  /**
   * Banned champion information
   * @member {Array.<module:model/SpectatorV4BannedChampion>} bannedChampions
   */
  exports.prototype['bannedChampions'] = undefined;
  /**
   * The observer information
   * @member {module:model/SpectatorV4Observer} observers
   */
  exports.prototype['observers'] = undefined;
  /**
   * The participant information
   * @member {Array.<module:model/SpectatorV4CurrentGameParticipant>} participants
   */
  exports.prototype['participants'] = undefined;
  /**
   * The amount of time in seconds that has passed since the game started
   * @member {Number} gameLength
   */
  exports.prototype['gameLength'] = undefined;
  /**
   * The queue type (queue types are documented on the Game Constants page)
   * @member {Number} gameQueueConfigId
   */
  exports.prototype['gameQueueConfigId'] = undefined;



  return exports;
}));


