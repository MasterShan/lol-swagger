/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MatchV4MasteryDto', 'model/MatchV4ParticipantStatsDto', 'model/MatchV4ParticipantTimelineDto', 'model/MatchV4RuneDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MatchV4MasteryDto'), require('./MatchV4ParticipantStatsDto'), require('./MatchV4ParticipantTimelineDto'), require('./MatchV4RuneDto'));
  } else {
    // Browser globals (root is window)
    if (!root.RiotApi) {
      root.RiotApi = {};
    }
    root.RiotApi.MatchV4ParticipantDto = factory(root.RiotApi.ApiClient, root.RiotApi.MatchV4MasteryDto, root.RiotApi.MatchV4ParticipantStatsDto, root.RiotApi.MatchV4ParticipantTimelineDto, root.RiotApi.MatchV4RuneDto);
  }
}(this, function(ApiClient, MatchV4MasteryDto, MatchV4ParticipantStatsDto, MatchV4ParticipantTimelineDto, MatchV4RuneDto) {
  'use strict';




  /**
   * The MatchV4ParticipantDto model module.
   * @module model/MatchV4ParticipantDto
   * @version dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
   */

  /**
   * Constructs a new <code>MatchV4ParticipantDto</code>.
   * @alias module:model/MatchV4ParticipantDto
   * @class
   */
  var exports = function() {
    var _this = this;











  };

  /**
   * Constructs a <code>MatchV4ParticipantDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MatchV4ParticipantDto} obj Optional instance to populate.
   * @return {module:model/MatchV4ParticipantDto} The populated <code>MatchV4ParticipantDto</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('stats')) {
        obj['stats'] = MatchV4ParticipantStatsDto.constructFromObject(data['stats']);
      }
      if (data.hasOwnProperty('participantId')) {
        obj['participantId'] = ApiClient.convertToType(data['participantId'], 'Number');
      }
      if (data.hasOwnProperty('runes')) {
        obj['runes'] = ApiClient.convertToType(data['runes'], [MatchV4RuneDto]);
      }
      if (data.hasOwnProperty('timeline')) {
        obj['timeline'] = MatchV4ParticipantTimelineDto.constructFromObject(data['timeline']);
      }
      if (data.hasOwnProperty('teamId')) {
        obj['teamId'] = ApiClient.convertToType(data['teamId'], 'Number');
      }
      if (data.hasOwnProperty('spell2Id')) {
        obj['spell2Id'] = ApiClient.convertToType(data['spell2Id'], 'Number');
      }
      if (data.hasOwnProperty('masteries')) {
        obj['masteries'] = ApiClient.convertToType(data['masteries'], [MatchV4MasteryDto]);
      }
      if (data.hasOwnProperty('highestAchievedSeasonTier')) {
        obj['highestAchievedSeasonTier'] = ApiClient.convertToType(data['highestAchievedSeasonTier'], 'String');
      }
      if (data.hasOwnProperty('spell1Id')) {
        obj['spell1Id'] = ApiClient.convertToType(data['spell1Id'], 'Number');
      }
      if (data.hasOwnProperty('championId')) {
        obj['championId'] = ApiClient.convertToType(data['championId'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Participant statistics.
   * @member {module:model/MatchV4ParticipantStatsDto} stats
   */
  exports.prototype['stats'] = undefined;
  /**
   * @member {Number} participantId
   */
  exports.prototype['participantId'] = undefined;
  /**
   * List of legacy Rune information. Not included for matches played with Runes Reforged.
   * @member {Array.<module:model/MatchV4RuneDto>} runes
   */
  exports.prototype['runes'] = undefined;
  /**
   * Participant timeline data.
   * @member {module:model/MatchV4ParticipantTimelineDto} timeline
   */
  exports.prototype['timeline'] = undefined;
  /**
   * 100 for blue side. 200 for red side.
   * @member {Number} teamId
   */
  exports.prototype['teamId'] = undefined;
  /**
   * Second Summoner Spell id.
   * @member {Number} spell2Id
   */
  exports.prototype['spell2Id'] = undefined;
  /**
   * List of legacy Mastery information. Not included for matches played with Runes Reforged.
   * @member {Array.<module:model/MatchV4MasteryDto>} masteries
   */
  exports.prototype['masteries'] = undefined;
  /**
   * Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.              (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
   * @member {module:model/MatchV4ParticipantDto.HighestAchievedSeasonTierEnum} highestAchievedSeasonTier
   */
  exports.prototype['highestAchievedSeasonTier'] = undefined;
  /**
   * First Summoner Spell id.
   * @member {Number} spell1Id
   */
  exports.prototype['spell1Id'] = undefined;
  /**
   * @member {Number} championId
   */
  exports.prototype['championId'] = undefined;


  /**
   * Allowed values for the <code>highestAchievedSeasonTier</code> property.
   * @enum {String}
   * @readonly
   */
  exports.HighestAchievedSeasonTierEnum = {
    /**
     * value: "CHALLENGER"
     * @const
     */
    "CHALLENGER": "CHALLENGER",
    /**
     * value: "MASTER"
     * @const
     */
    "MASTER": "MASTER",
    /**
     * value: "DIAMOND"
     * @const
     */
    "DIAMOND": "DIAMOND",
    /**
     * value: "PLATINUM"
     * @const
     */
    "PLATINUM": "PLATINUM",
    /**
     * value: "GOLD"
     * @const
     */
    "GOLD": "GOLD",
    /**
     * value: "SILVER"
     * @const
     */
    "SILVER": "SILVER",
    /**
     * value: "BRONZE"
     * @const
     */
    "BRONZE": "BRONZE",
    /**
     * value: "UNRANKED"
     * @const
     */
    "UNRANKED": "UNRANKED"  };


  return exports;
}));


