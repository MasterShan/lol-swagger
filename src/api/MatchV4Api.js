/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MatchV4MatchDto', 'model/MatchV4MatchTimelineDto', 'model/MatchV4MatchlistDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/MatchV4MatchDto'), require('../model/MatchV4MatchTimelineDto'), require('../model/MatchV4MatchlistDto'));
  } else {
    // Browser globals (root is window)
    if (!root.RiotApi) {
      root.RiotApi = {};
    }
    root.RiotApi.MatchV4Api = factory(root.RiotApi.ApiClient, root.RiotApi.MatchV4MatchDto, root.RiotApi.MatchV4MatchTimelineDto, root.RiotApi.MatchV4MatchlistDto);
  }
}(this, function(ApiClient, MatchV4MatchDto, MatchV4MatchTimelineDto, MatchV4MatchlistDto) {
  'use strict';

  /**
   * MatchV4 service.
   * @module api/MatchV4Api
   * @version dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
   */

  /**
   * Constructs a new MatchV4Api. 
   * @alias module:api/MatchV4Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the matchV4GetMatch operation.
     * @callback module:api/MatchV4Api~matchV4GetMatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatchV4MatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get match by match ID.
     * Get match by match ID.
     * @param {Number} matchId The match ID.
     * @param {module:api/MatchV4Api~matchV4GetMatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatchV4MatchDto}
     */
    this.matchV4GetMatch = function(matchId, callback) {
      var postBody = null;

      // verify the required parameter 'matchId' is set
      if (matchId === undefined || matchId === null) {
        throw new Error("Missing the required parameter 'matchId' when calling matchV4GetMatch");
      }


      var pathParams = {
        'matchId': matchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MatchV4MatchDto;

      return this.apiClient.callApi(
        '/lol/match/v4/matches/{matchId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the matchV4GetMatchByTournamentCode operation.
     * @callback module:api/MatchV4Api~matchV4GetMatchByTournamentCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatchV4MatchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get match by match ID and tournament code.
     * Get match by match ID and tournament code.
     * @param {String} tournamentCode The tournament code.
     * @param {Number} matchId The match ID.
     * @param {module:api/MatchV4Api~matchV4GetMatchByTournamentCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatchV4MatchDto}
     */
    this.matchV4GetMatchByTournamentCode = function(tournamentCode, matchId, callback) {
      var postBody = null;

      // verify the required parameter 'tournamentCode' is set
      if (tournamentCode === undefined || tournamentCode === null) {
        throw new Error("Missing the required parameter 'tournamentCode' when calling matchV4GetMatchByTournamentCode");
      }

      // verify the required parameter 'matchId' is set
      if (matchId === undefined || matchId === null) {
        throw new Error("Missing the required parameter 'matchId' when calling matchV4GetMatchByTournamentCode");
      }


      var pathParams = {
        'tournamentCode': tournamentCode,
        'matchId': matchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MatchV4MatchDto;

      return this.apiClient.callApi(
        '/lol/match/v4/matches/{matchId}/by-tournament-code/{tournamentCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the matchV4GetMatchIdsByTournamentCode operation.
     * @callback module:api/MatchV4Api~matchV4GetMatchIdsByTournamentCodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get match IDs by tournament code.
     * Get match IDs by tournament code.
     * @param {String} tournamentCode The tournament code.
     * @param {module:api/MatchV4Api~matchV4GetMatchIdsByTournamentCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.matchV4GetMatchIdsByTournamentCode = function(tournamentCode, callback) {
      var postBody = null;

      // verify the required parameter 'tournamentCode' is set
      if (tournamentCode === undefined || tournamentCode === null) {
        throw new Error("Missing the required parameter 'tournamentCode' when calling matchV4GetMatchIdsByTournamentCode");
      }


      var pathParams = {
        'tournamentCode': tournamentCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/lol/match/v4/matches/by-tournament-code/{tournamentCode}/ids', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the matchV4GetMatchTimeline operation.
     * @callback module:api/MatchV4Api~matchV4GetMatchTimelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatchV4MatchTimelineDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get match timeline by match ID.
     * Get match timeline by match ID. ## Implementation Notes Not all matches have timeline data.
     * @param {Number} matchId The match ID.
     * @param {module:api/MatchV4Api~matchV4GetMatchTimelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatchV4MatchTimelineDto}
     */
    this.matchV4GetMatchTimeline = function(matchId, callback) {
      var postBody = null;

      // verify the required parameter 'matchId' is set
      if (matchId === undefined || matchId === null) {
        throw new Error("Missing the required parameter 'matchId' when calling matchV4GetMatchTimeline");
      }


      var pathParams = {
        'matchId': matchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MatchV4MatchTimelineDto;

      return this.apiClient.callApi(
        '/lol/match/v4/timelines/by-match/{matchId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the matchV4GetMatchlist operation.
     * @callback module:api/MatchV4Api~matchV4GetMatchlistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatchV4MatchlistDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.
     * Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any. ## Implementation Notes A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.  If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account&#39;s match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
     * @param {String} encryptedAccountId The account ID.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.champion Set of champion IDs for filtering the matchlist.
     * @param {Array.<Number>} opts.queue Set of queue IDs for filtering the matchlist.
     * @param {Array.<Number>} opts.season Set of season IDs for filtering the matchlist.
     * @param {Number} opts.endTime The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account&#39;s match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
     * @param {Number} opts.beginTime The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account&#39;s match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
     * @param {Number} opts.endIndex The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.
     * @param {Number} opts.beginIndex The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.
     * @param {module:api/MatchV4Api~matchV4GetMatchlistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatchV4MatchlistDto}
     */
    this.matchV4GetMatchlist = function(encryptedAccountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'encryptedAccountId' is set
      if (encryptedAccountId === undefined || encryptedAccountId === null) {
        throw new Error("Missing the required parameter 'encryptedAccountId' when calling matchV4GetMatchlist");
      }


      var pathParams = {
        'encryptedAccountId': encryptedAccountId
      };
      var queryParams = {
        'endTime': opts['endTime'],
        'beginTime': opts['beginTime'],
        'endIndex': opts['endIndex'],
        'beginIndex': opts['beginIndex'],
      };
      var collectionQueryParams = {
        'champion': {
          value: opts['champion'],
          collectionFormat: 'csv'
        },
        'queue': {
          value: opts['queue'],
          collectionFormat: 'csv'
        },
        'season': {
          value: opts['season'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MatchV4MatchlistDto;

      return this.apiClient.callApi(
        '/lol/match/v4/matchlists/by-account/{encryptedAccountId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
