/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TournamentV4LobbyEventDTOWrapper', 'model/TournamentV4ProviderRegistrationParameters', 'model/TournamentV4TournamentCodeDTO', 'model/TournamentV4TournamentCodeParameters', 'model/TournamentV4TournamentCodeUpdateParameters', 'model/TournamentV4TournamentRegistrationParameters'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/TournamentV4LobbyEventDTOWrapper'), require('../model/TournamentV4ProviderRegistrationParameters'), require('../model/TournamentV4TournamentCodeDTO'), require('../model/TournamentV4TournamentCodeParameters'), require('../model/TournamentV4TournamentCodeUpdateParameters'), require('../model/TournamentV4TournamentRegistrationParameters'));
  } else {
    // Browser globals (root is window)
    if (!root.RiotApi) {
      root.RiotApi = {};
    }
    root.RiotApi.TournamentV4Api = factory(root.RiotApi.ApiClient, root.RiotApi.TournamentV4LobbyEventDTOWrapper, root.RiotApi.TournamentV4ProviderRegistrationParameters, root.RiotApi.TournamentV4TournamentCodeDTO, root.RiotApi.TournamentV4TournamentCodeParameters, root.RiotApi.TournamentV4TournamentCodeUpdateParameters, root.RiotApi.TournamentV4TournamentRegistrationParameters);
  }
}(this, function(ApiClient, TournamentV4LobbyEventDTOWrapper, TournamentV4ProviderRegistrationParameters, TournamentV4TournamentCodeDTO, TournamentV4TournamentCodeParameters, TournamentV4TournamentCodeUpdateParameters, TournamentV4TournamentRegistrationParameters) {
  'use strict';

  /**
   * TournamentV4 service.
   * @module api/TournamentV4Api
   * @version dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
   */

  /**
   * Constructs a new TournamentV4Api. 
   * @alias module:api/TournamentV4Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the tournamentV4CreateTournamentCode operation.
     * @callback module:api/TournamentV4Api~tournamentV4CreateTournamentCodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a tournament code for the given tournament.
     * Create a tournament code for the given tournament.
     * @param {Number} tournamentId The tournament ID
     * @param {module:model/TournamentV4TournamentCodeParameters} tournamentCodeParameters Metadata for the generated code
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of codes to create (max 1000)
     * @param {module:api/TournamentV4Api~tournamentV4CreateTournamentCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.tournamentV4CreateTournamentCode = function(tournamentId, tournamentCodeParameters, opts, callback) {
      opts = opts || {};
      var postBody = tournamentCodeParameters;

      // verify the required parameter 'tournamentId' is set
      if (tournamentId === undefined || tournamentId === null) {
        throw new Error("Missing the required parameter 'tournamentId' when calling tournamentV4CreateTournamentCode");
      }

      // verify the required parameter 'tournamentCodeParameters' is set
      if (tournamentCodeParameters === undefined || tournamentCodeParameters === null) {
        throw new Error("Missing the required parameter 'tournamentCodeParameters' when calling tournamentV4CreateTournamentCode");
      }


      var pathParams = {
      };
      var queryParams = {
        'count': opts['count'],
        'tournamentId': tournamentId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/lol/tournament/v4/codes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentV4GetLobbyEventsByCode operation.
     * @callback module:api/TournamentV4Api~tournamentV4GetLobbyEventsByCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TournamentV4LobbyEventDTOWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of lobby events by tournament code.
     * Gets a list of lobby events by tournament code.
     * @param {String} tournamentCode The short code to look up lobby events for
     * @param {module:api/TournamentV4Api~tournamentV4GetLobbyEventsByCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TournamentV4LobbyEventDTOWrapper}
     */
    this.tournamentV4GetLobbyEventsByCode = function(tournamentCode, callback) {
      var postBody = null;

      // verify the required parameter 'tournamentCode' is set
      if (tournamentCode === undefined || tournamentCode === null) {
        throw new Error("Missing the required parameter 'tournamentCode' when calling tournamentV4GetLobbyEventsByCode");
      }


      var pathParams = {
        'tournamentCode': tournamentCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TournamentV4LobbyEventDTOWrapper;

      return this.apiClient.callApi(
        '/lol/tournament/v4/lobby-events/by-code/{tournamentCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentV4GetTournamentCode operation.
     * @callback module:api/TournamentV4Api~tournamentV4GetTournamentCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TournamentV4TournamentCodeDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the tournament code DTO associated with a tournament code string.
     * Returns the tournament code DTO associated with a tournament code string.
     * @param {String} tournamentCode The tournament code string.
     * @param {module:api/TournamentV4Api~tournamentV4GetTournamentCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TournamentV4TournamentCodeDTO}
     */
    this.tournamentV4GetTournamentCode = function(tournamentCode, callback) {
      var postBody = null;

      // verify the required parameter 'tournamentCode' is set
      if (tournamentCode === undefined || tournamentCode === null) {
        throw new Error("Missing the required parameter 'tournamentCode' when calling tournamentV4GetTournamentCode");
      }


      var pathParams = {
        'tournamentCode': tournamentCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TournamentV4TournamentCodeDTO;

      return this.apiClient.callApi(
        '/lol/tournament/v4/codes/{tournamentCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentV4RegisterProviderData operation.
     * @callback module:api/TournamentV4Api~tournamentV4RegisterProviderDataCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a tournament provider and returns its ID.
     * Creates a tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param {module:model/TournamentV4ProviderRegistrationParameters} providerRegistrationParameters The provider definition.
     * @param {module:api/TournamentV4Api~tournamentV4RegisterProviderDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.tournamentV4RegisterProviderData = function(providerRegistrationParameters, callback) {
      var postBody = providerRegistrationParameters;

      // verify the required parameter 'providerRegistrationParameters' is set
      if (providerRegistrationParameters === undefined || providerRegistrationParameters === null) {
        throw new Error("Missing the required parameter 'providerRegistrationParameters' when calling tournamentV4RegisterProviderData");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/lol/tournament/v4/providers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentV4RegisterTournament operation.
     * @callback module:api/TournamentV4Api~tournamentV4RegisterTournamentCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a tournament and returns its ID.
     * Creates a tournament and returns its ID.
     * @param {module:model/TournamentV4TournamentRegistrationParameters} tournamentRegistrationParameters The tournament definition.
     * @param {module:api/TournamentV4Api~tournamentV4RegisterTournamentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.tournamentV4RegisterTournament = function(tournamentRegistrationParameters, callback) {
      var postBody = tournamentRegistrationParameters;

      // verify the required parameter 'tournamentRegistrationParameters' is set
      if (tournamentRegistrationParameters === undefined || tournamentRegistrationParameters === null) {
        throw new Error("Missing the required parameter 'tournamentRegistrationParameters' when calling tournamentV4RegisterTournament");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/lol/tournament/v4/tournaments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentV4UpdateCode operation.
     * @callback module:api/TournamentV4Api~tournamentV4UpdateCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the pick type, map, spectator type, or allowed summoners for a code.
     * Update the pick type, map, spectator type, or allowed summoners for a code.
     * @param {String} tournamentCode The tournament code to update
     * @param {Object} opts Optional parameters
     * @param {module:model/TournamentV4TournamentCodeUpdateParameters} opts.tournamentCodeUpdateParameters The fields to update
     * @param {module:api/TournamentV4Api~tournamentV4UpdateCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tournamentV4UpdateCode = function(tournamentCode, opts, callback) {
      opts = opts || {};
      var postBody = opts['tournamentCodeUpdateParameters'];

      // verify the required parameter 'tournamentCode' is set
      if (tournamentCode === undefined || tournamentCode === null) {
        throw new Error("Missing the required parameter 'tournamentCode' when calling tournamentV4UpdateCode");
      }


      var pathParams = {
        'tournamentCode': tournamentCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lol/tournament/v4/codes/{tournamentCode}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
