/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SummonerV4SummonerDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SummonerV4SummonerDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.RiotApi) {
      root.RiotApi = {};
    }
    root.RiotApi.SummonerV4Api = factory(root.RiotApi.ApiClient, root.RiotApi.SummonerV4SummonerDTO);
  }
}(this, function(ApiClient, SummonerV4SummonerDTO) {
  'use strict';

  /**
   * SummonerV4 service.
   * @module api/SummonerV4Api
   * @version dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
   */

  /**
   * Constructs a new SummonerV4Api. 
   * @alias module:api/SummonerV4Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the summonerV4GetByAccountId operation.
     * @callback module:api/SummonerV4Api~summonerV4GetByAccountIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummonerV4SummonerDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summoner by account ID.
     * Get a summoner by account ID.
     * @param {String} encryptedAccountId 
     * @param {module:api/SummonerV4Api~summonerV4GetByAccountIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummonerV4SummonerDTO}
     */
    this.summonerV4GetByAccountId = function(encryptedAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'encryptedAccountId' is set
      if (encryptedAccountId === undefined || encryptedAccountId === null) {
        throw new Error("Missing the required parameter 'encryptedAccountId' when calling summonerV4GetByAccountId");
      }


      var pathParams = {
        'encryptedAccountId': encryptedAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SummonerV4SummonerDTO;

      return this.apiClient.callApi(
        '/lol/summoner/v4/summoners/by-account/{encryptedAccountId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the summonerV4GetByPUUID operation.
     * @callback module:api/SummonerV4Api~summonerV4GetByPUUIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummonerV4SummonerDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summoner by PUUID.
     * Get a summoner by PUUID.
     * @param {String} encryptedPUUID Summoner ID
     * @param {module:api/SummonerV4Api~summonerV4GetByPUUIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummonerV4SummonerDTO}
     */
    this.summonerV4GetByPUUID = function(encryptedPUUID, callback) {
      var postBody = null;

      // verify the required parameter 'encryptedPUUID' is set
      if (encryptedPUUID === undefined || encryptedPUUID === null) {
        throw new Error("Missing the required parameter 'encryptedPUUID' when calling summonerV4GetByPUUID");
      }


      var pathParams = {
        'encryptedPUUID': encryptedPUUID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SummonerV4SummonerDTO;

      return this.apiClient.callApi(
        '/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the summonerV4GetBySummonerId operation.
     * @callback module:api/SummonerV4Api~summonerV4GetBySummonerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummonerV4SummonerDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summoner by summoner ID.
     * Get a summoner by summoner ID.
     * @param {String} encryptedSummonerId Summoner ID
     * @param {module:api/SummonerV4Api~summonerV4GetBySummonerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummonerV4SummonerDTO}
     */
    this.summonerV4GetBySummonerId = function(encryptedSummonerId, callback) {
      var postBody = null;

      // verify the required parameter 'encryptedSummonerId' is set
      if (encryptedSummonerId === undefined || encryptedSummonerId === null) {
        throw new Error("Missing the required parameter 'encryptedSummonerId' when calling summonerV4GetBySummonerId");
      }


      var pathParams = {
        'encryptedSummonerId': encryptedSummonerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SummonerV4SummonerDTO;

      return this.apiClient.callApi(
        '/lol/summoner/v4/summoners/{encryptedSummonerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the summonerV4GetBySummonerName operation.
     * @callback module:api/SummonerV4Api~summonerV4GetBySummonerNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummonerV4SummonerDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summoner by summoner name.
     * Get a summoner by summoner name.
     * @param {String} summonerName Summoner Name
     * @param {module:api/SummonerV4Api~summonerV4GetBySummonerNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummonerV4SummonerDTO}
     */
    this.summonerV4GetBySummonerName = function(summonerName, callback) {
      var postBody = null;

      // verify the required parameter 'summonerName' is set
      if (summonerName === undefined || summonerName === null) {
        throw new Error("Missing the required parameter 'summonerName' when calling summonerV4GetBySummonerName");
      }


      var pathParams = {
        'summonerName': summonerName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SummonerV4SummonerDTO;

      return this.apiClient.callApi(
        '/lol/summoner/v4/summoners/by-name/{summonerName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
