/**
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TournamentStubV4LobbyEventDTOWrapper', 'model/TournamentStubV4ProviderRegistrationParameters', 'model/TournamentStubV4TournamentCodeParameters', 'model/TournamentStubV4TournamentRegistrationParameters'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/TournamentStubV4LobbyEventDTOWrapper'), require('../model/TournamentStubV4ProviderRegistrationParameters'), require('../model/TournamentStubV4TournamentCodeParameters'), require('../model/TournamentStubV4TournamentRegistrationParameters'));
  } else {
    // Browser globals (root is window)
    if (!root.RiotApi) {
      root.RiotApi = {};
    }
    root.RiotApi.TournamentStubV4Api = factory(root.RiotApi.ApiClient, root.RiotApi.TournamentStubV4LobbyEventDTOWrapper, root.RiotApi.TournamentStubV4ProviderRegistrationParameters, root.RiotApi.TournamentStubV4TournamentCodeParameters, root.RiotApi.TournamentStubV4TournamentRegistrationParameters);
  }
}(this, function(ApiClient, TournamentStubV4LobbyEventDTOWrapper, TournamentStubV4ProviderRegistrationParameters, TournamentStubV4TournamentCodeParameters, TournamentStubV4TournamentRegistrationParameters) {
  'use strict';

  /**
   * TournamentStubV4 service.
   * @module api/TournamentStubV4Api
   * @version dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
   */

  /**
   * Constructs a new TournamentStubV4Api. 
   * @alias module:api/TournamentStubV4Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the tournamentStubV4CreateTournamentCode operation.
     * @callback module:api/TournamentStubV4Api~tournamentStubV4CreateTournamentCodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a mock tournament code for the given tournament.
     * Create a mock tournament code for the given tournament.
     * @param {Number} tournamentId The tournament ID
     * @param {module:model/TournamentStubV4TournamentCodeParameters} tournamentCodeParameters Metadata for the generated code
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of codes to create (max 1000)
     * @param {module:api/TournamentStubV4Api~tournamentStubV4CreateTournamentCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.tournamentStubV4CreateTournamentCode = function(tournamentId, tournamentCodeParameters, opts, callback) {
      opts = opts || {};
      var postBody = tournamentCodeParameters;

      // verify the required parameter 'tournamentId' is set
      if (tournamentId === undefined || tournamentId === null) {
        throw new Error("Missing the required parameter 'tournamentId' when calling tournamentStubV4CreateTournamentCode");
      }

      // verify the required parameter 'tournamentCodeParameters' is set
      if (tournamentCodeParameters === undefined || tournamentCodeParameters === null) {
        throw new Error("Missing the required parameter 'tournamentCodeParameters' when calling tournamentStubV4CreateTournamentCode");
      }


      var pathParams = {
      };
      var queryParams = {
        'count': opts['count'],
        'tournamentId': tournamentId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/lol/tournament-stub/v4/codes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentStubV4GetLobbyEventsByCode operation.
     * @callback module:api/TournamentStubV4Api~tournamentStubV4GetLobbyEventsByCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TournamentStubV4LobbyEventDTOWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a mock list of lobby events by tournament code.
     * Gets a mock list of lobby events by tournament code.
     * @param {String} tournamentCode The short code to look up lobby events for
     * @param {module:api/TournamentStubV4Api~tournamentStubV4GetLobbyEventsByCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TournamentStubV4LobbyEventDTOWrapper}
     */
    this.tournamentStubV4GetLobbyEventsByCode = function(tournamentCode, callback) {
      var postBody = null;

      // verify the required parameter 'tournamentCode' is set
      if (tournamentCode === undefined || tournamentCode === null) {
        throw new Error("Missing the required parameter 'tournamentCode' when calling tournamentStubV4GetLobbyEventsByCode");
      }


      var pathParams = {
        'tournamentCode': tournamentCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TournamentStubV4LobbyEventDTOWrapper;

      return this.apiClient.callApi(
        '/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentStubV4RegisterProviderData operation.
     * @callback module:api/TournamentStubV4Api~tournamentStubV4RegisterProviderDataCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a mock tournament provider and returns its ID.
     * Creates a mock tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param {module:model/TournamentStubV4ProviderRegistrationParameters} providerRegistrationParameters The provider definition.
     * @param {module:api/TournamentStubV4Api~tournamentStubV4RegisterProviderDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.tournamentStubV4RegisterProviderData = function(providerRegistrationParameters, callback) {
      var postBody = providerRegistrationParameters;

      // verify the required parameter 'providerRegistrationParameters' is set
      if (providerRegistrationParameters === undefined || providerRegistrationParameters === null) {
        throw new Error("Missing the required parameter 'providerRegistrationParameters' when calling tournamentStubV4RegisterProviderData");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/lol/tournament-stub/v4/providers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tournamentStubV4RegisterTournament operation.
     * @callback module:api/TournamentStubV4Api~tournamentStubV4RegisterTournamentCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a mock tournament and returns its ID.
     * Creates a mock tournament and returns its ID.
     * @param {module:model/TournamentStubV4TournamentRegistrationParameters} tournamentRegistrationParameters The tournament definition.
     * @param {module:api/TournamentStubV4Api~tournamentStubV4RegisterTournamentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.tournamentStubV4RegisterTournament = function(tournamentRegistrationParameters, callback) {
      var postBody = tournamentRegistrationParameters;

      // verify the required parameter 'tournamentRegistrationParameters' is set
      if (tournamentRegistrationParameters === undefined || tournamentRegistrationParameters === null) {
        throw new Error("Missing the required parameter 'tournamentRegistrationParameters' when calling tournamentStubV4RegisterTournament");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Riot-Token', 'api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/lol/tournament-stub/v4/tournaments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
