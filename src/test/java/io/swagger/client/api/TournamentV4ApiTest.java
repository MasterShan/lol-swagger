/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.TournamentV4LobbyEventDTOWrapper;
import io.swagger.client.model.TournamentV4ProviderRegistrationParameters;
import io.swagger.client.model.TournamentV4TournamentCodeDTO;
import io.swagger.client.model.TournamentV4TournamentCodeParameters;
import io.swagger.client.model.TournamentV4TournamentCodeUpdateParameters;
import io.swagger.client.model.TournamentV4TournamentRegistrationParameters;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TournamentV4Api
 */
@Ignore
public class TournamentV4ApiTest {

    private final TournamentV4Api api = new TournamentV4Api();

    
    /**
     * Create a tournament code for the given tournament.
     *
     * Create a tournament code for the given tournament.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tournamentV4CreateTournamentCodeTest() throws ApiException {
        Long tournamentId = null;
        TournamentV4TournamentCodeParameters tournamentCodeParameters = null;
        Integer count = null;
        List<String> response = api.tournamentV4CreateTournamentCode(tournamentId, tournamentCodeParameters, count);

        // TODO: test validations
    }
    
    /**
     * Gets a list of lobby events by tournament code.
     *
     * Gets a list of lobby events by tournament code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tournamentV4GetLobbyEventsByCodeTest() throws ApiException {
        String tournamentCode = null;
        TournamentV4LobbyEventDTOWrapper response = api.tournamentV4GetLobbyEventsByCode(tournamentCode);

        // TODO: test validations
    }
    
    /**
     * Returns the tournament code DTO associated with a tournament code string.
     *
     * Returns the tournament code DTO associated with a tournament code string.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tournamentV4GetTournamentCodeTest() throws ApiException {
        String tournamentCode = null;
        TournamentV4TournamentCodeDTO response = api.tournamentV4GetTournamentCode(tournamentCode);

        // TODO: test validations
    }
    
    /**
     * Creates a tournament provider and returns its ID.
     *
     * Creates a tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tournamentV4RegisterProviderDataTest() throws ApiException {
        TournamentV4ProviderRegistrationParameters providerRegistrationParameters = null;
        Integer response = api.tournamentV4RegisterProviderData(providerRegistrationParameters);

        // TODO: test validations
    }
    
    /**
     * Creates a tournament and returns its ID.
     *
     * Creates a tournament and returns its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tournamentV4RegisterTournamentTest() throws ApiException {
        TournamentV4TournamentRegistrationParameters tournamentRegistrationParameters = null;
        Integer response = api.tournamentV4RegisterTournament(tournamentRegistrationParameters);

        // TODO: test validations
    }
    
    /**
     * Update the pick type, map, spectator type, or allowed summoners for a code.
     *
     * Update the pick type, map, spectator type, or allowed summoners for a code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tournamentV4UpdateCodeTest() throws ApiException {
        String tournamentCode = null;
        TournamentV4TournamentCodeUpdateParameters tournamentCodeUpdateParameters = null;
        api.tournamentV4UpdateCode(tournamentCode, tournamentCodeUpdateParameters);

        // TODO: test validations
    }
    
}
