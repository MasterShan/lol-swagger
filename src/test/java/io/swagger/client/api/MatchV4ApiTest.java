/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.MatchV4MatchDto;
import io.swagger.client.model.MatchV4MatchTimelineDto;
import io.swagger.client.model.MatchV4MatchlistDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MatchV4Api
 */
@Ignore
public class MatchV4ApiTest {

    private final MatchV4Api api = new MatchV4Api();

    
    /**
     * Get match by match ID.
     *
     * Get match by match ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void matchV4GetMatchTest() throws ApiException {
        Long matchId = null;
        MatchV4MatchDto response = api.matchV4GetMatch(matchId);

        // TODO: test validations
    }
    
    /**
     * Get match by match ID and tournament code.
     *
     * Get match by match ID and tournament code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void matchV4GetMatchByTournamentCodeTest() throws ApiException {
        String tournamentCode = null;
        Long matchId = null;
        MatchV4MatchDto response = api.matchV4GetMatchByTournamentCode(tournamentCode, matchId);

        // TODO: test validations
    }
    
    /**
     * Get match IDs by tournament code.
     *
     * Get match IDs by tournament code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void matchV4GetMatchIdsByTournamentCodeTest() throws ApiException {
        String tournamentCode = null;
        List<Long> response = api.matchV4GetMatchIdsByTournamentCode(tournamentCode);

        // TODO: test validations
    }
    
    /**
     * Get match timeline by match ID.
     *
     * Get match timeline by match ID. ## Implementation Notes Not all matches have timeline data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void matchV4GetMatchTimelineTest() throws ApiException {
        Long matchId = null;
        MatchV4MatchTimelineDto response = api.matchV4GetMatchTimeline(matchId);

        // TODO: test validations
    }
    
    /**
     * Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.
     *
     * Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any. ## Implementation Notes A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.  If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account&#39;s match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void matchV4GetMatchlistTest() throws ApiException {
        String encryptedAccountId = null;
        List<Integer> champion = null;
        List<Integer> queue = null;
        List<Integer> season = null;
        Long endTime = null;
        Long beginTime = null;
        Integer endIndex = null;
        Integer beginIndex = null;
        MatchV4MatchlistDto response = api.matchV4GetMatchlist(encryptedAccountId, champion, queue, season, endTime, beginTime, endIndex, beginIndex);

        // TODO: test validations
    }
    
}
