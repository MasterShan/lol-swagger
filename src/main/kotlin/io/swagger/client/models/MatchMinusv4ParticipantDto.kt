/**
* Riot API
*  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
*
* OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import io.swagger.client.models.MatchMinusv4MasteryDto
import io.swagger.client.models.MatchMinusv4ParticipantStatsDto
import io.swagger.client.models.MatchMinusv4ParticipantTimelineDto
import io.swagger.client.models.MatchMinusv4RuneDto

import com.squareup.moshi.Json
/**
 * 
 * @param stats Participant statistics.
 * @param participantId 
 * @param runes List of legacy Rune information. Not included for matches played with Runes Reforged.
 * @param timeline Participant timeline data.
 * @param teamId 100 for blue side. 200 for red side.
 * @param spell2Id Second Summoner Spell id.
 * @param masteries List of legacy Mastery information. Not included for matches played with Runes Reforged.
 * @param highestAchievedSeasonTier Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.              (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
 * @param spell1Id First Summoner Spell id.
 * @param championId 
 */
data class MatchMinusv4ParticipantDto (
    /* Participant statistics. */
    val stats: MatchMinusv4ParticipantStatsDto? = null,
    val participantId: kotlin.Int? = null,
    /* List of legacy Rune information. Not included for matches played with Runes Reforged. */
    val runes: kotlin.Array<MatchMinusv4RuneDto>? = null,
    /* Participant timeline data. */
    val timeline: MatchMinusv4ParticipantTimelineDto? = null,
    /* 100 for blue side. 200 for red side. */
    val teamId: kotlin.Int? = null,
    /* Second Summoner Spell id. */
    val spell2Id: kotlin.Int? = null,
    /* List of legacy Mastery information. Not included for matches played with Runes Reforged. */
    val masteries: kotlin.Array<MatchMinusv4MasteryDto>? = null,
    /* Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.              (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED) */
    val highestAchievedSeasonTier: MatchMinusv4ParticipantDto.HighestAchievedSeasonTier? = null,
    /* First Summoner Spell id. */
    val spell1Id: kotlin.Int? = null,
    val championId: kotlin.Int? = null
) {

    /**
    * Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.              (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
    * Values: cHALLENGER,mASTER,dIAMOND,pLATINUM,gOLD,sILVER,bRONZE,uNRANKED
    */
    enum class HighestAchievedSeasonTier(val value: kotlin.String){
    
        @Json(name = "CHALLENGER") cHALLENGER("CHALLENGER"),
    
        @Json(name = "MASTER") mASTER("MASTER"),
    
        @Json(name = "DIAMOND") dIAMOND("DIAMOND"),
    
        @Json(name = "PLATINUM") pLATINUM("PLATINUM"),
    
        @Json(name = "GOLD") gOLD("GOLD"),
    
        @Json(name = "SILVER") sILVER("SILVER"),
    
        @Json(name = "BRONZE") bRONZE("BRONZE"),
    
        @Json(name = "UNRANKED") uNRANKED("UNRANKED");
    
    }

}

