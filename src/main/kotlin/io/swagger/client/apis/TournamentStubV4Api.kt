/**
* Riot API
*  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
*
* OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.TournamentMinusstubMinusv4LobbyEventDTOWrapper
import io.swagger.client.models.TournamentMinusstubMinusv4ProviderRegistrationParameters
import io.swagger.client.models.TournamentMinusstubMinusv4TournamentCodeParameters
import io.swagger.client.models.TournamentMinusstubMinusv4TournamentRegistrationParameters

import io.swagger.client.infrastructure.*

class TournamentStubV4Api(basePath: kotlin.String = "https://na1.api.riotgames.com") : ApiClient(basePath) {

    /**
    * Create a mock tournament code for the given tournament.
    * Create a mock tournament code for the given tournament.
    * @param tournamentId The tournament ID 
    * @param tournamentCodeParameters Metadata for the generated code 
    * @param count The number of codes to create (max 1000) (optional)
    * @return kotlin.Array<kotlin.String>
    */
    @Suppress("UNCHECKED_CAST")
    fun tournamentStubV4.createTournamentCode(tournamentId: kotlin.Long, tournamentCodeParameters: TournamentMinusstubMinusv4TournamentCodeParameters, count: kotlin.Int) : kotlin.Array<kotlin.String> {
        val localVariableBody: kotlin.Any? = tournamentCodeParameters
        val localVariableQuery: MultiValueMap = mapOf("count" to listOf("$count"), "tournamentId" to listOf("$tournamentId"))
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/lol/tournament-stub/v4/codes",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<kotlin.String>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Gets a mock list of lobby events by tournament code.
    * Gets a mock list of lobby events by tournament code.
    * @param tournamentCode The short code to look up lobby events for 
    * @return TournamentMinusstubMinusv4LobbyEventDTOWrapper
    */
    @Suppress("UNCHECKED_CAST")
    fun tournamentStubV4.getLobbyEventsByCode(tournamentCode: kotlin.String) : TournamentMinusstubMinusv4LobbyEventDTOWrapper {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}".replace("{"+"tournamentCode"+"}", "$tournamentCode"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<TournamentMinusstubMinusv4LobbyEventDTOWrapper>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TournamentMinusstubMinusv4LobbyEventDTOWrapper
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Creates a mock tournament provider and returns its ID.
    * Creates a mock tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
    * @param providerRegistrationParameters The provider definition. 
    * @return kotlin.Int
    */
    @Suppress("UNCHECKED_CAST")
    fun tournamentStubV4.registerProviderData(providerRegistrationParameters: TournamentMinusstubMinusv4ProviderRegistrationParameters) : kotlin.Int {
        val localVariableBody: kotlin.Any? = providerRegistrationParameters
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/lol/tournament-stub/v4/providers",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Int>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Int
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Creates a mock tournament and returns its ID.
    * Creates a mock tournament and returns its ID.
    * @param tournamentRegistrationParameters The tournament definition. 
    * @return kotlin.Int
    */
    @Suppress("UNCHECKED_CAST")
    fun tournamentStubV4.registerTournament(tournamentRegistrationParameters: TournamentMinusstubMinusv4TournamentRegistrationParameters) : kotlin.Int {
        val localVariableBody: kotlin.Any? = tournamentRegistrationParameters
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/lol/tournament-stub/v4/tournaments",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Int>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Int
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
