/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.TournamentStubV4LobbyEventDTOWrapper;
import io.swagger.client.model.TournamentStubV4ProviderRegistrationParameters;
import io.swagger.client.model.TournamentStubV4TournamentCodeParameters;
import io.swagger.client.model.TournamentStubV4TournamentRegistrationParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TournamentStubV4Api {
    private ApiClient apiClient;

    public TournamentStubV4Api() {
        this(Configuration.getDefaultApiClient());
    }

    public TournamentStubV4Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for tournamentStubV4CreateTournamentCode
     * @param tournamentId The tournament ID (required)
     * @param tournamentCodeParameters Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode">Create a mock tournament code for the given tournament. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentStubV4CreateTournamentCodeCall(Long tournamentId, TournamentStubV4TournamentCodeParameters tournamentCodeParameters, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tournamentCodeParameters;

        // create path and map variables
        String localVarPath = "/lol/tournament-stub/v4/codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (tournamentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tournamentId", tournamentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentStubV4CreateTournamentCodeValidateBeforeCall(Long tournamentId, TournamentStubV4TournamentCodeParameters tournamentCodeParameters, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tournamentId' is set
        if (tournamentId == null) {
            throw new ApiException("Missing the required parameter 'tournamentId' when calling tournamentStubV4CreateTournamentCode(Async)");
        }
        
        // verify the required parameter 'tournamentCodeParameters' is set
        if (tournamentCodeParameters == null) {
            throw new ApiException("Missing the required parameter 'tournamentCodeParameters' when calling tournamentStubV4CreateTournamentCode(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentStubV4CreateTournamentCodeCall(tournamentId, tournamentCodeParameters, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a mock tournament code for the given tournament.
     * Create a mock tournament code for the given tournament.
     * @param tournamentId The tournament ID (required)
     * @param tournamentCodeParameters Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode">Create a mock tournament code for the given tournament. Documentation</a>
     */
    public List<String> tournamentStubV4CreateTournamentCode(Long tournamentId, TournamentStubV4TournamentCodeParameters tournamentCodeParameters, Integer count) throws ApiException {
        ApiResponse<List<String>> resp = tournamentStubV4CreateTournamentCodeWithHttpInfo(tournamentId, tournamentCodeParameters, count);
        return resp.getData();
    }

    /**
     * Create a mock tournament code for the given tournament.
     * Create a mock tournament code for the given tournament.
     * @param tournamentId The tournament ID (required)
     * @param tournamentCodeParameters Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode">Create a mock tournament code for the given tournament. Documentation</a>
     */
    public ApiResponse<List<String>> tournamentStubV4CreateTournamentCodeWithHttpInfo(Long tournamentId, TournamentStubV4TournamentCodeParameters tournamentCodeParameters, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = tournamentStubV4CreateTournamentCodeValidateBeforeCall(tournamentId, tournamentCodeParameters, count, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a mock tournament code for the given tournament. (asynchronously)
     * Create a mock tournament code for the given tournament.
     * @param tournamentId The tournament ID (required)
     * @param tournamentCodeParameters Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode">Create a mock tournament code for the given tournament. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentStubV4CreateTournamentCodeAsync(Long tournamentId, TournamentStubV4TournamentCodeParameters tournamentCodeParameters, Integer count, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentStubV4CreateTournamentCodeValidateBeforeCall(tournamentId, tournamentCodeParameters, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tournamentStubV4GetLobbyEventsByCode
     * @param tournamentCode The short code to look up lobby events for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">Gets a mock list of lobby events by tournament code. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentStubV4GetLobbyEventsByCodeCall(String tournamentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}"
            .replaceAll("\\{" + "tournamentCode" + "\\}", apiClient.escapeString(tournamentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentStubV4GetLobbyEventsByCodeValidateBeforeCall(String tournamentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tournamentCode' is set
        if (tournamentCode == null) {
            throw new ApiException("Missing the required parameter 'tournamentCode' when calling tournamentStubV4GetLobbyEventsByCode(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentStubV4GetLobbyEventsByCodeCall(tournamentCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a mock list of lobby events by tournament code.
     * Gets a mock list of lobby events by tournament code.
     * @param tournamentCode The short code to look up lobby events for (required)
     * @return TournamentStubV4LobbyEventDTOWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">Gets a mock list of lobby events by tournament code. Documentation</a>
     */
    public TournamentStubV4LobbyEventDTOWrapper tournamentStubV4GetLobbyEventsByCode(String tournamentCode) throws ApiException {
        ApiResponse<TournamentStubV4LobbyEventDTOWrapper> resp = tournamentStubV4GetLobbyEventsByCodeWithHttpInfo(tournamentCode);
        return resp.getData();
    }

    /**
     * Gets a mock list of lobby events by tournament code.
     * Gets a mock list of lobby events by tournament code.
     * @param tournamentCode The short code to look up lobby events for (required)
     * @return ApiResponse&lt;TournamentStubV4LobbyEventDTOWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">Gets a mock list of lobby events by tournament code. Documentation</a>
     */
    public ApiResponse<TournamentStubV4LobbyEventDTOWrapper> tournamentStubV4GetLobbyEventsByCodeWithHttpInfo(String tournamentCode) throws ApiException {
        com.squareup.okhttp.Call call = tournamentStubV4GetLobbyEventsByCodeValidateBeforeCall(tournamentCode, null, null);
        Type localVarReturnType = new TypeToken<TournamentStubV4LobbyEventDTOWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a mock list of lobby events by tournament code. (asynchronously)
     * Gets a mock list of lobby events by tournament code.
     * @param tournamentCode The short code to look up lobby events for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">Gets a mock list of lobby events by tournament code. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentStubV4GetLobbyEventsByCodeAsync(String tournamentCode, final ApiCallback<TournamentStubV4LobbyEventDTOWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentStubV4GetLobbyEventsByCodeValidateBeforeCall(tournamentCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TournamentStubV4LobbyEventDTOWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tournamentStubV4RegisterProviderData
     * @param providerRegistrationParameters The provider definition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData">Creates a mock tournament provider and returns its ID. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentStubV4RegisterProviderDataCall(TournamentStubV4ProviderRegistrationParameters providerRegistrationParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providerRegistrationParameters;

        // create path and map variables
        String localVarPath = "/lol/tournament-stub/v4/providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentStubV4RegisterProviderDataValidateBeforeCall(TournamentStubV4ProviderRegistrationParameters providerRegistrationParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providerRegistrationParameters' is set
        if (providerRegistrationParameters == null) {
            throw new ApiException("Missing the required parameter 'providerRegistrationParameters' when calling tournamentStubV4RegisterProviderData(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentStubV4RegisterProviderDataCall(providerRegistrationParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a mock tournament provider and returns its ID.
     * Creates a mock tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param providerRegistrationParameters The provider definition. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData">Creates a mock tournament provider and returns its ID. Documentation</a>
     */
    public Integer tournamentStubV4RegisterProviderData(TournamentStubV4ProviderRegistrationParameters providerRegistrationParameters) throws ApiException {
        ApiResponse<Integer> resp = tournamentStubV4RegisterProviderDataWithHttpInfo(providerRegistrationParameters);
        return resp.getData();
    }

    /**
     * Creates a mock tournament provider and returns its ID.
     * Creates a mock tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param providerRegistrationParameters The provider definition. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData">Creates a mock tournament provider and returns its ID. Documentation</a>
     */
    public ApiResponse<Integer> tournamentStubV4RegisterProviderDataWithHttpInfo(TournamentStubV4ProviderRegistrationParameters providerRegistrationParameters) throws ApiException {
        com.squareup.okhttp.Call call = tournamentStubV4RegisterProviderDataValidateBeforeCall(providerRegistrationParameters, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a mock tournament provider and returns its ID. (asynchronously)
     * Creates a mock tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param providerRegistrationParameters The provider definition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData">Creates a mock tournament provider and returns its ID. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentStubV4RegisterProviderDataAsync(TournamentStubV4ProviderRegistrationParameters providerRegistrationParameters, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentStubV4RegisterProviderDataValidateBeforeCall(providerRegistrationParameters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tournamentStubV4RegisterTournament
     * @param tournamentRegistrationParameters The tournament definition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament">Creates a mock tournament and returns its ID. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentStubV4RegisterTournamentCall(TournamentStubV4TournamentRegistrationParameters tournamentRegistrationParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tournamentRegistrationParameters;

        // create path and map variables
        String localVarPath = "/lol/tournament-stub/v4/tournaments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentStubV4RegisterTournamentValidateBeforeCall(TournamentStubV4TournamentRegistrationParameters tournamentRegistrationParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tournamentRegistrationParameters' is set
        if (tournamentRegistrationParameters == null) {
            throw new ApiException("Missing the required parameter 'tournamentRegistrationParameters' when calling tournamentStubV4RegisterTournament(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentStubV4RegisterTournamentCall(tournamentRegistrationParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a mock tournament and returns its ID.
     * Creates a mock tournament and returns its ID.
     * @param tournamentRegistrationParameters The tournament definition. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament">Creates a mock tournament and returns its ID. Documentation</a>
     */
    public Integer tournamentStubV4RegisterTournament(TournamentStubV4TournamentRegistrationParameters tournamentRegistrationParameters) throws ApiException {
        ApiResponse<Integer> resp = tournamentStubV4RegisterTournamentWithHttpInfo(tournamentRegistrationParameters);
        return resp.getData();
    }

    /**
     * Creates a mock tournament and returns its ID.
     * Creates a mock tournament and returns its ID.
     * @param tournamentRegistrationParameters The tournament definition. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament">Creates a mock tournament and returns its ID. Documentation</a>
     */
    public ApiResponse<Integer> tournamentStubV4RegisterTournamentWithHttpInfo(TournamentStubV4TournamentRegistrationParameters tournamentRegistrationParameters) throws ApiException {
        com.squareup.okhttp.Call call = tournamentStubV4RegisterTournamentValidateBeforeCall(tournamentRegistrationParameters, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a mock tournament and returns its ID. (asynchronously)
     * Creates a mock tournament and returns its ID.
     * @param tournamentRegistrationParameters The tournament definition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament">Creates a mock tournament and returns its ID. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentStubV4RegisterTournamentAsync(TournamentStubV4TournamentRegistrationParameters tournamentRegistrationParameters, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentStubV4RegisterTournamentValidateBeforeCall(tournamentRegistrationParameters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
