/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.TournamentV4LobbyEventDTOWrapper;
import io.swagger.client.model.TournamentV4ProviderRegistrationParameters;
import io.swagger.client.model.TournamentV4TournamentCodeDTO;
import io.swagger.client.model.TournamentV4TournamentCodeParameters;
import io.swagger.client.model.TournamentV4TournamentCodeUpdateParameters;
import io.swagger.client.model.TournamentV4TournamentRegistrationParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TournamentV4Api {
    private ApiClient apiClient;

    public TournamentV4Api() {
        this(Configuration.getDefaultApiClient());
    }

    public TournamentV4Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for tournamentV4CreateTournamentCode
     * @param tournamentId The tournament ID (required)
     * @param tournamentCodeParameters Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode">Create a tournament code for the given tournament. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4CreateTournamentCodeCall(Long tournamentId, TournamentV4TournamentCodeParameters tournamentCodeParameters, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tournamentCodeParameters;

        // create path and map variables
        String localVarPath = "/lol/tournament/v4/codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (tournamentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tournamentId", tournamentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentV4CreateTournamentCodeValidateBeforeCall(Long tournamentId, TournamentV4TournamentCodeParameters tournamentCodeParameters, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tournamentId' is set
        if (tournamentId == null) {
            throw new ApiException("Missing the required parameter 'tournamentId' when calling tournamentV4CreateTournamentCode(Async)");
        }
        
        // verify the required parameter 'tournamentCodeParameters' is set
        if (tournamentCodeParameters == null) {
            throw new ApiException("Missing the required parameter 'tournamentCodeParameters' when calling tournamentV4CreateTournamentCode(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentV4CreateTournamentCodeCall(tournamentId, tournamentCodeParameters, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a tournament code for the given tournament.
     * Create a tournament code for the given tournament.
     * @param tournamentId The tournament ID (required)
     * @param tournamentCodeParameters Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode">Create a tournament code for the given tournament. Documentation</a>
     */
    public List<String> tournamentV4CreateTournamentCode(Long tournamentId, TournamentV4TournamentCodeParameters tournamentCodeParameters, Integer count) throws ApiException {
        ApiResponse<List<String>> resp = tournamentV4CreateTournamentCodeWithHttpInfo(tournamentId, tournamentCodeParameters, count);
        return resp.getData();
    }

    /**
     * Create a tournament code for the given tournament.
     * Create a tournament code for the given tournament.
     * @param tournamentId The tournament ID (required)
     * @param tournamentCodeParameters Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode">Create a tournament code for the given tournament. Documentation</a>
     */
    public ApiResponse<List<String>> tournamentV4CreateTournamentCodeWithHttpInfo(Long tournamentId, TournamentV4TournamentCodeParameters tournamentCodeParameters, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = tournamentV4CreateTournamentCodeValidateBeforeCall(tournamentId, tournamentCodeParameters, count, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a tournament code for the given tournament. (asynchronously)
     * Create a tournament code for the given tournament.
     * @param tournamentId The tournament ID (required)
     * @param tournamentCodeParameters Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode">Create a tournament code for the given tournament. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4CreateTournamentCodeAsync(Long tournamentId, TournamentV4TournamentCodeParameters tournamentCodeParameters, Integer count, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentV4CreateTournamentCodeValidateBeforeCall(tournamentId, tournamentCodeParameters, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tournamentV4GetLobbyEventsByCode
     * @param tournamentCode The short code to look up lobby events for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">Gets a list of lobby events by tournament code. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4GetLobbyEventsByCodeCall(String tournamentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lol/tournament/v4/lobby-events/by-code/{tournamentCode}"
            .replaceAll("\\{" + "tournamentCode" + "\\}", apiClient.escapeString(tournamentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentV4GetLobbyEventsByCodeValidateBeforeCall(String tournamentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tournamentCode' is set
        if (tournamentCode == null) {
            throw new ApiException("Missing the required parameter 'tournamentCode' when calling tournamentV4GetLobbyEventsByCode(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentV4GetLobbyEventsByCodeCall(tournamentCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of lobby events by tournament code.
     * Gets a list of lobby events by tournament code.
     * @param tournamentCode The short code to look up lobby events for (required)
     * @return TournamentV4LobbyEventDTOWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">Gets a list of lobby events by tournament code. Documentation</a>
     */
    public TournamentV4LobbyEventDTOWrapper tournamentV4GetLobbyEventsByCode(String tournamentCode) throws ApiException {
        ApiResponse<TournamentV4LobbyEventDTOWrapper> resp = tournamentV4GetLobbyEventsByCodeWithHttpInfo(tournamentCode);
        return resp.getData();
    }

    /**
     * Gets a list of lobby events by tournament code.
     * Gets a list of lobby events by tournament code.
     * @param tournamentCode The short code to look up lobby events for (required)
     * @return ApiResponse&lt;TournamentV4LobbyEventDTOWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">Gets a list of lobby events by tournament code. Documentation</a>
     */
    public ApiResponse<TournamentV4LobbyEventDTOWrapper> tournamentV4GetLobbyEventsByCodeWithHttpInfo(String tournamentCode) throws ApiException {
        com.squareup.okhttp.Call call = tournamentV4GetLobbyEventsByCodeValidateBeforeCall(tournamentCode, null, null);
        Type localVarReturnType = new TypeToken<TournamentV4LobbyEventDTOWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of lobby events by tournament code. (asynchronously)
     * Gets a list of lobby events by tournament code.
     * @param tournamentCode The short code to look up lobby events for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">Gets a list of lobby events by tournament code. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4GetLobbyEventsByCodeAsync(String tournamentCode, final ApiCallback<TournamentV4LobbyEventDTOWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentV4GetLobbyEventsByCodeValidateBeforeCall(tournamentCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TournamentV4LobbyEventDTOWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tournamentV4GetTournamentCode
     * @param tournamentCode The tournament code string. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">Returns the tournament code DTO associated with a tournament code string. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4GetTournamentCodeCall(String tournamentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lol/tournament/v4/codes/{tournamentCode}"
            .replaceAll("\\{" + "tournamentCode" + "\\}", apiClient.escapeString(tournamentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentV4GetTournamentCodeValidateBeforeCall(String tournamentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tournamentCode' is set
        if (tournamentCode == null) {
            throw new ApiException("Missing the required parameter 'tournamentCode' when calling tournamentV4GetTournamentCode(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentV4GetTournamentCodeCall(tournamentCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the tournament code DTO associated with a tournament code string.
     * Returns the tournament code DTO associated with a tournament code string.
     * @param tournamentCode The tournament code string. (required)
     * @return TournamentV4TournamentCodeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">Returns the tournament code DTO associated with a tournament code string. Documentation</a>
     */
    public TournamentV4TournamentCodeDTO tournamentV4GetTournamentCode(String tournamentCode) throws ApiException {
        ApiResponse<TournamentV4TournamentCodeDTO> resp = tournamentV4GetTournamentCodeWithHttpInfo(tournamentCode);
        return resp.getData();
    }

    /**
     * Returns the tournament code DTO associated with a tournament code string.
     * Returns the tournament code DTO associated with a tournament code string.
     * @param tournamentCode The tournament code string. (required)
     * @return ApiResponse&lt;TournamentV4TournamentCodeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">Returns the tournament code DTO associated with a tournament code string. Documentation</a>
     */
    public ApiResponse<TournamentV4TournamentCodeDTO> tournamentV4GetTournamentCodeWithHttpInfo(String tournamentCode) throws ApiException {
        com.squareup.okhttp.Call call = tournamentV4GetTournamentCodeValidateBeforeCall(tournamentCode, null, null);
        Type localVarReturnType = new TypeToken<TournamentV4TournamentCodeDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the tournament code DTO associated with a tournament code string. (asynchronously)
     * Returns the tournament code DTO associated with a tournament code string.
     * @param tournamentCode The tournament code string. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">Returns the tournament code DTO associated with a tournament code string. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4GetTournamentCodeAsync(String tournamentCode, final ApiCallback<TournamentV4TournamentCodeDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentV4GetTournamentCodeValidateBeforeCall(tournamentCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TournamentV4TournamentCodeDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tournamentV4RegisterProviderData
     * @param providerRegistrationParameters The provider definition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData">Creates a tournament provider and returns its ID. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4RegisterProviderDataCall(TournamentV4ProviderRegistrationParameters providerRegistrationParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providerRegistrationParameters;

        // create path and map variables
        String localVarPath = "/lol/tournament/v4/providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentV4RegisterProviderDataValidateBeforeCall(TournamentV4ProviderRegistrationParameters providerRegistrationParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providerRegistrationParameters' is set
        if (providerRegistrationParameters == null) {
            throw new ApiException("Missing the required parameter 'providerRegistrationParameters' when calling tournamentV4RegisterProviderData(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentV4RegisterProviderDataCall(providerRegistrationParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a tournament provider and returns its ID.
     * Creates a tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param providerRegistrationParameters The provider definition. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData">Creates a tournament provider and returns its ID. Documentation</a>
     */
    public Integer tournamentV4RegisterProviderData(TournamentV4ProviderRegistrationParameters providerRegistrationParameters) throws ApiException {
        ApiResponse<Integer> resp = tournamentV4RegisterProviderDataWithHttpInfo(providerRegistrationParameters);
        return resp.getData();
    }

    /**
     * Creates a tournament provider and returns its ID.
     * Creates a tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param providerRegistrationParameters The provider definition. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData">Creates a tournament provider and returns its ID. Documentation</a>
     */
    public ApiResponse<Integer> tournamentV4RegisterProviderDataWithHttpInfo(TournamentV4ProviderRegistrationParameters providerRegistrationParameters) throws ApiException {
        com.squareup.okhttp.Call call = tournamentV4RegisterProviderDataValidateBeforeCall(providerRegistrationParameters, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a tournament provider and returns its ID. (asynchronously)
     * Creates a tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param providerRegistrationParameters The provider definition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData">Creates a tournament provider and returns its ID. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4RegisterProviderDataAsync(TournamentV4ProviderRegistrationParameters providerRegistrationParameters, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentV4RegisterProviderDataValidateBeforeCall(providerRegistrationParameters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tournamentV4RegisterTournament
     * @param tournamentRegistrationParameters The tournament definition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament">Creates a tournament and returns its ID. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4RegisterTournamentCall(TournamentV4TournamentRegistrationParameters tournamentRegistrationParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tournamentRegistrationParameters;

        // create path and map variables
        String localVarPath = "/lol/tournament/v4/tournaments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentV4RegisterTournamentValidateBeforeCall(TournamentV4TournamentRegistrationParameters tournamentRegistrationParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tournamentRegistrationParameters' is set
        if (tournamentRegistrationParameters == null) {
            throw new ApiException("Missing the required parameter 'tournamentRegistrationParameters' when calling tournamentV4RegisterTournament(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentV4RegisterTournamentCall(tournamentRegistrationParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a tournament and returns its ID.
     * Creates a tournament and returns its ID.
     * @param tournamentRegistrationParameters The tournament definition. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament">Creates a tournament and returns its ID. Documentation</a>
     */
    public Integer tournamentV4RegisterTournament(TournamentV4TournamentRegistrationParameters tournamentRegistrationParameters) throws ApiException {
        ApiResponse<Integer> resp = tournamentV4RegisterTournamentWithHttpInfo(tournamentRegistrationParameters);
        return resp.getData();
    }

    /**
     * Creates a tournament and returns its ID.
     * Creates a tournament and returns its ID.
     * @param tournamentRegistrationParameters The tournament definition. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament">Creates a tournament and returns its ID. Documentation</a>
     */
    public ApiResponse<Integer> tournamentV4RegisterTournamentWithHttpInfo(TournamentV4TournamentRegistrationParameters tournamentRegistrationParameters) throws ApiException {
        com.squareup.okhttp.Call call = tournamentV4RegisterTournamentValidateBeforeCall(tournamentRegistrationParameters, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a tournament and returns its ID. (asynchronously)
     * Creates a tournament and returns its ID.
     * @param tournamentRegistrationParameters The tournament definition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament">Creates a tournament and returns its ID. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4RegisterTournamentAsync(TournamentV4TournamentRegistrationParameters tournamentRegistrationParameters, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentV4RegisterTournamentValidateBeforeCall(tournamentRegistrationParameters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tournamentV4UpdateCode
     * @param tournamentCode The tournament code to update (required)
     * @param tournamentCodeUpdateParameters The fields to update (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode">Update the pick type, map, spectator type, or allowed summoners for a code. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4UpdateCodeCall(String tournamentCode, TournamentV4TournamentCodeUpdateParameters tournamentCodeUpdateParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tournamentCodeUpdateParameters;

        // create path and map variables
        String localVarPath = "/lol/tournament/v4/codes/{tournamentCode}"
            .replaceAll("\\{" + "tournamentCode" + "\\}", apiClient.escapeString(tournamentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tournamentV4UpdateCodeValidateBeforeCall(String tournamentCode, TournamentV4TournamentCodeUpdateParameters tournamentCodeUpdateParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tournamentCode' is set
        if (tournamentCode == null) {
            throw new ApiException("Missing the required parameter 'tournamentCode' when calling tournamentV4UpdateCode(Async)");
        }
        

        com.squareup.okhttp.Call call = tournamentV4UpdateCodeCall(tournamentCode, tournamentCodeUpdateParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the pick type, map, spectator type, or allowed summoners for a code.
     * Update the pick type, map, spectator type, or allowed summoners for a code.
     * @param tournamentCode The tournament code to update (required)
     * @param tournamentCodeUpdateParameters The fields to update (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode">Update the pick type, map, spectator type, or allowed summoners for a code. Documentation</a>
     */
    public void tournamentV4UpdateCode(String tournamentCode, TournamentV4TournamentCodeUpdateParameters tournamentCodeUpdateParameters) throws ApiException {
        tournamentV4UpdateCodeWithHttpInfo(tournamentCode, tournamentCodeUpdateParameters);
    }

    /**
     * Update the pick type, map, spectator type, or allowed summoners for a code.
     * Update the pick type, map, spectator type, or allowed summoners for a code.
     * @param tournamentCode The tournament code to update (required)
     * @param tournamentCodeUpdateParameters The fields to update (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode">Update the pick type, map, spectator type, or allowed summoners for a code. Documentation</a>
     */
    public ApiResponse<Void> tournamentV4UpdateCodeWithHttpInfo(String tournamentCode, TournamentV4TournamentCodeUpdateParameters tournamentCodeUpdateParameters) throws ApiException {
        com.squareup.okhttp.Call call = tournamentV4UpdateCodeValidateBeforeCall(tournamentCode, tournamentCodeUpdateParameters, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the pick type, map, spectator type, or allowed summoners for a code. (asynchronously)
     * Update the pick type, map, spectator type, or allowed summoners for a code.
     * @param tournamentCode The tournament code to update (required)
     * @param tournamentCodeUpdateParameters The fields to update (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode">Update the pick type, map, spectator type, or allowed summoners for a code. Documentation</a>
     */
    public com.squareup.okhttp.Call tournamentV4UpdateCodeAsync(String tournamentCode, TournamentV4TournamentCodeUpdateParameters tournamentCodeUpdateParameters, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tournamentV4UpdateCodeValidateBeforeCall(tournamentCode, tournamentCodeUpdateParameters, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
