/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.MatchV4TeamBansDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * MatchV4TeamStatsDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-17T15:57:39.031+02:00")
public class MatchV4TeamStatsDto {
  @SerializedName("firstDragon")
  private Boolean firstDragon = null;

  @SerializedName("firstInhibitor")
  private Boolean firstInhibitor = null;

  @SerializedName("bans")
  private List<MatchV4TeamBansDto> bans = null;

  @SerializedName("baronKills")
  private Integer baronKills = null;

  @SerializedName("firstRiftHerald")
  private Boolean firstRiftHerald = null;

  @SerializedName("firstBaron")
  private Boolean firstBaron = null;

  @SerializedName("riftHeraldKills")
  private Integer riftHeraldKills = null;

  @SerializedName("firstBlood")
  private Boolean firstBlood = null;

  @SerializedName("teamId")
  private Integer teamId = null;

  @SerializedName("firstTower")
  private Boolean firstTower = null;

  @SerializedName("vilemawKills")
  private Integer vilemawKills = null;

  @SerializedName("inhibitorKills")
  private Integer inhibitorKills = null;

  @SerializedName("towerKills")
  private Integer towerKills = null;

  @SerializedName("dominionVictoryScore")
  private Integer dominionVictoryScore = null;

  /**
   * String indicating whether or not the team won. There are only two values visibile in public match history.              (Legal values:  Fail,  Win)
   */
  @JsonAdapter(WinEnum.Adapter.class)
  public enum WinEnum {
    FAIL("Fail"),
    
    WIN("Win");

    private String value;

    WinEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WinEnum fromValue(String text) {
      for (WinEnum b : WinEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WinEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WinEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WinEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WinEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("win")
  private WinEnum win = null;

  @SerializedName("dragonKills")
  private Integer dragonKills = null;

  public MatchV4TeamStatsDto firstDragon(Boolean firstDragon) {
    this.firstDragon = firstDragon;
    return this;
  }

   /**
   * Flag indicating whether or not the team scored the first Dragon kill.
   * @return firstDragon
  **/
  @ApiModelProperty(value = "Flag indicating whether or not the team scored the first Dragon kill.")
  public Boolean isFirstDragon() {
    return firstDragon;
  }

  public void setFirstDragon(Boolean firstDragon) {
    this.firstDragon = firstDragon;
  }

  public MatchV4TeamStatsDto firstInhibitor(Boolean firstInhibitor) {
    this.firstInhibitor = firstInhibitor;
    return this;
  }

   /**
   * Flag indicating whether or not the team destroyed the first inhibitor.
   * @return firstInhibitor
  **/
  @ApiModelProperty(value = "Flag indicating whether or not the team destroyed the first inhibitor.")
  public Boolean isFirstInhibitor() {
    return firstInhibitor;
  }

  public void setFirstInhibitor(Boolean firstInhibitor) {
    this.firstInhibitor = firstInhibitor;
  }

  public MatchV4TeamStatsDto bans(List<MatchV4TeamBansDto> bans) {
    this.bans = bans;
    return this;
  }

  public MatchV4TeamStatsDto addBansItem(MatchV4TeamBansDto bansItem) {
    if (this.bans == null) {
      this.bans = new ArrayList<MatchV4TeamBansDto>();
    }
    this.bans.add(bansItem);
    return this;
  }

   /**
   * If match queueId has a draft, contains banned champion data, otherwise empty.
   * @return bans
  **/
  @ApiModelProperty(value = "If match queueId has a draft, contains banned champion data, otherwise empty.")
  public List<MatchV4TeamBansDto> getBans() {
    return bans;
  }

  public void setBans(List<MatchV4TeamBansDto> bans) {
    this.bans = bans;
  }

  public MatchV4TeamStatsDto baronKills(Integer baronKills) {
    this.baronKills = baronKills;
    return this;
  }

   /**
   * Number of times the team killed Baron.
   * @return baronKills
  **/
  @ApiModelProperty(value = "Number of times the team killed Baron.")
  public Integer getBaronKills() {
    return baronKills;
  }

  public void setBaronKills(Integer baronKills) {
    this.baronKills = baronKills;
  }

  public MatchV4TeamStatsDto firstRiftHerald(Boolean firstRiftHerald) {
    this.firstRiftHerald = firstRiftHerald;
    return this;
  }

   /**
   * Flag indicating whether or not the team scored the first Rift Herald kill.
   * @return firstRiftHerald
  **/
  @ApiModelProperty(value = "Flag indicating whether or not the team scored the first Rift Herald kill.")
  public Boolean isFirstRiftHerald() {
    return firstRiftHerald;
  }

  public void setFirstRiftHerald(Boolean firstRiftHerald) {
    this.firstRiftHerald = firstRiftHerald;
  }

  public MatchV4TeamStatsDto firstBaron(Boolean firstBaron) {
    this.firstBaron = firstBaron;
    return this;
  }

   /**
   * Flag indicating whether or not the team scored the first Baron kill.
   * @return firstBaron
  **/
  @ApiModelProperty(value = "Flag indicating whether or not the team scored the first Baron kill.")
  public Boolean isFirstBaron() {
    return firstBaron;
  }

  public void setFirstBaron(Boolean firstBaron) {
    this.firstBaron = firstBaron;
  }

  public MatchV4TeamStatsDto riftHeraldKills(Integer riftHeraldKills) {
    this.riftHeraldKills = riftHeraldKills;
    return this;
  }

   /**
   * Number of times the team killed Rift Herald.
   * @return riftHeraldKills
  **/
  @ApiModelProperty(value = "Number of times the team killed Rift Herald.")
  public Integer getRiftHeraldKills() {
    return riftHeraldKills;
  }

  public void setRiftHeraldKills(Integer riftHeraldKills) {
    this.riftHeraldKills = riftHeraldKills;
  }

  public MatchV4TeamStatsDto firstBlood(Boolean firstBlood) {
    this.firstBlood = firstBlood;
    return this;
  }

   /**
   * Flag indicating whether or not the team scored the first blood.
   * @return firstBlood
  **/
  @ApiModelProperty(value = "Flag indicating whether or not the team scored the first blood.")
  public Boolean isFirstBlood() {
    return firstBlood;
  }

  public void setFirstBlood(Boolean firstBlood) {
    this.firstBlood = firstBlood;
  }

  public MatchV4TeamStatsDto teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

   /**
   * 100 for blue side. 200 for red side.
   * @return teamId
  **/
  @ApiModelProperty(value = "100 for blue side. 200 for red side.")
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }

  public MatchV4TeamStatsDto firstTower(Boolean firstTower) {
    this.firstTower = firstTower;
    return this;
  }

   /**
   * Flag indicating whether or not the team destroyed the first tower.
   * @return firstTower
  **/
  @ApiModelProperty(value = "Flag indicating whether or not the team destroyed the first tower.")
  public Boolean isFirstTower() {
    return firstTower;
  }

  public void setFirstTower(Boolean firstTower) {
    this.firstTower = firstTower;
  }

  public MatchV4TeamStatsDto vilemawKills(Integer vilemawKills) {
    this.vilemawKills = vilemawKills;
    return this;
  }

   /**
   * Number of times the team killed Vilemaw.
   * @return vilemawKills
  **/
  @ApiModelProperty(value = "Number of times the team killed Vilemaw.")
  public Integer getVilemawKills() {
    return vilemawKills;
  }

  public void setVilemawKills(Integer vilemawKills) {
    this.vilemawKills = vilemawKills;
  }

  public MatchV4TeamStatsDto inhibitorKills(Integer inhibitorKills) {
    this.inhibitorKills = inhibitorKills;
    return this;
  }

   /**
   * Number of inhibitors the team destroyed.
   * @return inhibitorKills
  **/
  @ApiModelProperty(value = "Number of inhibitors the team destroyed.")
  public Integer getInhibitorKills() {
    return inhibitorKills;
  }

  public void setInhibitorKills(Integer inhibitorKills) {
    this.inhibitorKills = inhibitorKills;
  }

  public MatchV4TeamStatsDto towerKills(Integer towerKills) {
    this.towerKills = towerKills;
    return this;
  }

   /**
   * Number of towers the team destroyed.
   * @return towerKills
  **/
  @ApiModelProperty(value = "Number of towers the team destroyed.")
  public Integer getTowerKills() {
    return towerKills;
  }

  public void setTowerKills(Integer towerKills) {
    this.towerKills = towerKills;
  }

  public MatchV4TeamStatsDto dominionVictoryScore(Integer dominionVictoryScore) {
    this.dominionVictoryScore = dominionVictoryScore;
    return this;
  }

   /**
   * For Dominion matches, specifies the points the team had at game end.
   * @return dominionVictoryScore
  **/
  @ApiModelProperty(value = "For Dominion matches, specifies the points the team had at game end.")
  public Integer getDominionVictoryScore() {
    return dominionVictoryScore;
  }

  public void setDominionVictoryScore(Integer dominionVictoryScore) {
    this.dominionVictoryScore = dominionVictoryScore;
  }

  public MatchV4TeamStatsDto win(WinEnum win) {
    this.win = win;
    return this;
  }

   /**
   * String indicating whether or not the team won. There are only two values visibile in public match history.              (Legal values:  Fail,  Win)
   * @return win
  **/
  @ApiModelProperty(value = "String indicating whether or not the team won. There are only two values visibile in public match history.              (Legal values:  Fail,  Win)")
  public WinEnum getWin() {
    return win;
  }

  public void setWin(WinEnum win) {
    this.win = win;
  }

  public MatchV4TeamStatsDto dragonKills(Integer dragonKills) {
    this.dragonKills = dragonKills;
    return this;
  }

   /**
   * Number of times the team killed Dragon.
   * @return dragonKills
  **/
  @ApiModelProperty(value = "Number of times the team killed Dragon.")
  public Integer getDragonKills() {
    return dragonKills;
  }

  public void setDragonKills(Integer dragonKills) {
    this.dragonKills = dragonKills;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchV4TeamStatsDto matchV4TeamStatsDto = (MatchV4TeamStatsDto) o;
    return Objects.equals(this.firstDragon, matchV4TeamStatsDto.firstDragon) &&
        Objects.equals(this.firstInhibitor, matchV4TeamStatsDto.firstInhibitor) &&
        Objects.equals(this.bans, matchV4TeamStatsDto.bans) &&
        Objects.equals(this.baronKills, matchV4TeamStatsDto.baronKills) &&
        Objects.equals(this.firstRiftHerald, matchV4TeamStatsDto.firstRiftHerald) &&
        Objects.equals(this.firstBaron, matchV4TeamStatsDto.firstBaron) &&
        Objects.equals(this.riftHeraldKills, matchV4TeamStatsDto.riftHeraldKills) &&
        Objects.equals(this.firstBlood, matchV4TeamStatsDto.firstBlood) &&
        Objects.equals(this.teamId, matchV4TeamStatsDto.teamId) &&
        Objects.equals(this.firstTower, matchV4TeamStatsDto.firstTower) &&
        Objects.equals(this.vilemawKills, matchV4TeamStatsDto.vilemawKills) &&
        Objects.equals(this.inhibitorKills, matchV4TeamStatsDto.inhibitorKills) &&
        Objects.equals(this.towerKills, matchV4TeamStatsDto.towerKills) &&
        Objects.equals(this.dominionVictoryScore, matchV4TeamStatsDto.dominionVictoryScore) &&
        Objects.equals(this.win, matchV4TeamStatsDto.win) &&
        Objects.equals(this.dragonKills, matchV4TeamStatsDto.dragonKills);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstDragon, firstInhibitor, bans, baronKills, firstRiftHerald, firstBaron, riftHeraldKills, firstBlood, teamId, firstTower, vilemawKills, inhibitorKills, towerKills, dominionVictoryScore, win, dragonKills);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchV4TeamStatsDto {\n");
    
    sb.append("    firstDragon: ").append(toIndentedString(firstDragon)).append("\n");
    sb.append("    firstInhibitor: ").append(toIndentedString(firstInhibitor)).append("\n");
    sb.append("    bans: ").append(toIndentedString(bans)).append("\n");
    sb.append("    baronKills: ").append(toIndentedString(baronKills)).append("\n");
    sb.append("    firstRiftHerald: ").append(toIndentedString(firstRiftHerald)).append("\n");
    sb.append("    firstBaron: ").append(toIndentedString(firstBaron)).append("\n");
    sb.append("    riftHeraldKills: ").append(toIndentedString(riftHeraldKills)).append("\n");
    sb.append("    firstBlood: ").append(toIndentedString(firstBlood)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    firstTower: ").append(toIndentedString(firstTower)).append("\n");
    sb.append("    vilemawKills: ").append(toIndentedString(vilemawKills)).append("\n");
    sb.append("    inhibitorKills: ").append(toIndentedString(inhibitorKills)).append("\n");
    sb.append("    towerKills: ").append(toIndentedString(towerKills)).append("\n");
    sb.append("    dominionVictoryScore: ").append(toIndentedString(dominionVictoryScore)).append("\n");
    sb.append("    win: ").append(toIndentedString(win)).append("\n");
    sb.append("    dragonKills: ").append(toIndentedString(dragonKills)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

