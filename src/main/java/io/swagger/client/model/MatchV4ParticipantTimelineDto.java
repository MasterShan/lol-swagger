/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * MatchV4ParticipantTimelineDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-17T15:57:39.031+02:00")
public class MatchV4ParticipantTimelineDto {
  /**
   * Participant&#39;s calculated lane. MID and BOT are legacy values.              (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)
   */
  @JsonAdapter(LaneEnum.Adapter.class)
  public enum LaneEnum {
    MID("MID"),
    
    MIDDLE("MIDDLE"),
    
    TOP("TOP"),
    
    JUNGLE("JUNGLE"),
    
    BOT("BOT"),
    
    BOTTOM("BOTTOM");

    private String value;

    LaneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LaneEnum fromValue(String text) {
      for (LaneEnum b : LaneEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LaneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LaneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LaneEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LaneEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("lane")
  private LaneEnum lane = null;

  @SerializedName("participantId")
  private Integer participantId = null;

  @SerializedName("csDiffPerMinDeltas")
  private Map<String, Double> csDiffPerMinDeltas = null;

  @SerializedName("goldPerMinDeltas")
  private Map<String, Double> goldPerMinDeltas = null;

  @SerializedName("xpDiffPerMinDeltas")
  private Map<String, Double> xpDiffPerMinDeltas = null;

  @SerializedName("creepsPerMinDeltas")
  private Map<String, Double> creepsPerMinDeltas = null;

  @SerializedName("xpPerMinDeltas")
  private Map<String, Double> xpPerMinDeltas = null;

  /**
   * Participant&#39;s calculated role.              (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    DUO("DUO"),
    
    NONE("NONE"),
    
    SOLO("SOLO"),
    
    DUO_CARRY("DUO_CARRY"),
    
    DUO_SUPPORT("DUO_SUPPORT");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String text) {
      for (RoleEnum b : RoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RoleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("role")
  private RoleEnum role = null;

  @SerializedName("damageTakenDiffPerMinDeltas")
  private Map<String, Double> damageTakenDiffPerMinDeltas = null;

  @SerializedName("damageTakenPerMinDeltas")
  private Map<String, Double> damageTakenPerMinDeltas = null;

  public MatchV4ParticipantTimelineDto lane(LaneEnum lane) {
    this.lane = lane;
    return this;
  }

   /**
   * Participant&#39;s calculated lane. MID and BOT are legacy values.              (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)
   * @return lane
  **/
  @ApiModelProperty(value = "Participant's calculated lane. MID and BOT are legacy values.              (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)")
  public LaneEnum getLane() {
    return lane;
  }

  public void setLane(LaneEnum lane) {
    this.lane = lane;
  }

  public MatchV4ParticipantTimelineDto participantId(Integer participantId) {
    this.participantId = participantId;
    return this;
  }

   /**
   * Get participantId
   * @return participantId
  **/
  @ApiModelProperty(value = "")
  public Integer getParticipantId() {
    return participantId;
  }

  public void setParticipantId(Integer participantId) {
    this.participantId = participantId;
  }

  public MatchV4ParticipantTimelineDto csDiffPerMinDeltas(Map<String, Double> csDiffPerMinDeltas) {
    this.csDiffPerMinDeltas = csDiffPerMinDeltas;
    return this;
  }

  public MatchV4ParticipantTimelineDto putCsDiffPerMinDeltasItem(String key, Double csDiffPerMinDeltasItem) {
    if (this.csDiffPerMinDeltas == null) {
      this.csDiffPerMinDeltas = new HashMap<String, Double>();
    }
    this.csDiffPerMinDeltas.put(key, csDiffPerMinDeltasItem);
    return this;
  }

   /**
   * Creep score difference versus the calculated lane opponent(s) for a specified period.
   * @return csDiffPerMinDeltas
  **/
  @ApiModelProperty(value = "Creep score difference versus the calculated lane opponent(s) for a specified period.")
  public Map<String, Double> getCsDiffPerMinDeltas() {
    return csDiffPerMinDeltas;
  }

  public void setCsDiffPerMinDeltas(Map<String, Double> csDiffPerMinDeltas) {
    this.csDiffPerMinDeltas = csDiffPerMinDeltas;
  }

  public MatchV4ParticipantTimelineDto goldPerMinDeltas(Map<String, Double> goldPerMinDeltas) {
    this.goldPerMinDeltas = goldPerMinDeltas;
    return this;
  }

  public MatchV4ParticipantTimelineDto putGoldPerMinDeltasItem(String key, Double goldPerMinDeltasItem) {
    if (this.goldPerMinDeltas == null) {
      this.goldPerMinDeltas = new HashMap<String, Double>();
    }
    this.goldPerMinDeltas.put(key, goldPerMinDeltasItem);
    return this;
  }

   /**
   * Gold for a specified period.
   * @return goldPerMinDeltas
  **/
  @ApiModelProperty(value = "Gold for a specified period.")
  public Map<String, Double> getGoldPerMinDeltas() {
    return goldPerMinDeltas;
  }

  public void setGoldPerMinDeltas(Map<String, Double> goldPerMinDeltas) {
    this.goldPerMinDeltas = goldPerMinDeltas;
  }

  public MatchV4ParticipantTimelineDto xpDiffPerMinDeltas(Map<String, Double> xpDiffPerMinDeltas) {
    this.xpDiffPerMinDeltas = xpDiffPerMinDeltas;
    return this;
  }

  public MatchV4ParticipantTimelineDto putXpDiffPerMinDeltasItem(String key, Double xpDiffPerMinDeltasItem) {
    if (this.xpDiffPerMinDeltas == null) {
      this.xpDiffPerMinDeltas = new HashMap<String, Double>();
    }
    this.xpDiffPerMinDeltas.put(key, xpDiffPerMinDeltasItem);
    return this;
  }

   /**
   * Experience difference versus the calculated lane opponent(s) for a specified period.
   * @return xpDiffPerMinDeltas
  **/
  @ApiModelProperty(value = "Experience difference versus the calculated lane opponent(s) for a specified period.")
  public Map<String, Double> getXpDiffPerMinDeltas() {
    return xpDiffPerMinDeltas;
  }

  public void setXpDiffPerMinDeltas(Map<String, Double> xpDiffPerMinDeltas) {
    this.xpDiffPerMinDeltas = xpDiffPerMinDeltas;
  }

  public MatchV4ParticipantTimelineDto creepsPerMinDeltas(Map<String, Double> creepsPerMinDeltas) {
    this.creepsPerMinDeltas = creepsPerMinDeltas;
    return this;
  }

  public MatchV4ParticipantTimelineDto putCreepsPerMinDeltasItem(String key, Double creepsPerMinDeltasItem) {
    if (this.creepsPerMinDeltas == null) {
      this.creepsPerMinDeltas = new HashMap<String, Double>();
    }
    this.creepsPerMinDeltas.put(key, creepsPerMinDeltasItem);
    return this;
  }

   /**
   * Creeps for a specified period.
   * @return creepsPerMinDeltas
  **/
  @ApiModelProperty(value = "Creeps for a specified period.")
  public Map<String, Double> getCreepsPerMinDeltas() {
    return creepsPerMinDeltas;
  }

  public void setCreepsPerMinDeltas(Map<String, Double> creepsPerMinDeltas) {
    this.creepsPerMinDeltas = creepsPerMinDeltas;
  }

  public MatchV4ParticipantTimelineDto xpPerMinDeltas(Map<String, Double> xpPerMinDeltas) {
    this.xpPerMinDeltas = xpPerMinDeltas;
    return this;
  }

  public MatchV4ParticipantTimelineDto putXpPerMinDeltasItem(String key, Double xpPerMinDeltasItem) {
    if (this.xpPerMinDeltas == null) {
      this.xpPerMinDeltas = new HashMap<String, Double>();
    }
    this.xpPerMinDeltas.put(key, xpPerMinDeltasItem);
    return this;
  }

   /**
   * Experience change for a specified period.
   * @return xpPerMinDeltas
  **/
  @ApiModelProperty(value = "Experience change for a specified period.")
  public Map<String, Double> getXpPerMinDeltas() {
    return xpPerMinDeltas;
  }

  public void setXpPerMinDeltas(Map<String, Double> xpPerMinDeltas) {
    this.xpPerMinDeltas = xpPerMinDeltas;
  }

  public MatchV4ParticipantTimelineDto role(RoleEnum role) {
    this.role = role;
    return this;
  }

   /**
   * Participant&#39;s calculated role.              (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)
   * @return role
  **/
  @ApiModelProperty(value = "Participant's calculated role.              (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)")
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }

  public MatchV4ParticipantTimelineDto damageTakenDiffPerMinDeltas(Map<String, Double> damageTakenDiffPerMinDeltas) {
    this.damageTakenDiffPerMinDeltas = damageTakenDiffPerMinDeltas;
    return this;
  }

  public MatchV4ParticipantTimelineDto putDamageTakenDiffPerMinDeltasItem(String key, Double damageTakenDiffPerMinDeltasItem) {
    if (this.damageTakenDiffPerMinDeltas == null) {
      this.damageTakenDiffPerMinDeltas = new HashMap<String, Double>();
    }
    this.damageTakenDiffPerMinDeltas.put(key, damageTakenDiffPerMinDeltasItem);
    return this;
  }

   /**
   * Damage taken difference versus the calculated lane opponent(s) for a specified period.
   * @return damageTakenDiffPerMinDeltas
  **/
  @ApiModelProperty(value = "Damage taken difference versus the calculated lane opponent(s) for a specified period.")
  public Map<String, Double> getDamageTakenDiffPerMinDeltas() {
    return damageTakenDiffPerMinDeltas;
  }

  public void setDamageTakenDiffPerMinDeltas(Map<String, Double> damageTakenDiffPerMinDeltas) {
    this.damageTakenDiffPerMinDeltas = damageTakenDiffPerMinDeltas;
  }

  public MatchV4ParticipantTimelineDto damageTakenPerMinDeltas(Map<String, Double> damageTakenPerMinDeltas) {
    this.damageTakenPerMinDeltas = damageTakenPerMinDeltas;
    return this;
  }

  public MatchV4ParticipantTimelineDto putDamageTakenPerMinDeltasItem(String key, Double damageTakenPerMinDeltasItem) {
    if (this.damageTakenPerMinDeltas == null) {
      this.damageTakenPerMinDeltas = new HashMap<String, Double>();
    }
    this.damageTakenPerMinDeltas.put(key, damageTakenPerMinDeltasItem);
    return this;
  }

   /**
   * Damage taken for a specified period.
   * @return damageTakenPerMinDeltas
  **/
  @ApiModelProperty(value = "Damage taken for a specified period.")
  public Map<String, Double> getDamageTakenPerMinDeltas() {
    return damageTakenPerMinDeltas;
  }

  public void setDamageTakenPerMinDeltas(Map<String, Double> damageTakenPerMinDeltas) {
    this.damageTakenPerMinDeltas = damageTakenPerMinDeltas;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchV4ParticipantTimelineDto matchV4ParticipantTimelineDto = (MatchV4ParticipantTimelineDto) o;
    return Objects.equals(this.lane, matchV4ParticipantTimelineDto.lane) &&
        Objects.equals(this.participantId, matchV4ParticipantTimelineDto.participantId) &&
        Objects.equals(this.csDiffPerMinDeltas, matchV4ParticipantTimelineDto.csDiffPerMinDeltas) &&
        Objects.equals(this.goldPerMinDeltas, matchV4ParticipantTimelineDto.goldPerMinDeltas) &&
        Objects.equals(this.xpDiffPerMinDeltas, matchV4ParticipantTimelineDto.xpDiffPerMinDeltas) &&
        Objects.equals(this.creepsPerMinDeltas, matchV4ParticipantTimelineDto.creepsPerMinDeltas) &&
        Objects.equals(this.xpPerMinDeltas, matchV4ParticipantTimelineDto.xpPerMinDeltas) &&
        Objects.equals(this.role, matchV4ParticipantTimelineDto.role) &&
        Objects.equals(this.damageTakenDiffPerMinDeltas, matchV4ParticipantTimelineDto.damageTakenDiffPerMinDeltas) &&
        Objects.equals(this.damageTakenPerMinDeltas, matchV4ParticipantTimelineDto.damageTakenPerMinDeltas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lane, participantId, csDiffPerMinDeltas, goldPerMinDeltas, xpDiffPerMinDeltas, creepsPerMinDeltas, xpPerMinDeltas, role, damageTakenDiffPerMinDeltas, damageTakenPerMinDeltas);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchV4ParticipantTimelineDto {\n");
    
    sb.append("    lane: ").append(toIndentedString(lane)).append("\n");
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    csDiffPerMinDeltas: ").append(toIndentedString(csDiffPerMinDeltas)).append("\n");
    sb.append("    goldPerMinDeltas: ").append(toIndentedString(goldPerMinDeltas)).append("\n");
    sb.append("    xpDiffPerMinDeltas: ").append(toIndentedString(xpDiffPerMinDeltas)).append("\n");
    sb.append("    creepsPerMinDeltas: ").append(toIndentedString(creepsPerMinDeltas)).append("\n");
    sb.append("    xpPerMinDeltas: ").append(toIndentedString(xpPerMinDeltas)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    damageTakenDiffPerMinDeltas: ").append(toIndentedString(damageTakenDiffPerMinDeltas)).append("\n");
    sb.append("    damageTakenPerMinDeltas: ").append(toIndentedString(damageTakenPerMinDeltas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

