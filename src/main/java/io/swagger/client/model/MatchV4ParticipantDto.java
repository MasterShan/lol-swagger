/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## Download OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml)) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * OpenAPI spec version: dfa1c0f97b9cc62a43c9fb91daa1b91b3e9485c2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.MatchV4MasteryDto;
import io.swagger.client.model.MatchV4ParticipantStatsDto;
import io.swagger.client.model.MatchV4ParticipantTimelineDto;
import io.swagger.client.model.MatchV4RuneDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * MatchV4ParticipantDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-17T15:57:39.031+02:00")
public class MatchV4ParticipantDto {
  @SerializedName("stats")
  private MatchV4ParticipantStatsDto stats = null;

  @SerializedName("participantId")
  private Integer participantId = null;

  @SerializedName("runes")
  private List<MatchV4RuneDto> runes = null;

  @SerializedName("timeline")
  private MatchV4ParticipantTimelineDto timeline = null;

  @SerializedName("teamId")
  private Integer teamId = null;

  @SerializedName("spell2Id")
  private Integer spell2Id = null;

  @SerializedName("masteries")
  private List<MatchV4MasteryDto> masteries = null;

  /**
   * Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.              (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
   */
  @JsonAdapter(HighestAchievedSeasonTierEnum.Adapter.class)
  public enum HighestAchievedSeasonTierEnum {
    CHALLENGER("CHALLENGER"),
    
    MASTER("MASTER"),
    
    DIAMOND("DIAMOND"),
    
    PLATINUM("PLATINUM"),
    
    GOLD("GOLD"),
    
    SILVER("SILVER"),
    
    BRONZE("BRONZE"),
    
    UNRANKED("UNRANKED");

    private String value;

    HighestAchievedSeasonTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighestAchievedSeasonTierEnum fromValue(String text) {
      for (HighestAchievedSeasonTierEnum b : HighestAchievedSeasonTierEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HighestAchievedSeasonTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighestAchievedSeasonTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighestAchievedSeasonTierEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HighestAchievedSeasonTierEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("highestAchievedSeasonTier")
  private HighestAchievedSeasonTierEnum highestAchievedSeasonTier = null;

  @SerializedName("spell1Id")
  private Integer spell1Id = null;

  @SerializedName("championId")
  private Integer championId = null;

  public MatchV4ParticipantDto stats(MatchV4ParticipantStatsDto stats) {
    this.stats = stats;
    return this;
  }

   /**
   * Participant statistics.
   * @return stats
  **/
  @ApiModelProperty(value = "Participant statistics.")
  public MatchV4ParticipantStatsDto getStats() {
    return stats;
  }

  public void setStats(MatchV4ParticipantStatsDto stats) {
    this.stats = stats;
  }

  public MatchV4ParticipantDto participantId(Integer participantId) {
    this.participantId = participantId;
    return this;
  }

   /**
   * Get participantId
   * @return participantId
  **/
  @ApiModelProperty(value = "")
  public Integer getParticipantId() {
    return participantId;
  }

  public void setParticipantId(Integer participantId) {
    this.participantId = participantId;
  }

  public MatchV4ParticipantDto runes(List<MatchV4RuneDto> runes) {
    this.runes = runes;
    return this;
  }

  public MatchV4ParticipantDto addRunesItem(MatchV4RuneDto runesItem) {
    if (this.runes == null) {
      this.runes = new ArrayList<MatchV4RuneDto>();
    }
    this.runes.add(runesItem);
    return this;
  }

   /**
   * List of legacy Rune information. Not included for matches played with Runes Reforged.
   * @return runes
  **/
  @ApiModelProperty(value = "List of legacy Rune information. Not included for matches played with Runes Reforged.")
  public List<MatchV4RuneDto> getRunes() {
    return runes;
  }

  public void setRunes(List<MatchV4RuneDto> runes) {
    this.runes = runes;
  }

  public MatchV4ParticipantDto timeline(MatchV4ParticipantTimelineDto timeline) {
    this.timeline = timeline;
    return this;
  }

   /**
   * Participant timeline data.
   * @return timeline
  **/
  @ApiModelProperty(value = "Participant timeline data.")
  public MatchV4ParticipantTimelineDto getTimeline() {
    return timeline;
  }

  public void setTimeline(MatchV4ParticipantTimelineDto timeline) {
    this.timeline = timeline;
  }

  public MatchV4ParticipantDto teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

   /**
   * 100 for blue side. 200 for red side.
   * @return teamId
  **/
  @ApiModelProperty(value = "100 for blue side. 200 for red side.")
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }

  public MatchV4ParticipantDto spell2Id(Integer spell2Id) {
    this.spell2Id = spell2Id;
    return this;
  }

   /**
   * Second Summoner Spell id.
   * @return spell2Id
  **/
  @ApiModelProperty(value = "Second Summoner Spell id.")
  public Integer getSpell2Id() {
    return spell2Id;
  }

  public void setSpell2Id(Integer spell2Id) {
    this.spell2Id = spell2Id;
  }

  public MatchV4ParticipantDto masteries(List<MatchV4MasteryDto> masteries) {
    this.masteries = masteries;
    return this;
  }

  public MatchV4ParticipantDto addMasteriesItem(MatchV4MasteryDto masteriesItem) {
    if (this.masteries == null) {
      this.masteries = new ArrayList<MatchV4MasteryDto>();
    }
    this.masteries.add(masteriesItem);
    return this;
  }

   /**
   * List of legacy Mastery information. Not included for matches played with Runes Reforged.
   * @return masteries
  **/
  @ApiModelProperty(value = "List of legacy Mastery information. Not included for matches played with Runes Reforged.")
  public List<MatchV4MasteryDto> getMasteries() {
    return masteries;
  }

  public void setMasteries(List<MatchV4MasteryDto> masteries) {
    this.masteries = masteries;
  }

  public MatchV4ParticipantDto highestAchievedSeasonTier(HighestAchievedSeasonTierEnum highestAchievedSeasonTier) {
    this.highestAchievedSeasonTier = highestAchievedSeasonTier;
    return this;
  }

   /**
   * Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.              (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
   * @return highestAchievedSeasonTier
  **/
  @ApiModelProperty(value = "Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.              (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)")
  public HighestAchievedSeasonTierEnum getHighestAchievedSeasonTier() {
    return highestAchievedSeasonTier;
  }

  public void setHighestAchievedSeasonTier(HighestAchievedSeasonTierEnum highestAchievedSeasonTier) {
    this.highestAchievedSeasonTier = highestAchievedSeasonTier;
  }

  public MatchV4ParticipantDto spell1Id(Integer spell1Id) {
    this.spell1Id = spell1Id;
    return this;
  }

   /**
   * First Summoner Spell id.
   * @return spell1Id
  **/
  @ApiModelProperty(value = "First Summoner Spell id.")
  public Integer getSpell1Id() {
    return spell1Id;
  }

  public void setSpell1Id(Integer spell1Id) {
    this.spell1Id = spell1Id;
  }

  public MatchV4ParticipantDto championId(Integer championId) {
    this.championId = championId;
    return this;
  }

   /**
   * Get championId
   * @return championId
  **/
  @ApiModelProperty(value = "")
  public Integer getChampionId() {
    return championId;
  }

  public void setChampionId(Integer championId) {
    this.championId = championId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchV4ParticipantDto matchV4ParticipantDto = (MatchV4ParticipantDto) o;
    return Objects.equals(this.stats, matchV4ParticipantDto.stats) &&
        Objects.equals(this.participantId, matchV4ParticipantDto.participantId) &&
        Objects.equals(this.runes, matchV4ParticipantDto.runes) &&
        Objects.equals(this.timeline, matchV4ParticipantDto.timeline) &&
        Objects.equals(this.teamId, matchV4ParticipantDto.teamId) &&
        Objects.equals(this.spell2Id, matchV4ParticipantDto.spell2Id) &&
        Objects.equals(this.masteries, matchV4ParticipantDto.masteries) &&
        Objects.equals(this.highestAchievedSeasonTier, matchV4ParticipantDto.highestAchievedSeasonTier) &&
        Objects.equals(this.spell1Id, matchV4ParticipantDto.spell1Id) &&
        Objects.equals(this.championId, matchV4ParticipantDto.championId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stats, participantId, runes, timeline, teamId, spell2Id, masteries, highestAchievedSeasonTier, spell1Id, championId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchV4ParticipantDto {\n");
    
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    runes: ").append(toIndentedString(runes)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    spell2Id: ").append(toIndentedString(spell2Id)).append("\n");
    sb.append("    masteries: ").append(toIndentedString(masteries)).append("\n");
    sb.append("    highestAchievedSeasonTier: ").append(toIndentedString(highestAchievedSeasonTier)).append("\n");
    sb.append("    spell1Id: ").append(toIndentedString(spell1Id)).append("\n");
    sb.append("    championId: ").append(toIndentedString(championId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

